// Code generated by generate-natively-bound-members.mjs. DO NOT EDIT.

package unbound_method

var nativelyBoundMembers = map[string](map[string]struct{}){
	"Number": {
		"isFinite":      struct{}{},
		"isInteger":     struct{}{},
		"isNaN":         struct{}{},
		"isSafeInteger": struct{}{},
		"parseFloat":    struct{}{},
		"parseInt":      struct{}{},
	},
	"Object": {
		"assign":                    struct{}{},
		"getOwnPropertyDescriptor":  struct{}{},
		"getOwnPropertyDescriptors": struct{}{},
		"getOwnPropertyNames":       struct{}{},
		"getOwnPropertySymbols":     struct{}{},
		"hasOwn":                    struct{}{},
		"is":                        struct{}{},
		"preventExtensions":         struct{}{},
		"seal":                      struct{}{},
		"create":                    struct{}{},
		"defineProperties":          struct{}{},
		"defineProperty":            struct{}{},
		"freeze":                    struct{}{},
		"getPrototypeOf":            struct{}{},
		"setPrototypeOf":            struct{}{},
		"isExtensible":              struct{}{},
		"isFrozen":                  struct{}{},
		"isSealed":                  struct{}{},
		"keys":                      struct{}{},
		"entries":                   struct{}{},
		"fromEntries":               struct{}{},
		"values":                    struct{}{},
		"groupBy":                   struct{}{},
	},
	"String": {
		"fromCharCode":  struct{}{},
		"fromCodePoint": struct{}{},
		"raw":           struct{}{},
	},
	"RegExp": {},
	"Symbol": {
		"for":    struct{}{},
		"keyFor": struct{}{},
	},
	"Array": {
		"isArray":   struct{}{},
		"from":      struct{}{},
		"of":        struct{}{},
		"fromAsync": struct{}{},
	},
	"Proxy": {
		"revocable": struct{}{},
	},
	"Date": {
		"now":   struct{}{},
		"parse": struct{}{},
		"UTC":   struct{}{},
	},
	"Atomics": {
		"load":            struct{}{},
		"store":           struct{}{},
		"add":             struct{}{},
		"sub":             struct{}{},
		"and":             struct{}{},
		"or":              struct{}{},
		"xor":             struct{}{},
		"exchange":        struct{}{},
		"compareExchange": struct{}{},
		"isLockFree":      struct{}{},
		"wait":            struct{}{},
		"waitAsync":       struct{}{},
		"notify":          struct{}{},
	},
	"Reflect": {
		"defineProperty":           struct{}{},
		"deleteProperty":           struct{}{},
		"apply":                    struct{}{},
		"construct":                struct{}{},
		"get":                      struct{}{},
		"getOwnPropertyDescriptor": struct{}{},
		"getPrototypeOf":           struct{}{},
		"has":                      struct{}{},
		"isExtensible":             struct{}{},
		"ownKeys":                  struct{}{},
		"preventExtensions":        struct{}{},
		"set":                      struct{}{},
		"setPrototypeOf":           struct{}{},
	},
	"console": {
		"log":            struct{}{},
		"info":           struct{}{},
		"debug":          struct{}{},
		"warn":           struct{}{},
		"error":          struct{}{},
		"dir":            struct{}{},
		"time":           struct{}{},
		"timeEnd":        struct{}{},
		"timeLog":        struct{}{},
		"trace":          struct{}{},
		"assert":         struct{}{},
		"clear":          struct{}{},
		"count":          struct{}{},
		"countReset":     struct{}{},
		"group":          struct{}{},
		"groupEnd":       struct{}{},
		"table":          struct{}{},
		"dirxml":         struct{}{},
		"groupCollapsed": struct{}{},
		"Console":        struct{}{},
		"profile":        struct{}{},
		"profileEnd":     struct{}{},
		"timeStamp":      struct{}{},
		"context":        struct{}{},
		"createTask":     struct{}{},
	},
	"Math": {
		"abs":    struct{}{},
		"acos":   struct{}{},
		"acosh":  struct{}{},
		"asin":   struct{}{},
		"asinh":  struct{}{},
		"atan":   struct{}{},
		"atanh":  struct{}{},
		"atan2":  struct{}{},
		"ceil":   struct{}{},
		"cbrt":   struct{}{},
		"expm1":  struct{}{},
		"clz32":  struct{}{},
		"cos":    struct{}{},
		"cosh":   struct{}{},
		"exp":    struct{}{},
		"floor":  struct{}{},
		"fround": struct{}{},
		"hypot":  struct{}{},
		"imul":   struct{}{},
		"log":    struct{}{},
		"log1p":  struct{}{},
		"log2":   struct{}{},
		"log10":  struct{}{},
		"max":    struct{}{},
		"min":    struct{}{},
		"pow":    struct{}{},
		"random": struct{}{},
		"round":  struct{}{},
		"sign":   struct{}{},
		"sin":    struct{}{},
		"sinh":   struct{}{},
		"sqrt":   struct{}{},
		"tan":    struct{}{},
		"tanh":   struct{}{},
		"trunc":  struct{}{},
	},
	"JSON": {
		"parse":     struct{}{},
		"stringify": struct{}{},
		"rawJSON":   struct{}{},
		"isRawJSON": struct{}{},
	},
	"Intl": {
		"getCanonicalLocales": struct{}{},
		"supportedValuesOf":   struct{}{},
		"DateTimeFormat":      struct{}{},
		"NumberFormat":        struct{}{},
		"Collator":            struct{}{},
		"PluralRules":         struct{}{},
		"RelativeTimeFormat":  struct{}{},
		"ListFormat":          struct{}{},
		"Locale":              struct{}{},
		"DisplayNames":        struct{}{},
		"Segmenter":           struct{}{},
	},
}
