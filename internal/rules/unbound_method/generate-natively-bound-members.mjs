import fs from 'node:fs';
import path from 'node:path';
import { fileURLToPath } from 'node:url';

/**
 * Static methods on these globals are either not `this`-aware or supported being
 * called without `this`.
 *
 * - `Promise` is not in the list because it supports subclassing by using `this`
 * - `Array` is in the list because although it supports subclassing, the `this`
 *   value defaults to `Array` when unbound
 *
 * This is now a language-design invariant: static methods are never `this`-aware
 * because TC39 wants to make `array.map(Class.method)` work!
 */
const SUPPORTED_GLOBALS = [
  'Number',
  'Object',
  'String',
  'RegExp',
  'Symbol',
  'Array',
  'Proxy',
  'Date',
  'Atomics',
  'Reflect',
  'console',
  'Math',
  'JSON',
  'Intl',
];
const nativelyBoundMembers = SUPPORTED_GLOBALS.map(namespace => {
  if (!(namespace in global)) {
    // node.js might not have namespaces like Intl depending on compilation options
    // https://nodejs.org/api/intl.html#intl_options_for_building_node_js
    return [];
  }
  const object = global[namespace];
  return [
    namespace,
    Object.getOwnPropertyNames(object).filter(
      name => !name.startsWith('_') && typeof object[name] === 'function',
    ),
  ];
});

const content = `
// Code generated by ${path.basename(fileURLToPath(import.meta.url))}. DO NOT EDIT.

package unbound_method

var nativelyBoundMembers = map[string](map[string]struct{}){
${nativelyBoundMembers
  .map(([namespace, names]) => {
    const lines = names
      .map(name => `\t\t${JSON.stringify(name)}: struct{}{},\n`)
      .join('');
    return `\t${JSON.stringify(namespace)}: {\n${lines}\t},\n`;
  })
  .join('')}
}
`;

fs.writeFileSync('./natively_bound_members.go', content);
