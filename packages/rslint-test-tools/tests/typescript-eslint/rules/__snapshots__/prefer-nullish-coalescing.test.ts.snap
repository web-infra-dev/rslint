// Rstest Snapshot v1

exports[`prefer-nullish-coalescing > invalid 1`] = `
{
  "code": "
declare let x: string | null;
(x || 'foo');
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 6,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 2`] = `
{
  "code": "
declare let x: string | null;
(x ||= 'foo');
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 7,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 3`] = `
{
  "code": "
declare let x: number | null;
(x || 'foo');
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 6,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 4`] = `
{
  "code": "
declare let x: number | null;
(x ||= 'foo');
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 7,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 5`] = `
{
  "code": "
declare let x: boolean | null;
(x || 'foo');
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 6,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 6`] = `
{
  "code": "
declare let x: boolean | null;
(x ||= 'foo');
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 7,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 7`] = `
{
  "code": "
declare let x: object | null;
(x || 'foo');
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 6,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 8`] = `
{
  "code": "
declare let x: object | null;
(x ||= 'foo');
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 7,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 9`] = `
{
  "code": "
declare let x: string | undefined;
(x || 'foo');
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 6,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 10`] = `
{
  "code": "
declare let x: string | undefined;
(x ||= 'foo');
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 7,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 11`] = `
{
  "code": "
declare let x: number | undefined;
(x || 'foo');
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 6,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 12`] = `
{
  "code": "
declare let x: number | undefined;
(x ||= 'foo');
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 7,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 13`] = `
{
  "code": "
declare let x: boolean | undefined;
(x || 'foo');
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 6,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 14`] = `
{
  "code": "
declare let x: boolean | undefined;
(x ||= 'foo');
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 7,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 15`] = `
{
  "code": "
declare let x: object | undefined;
(x || 'foo');
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 6,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 16`] = `
{
  "code": "
declare let x: object | undefined;
(x ||= 'foo');
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 7,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 17`] = `
{
  "code": "
declare let x: string | null | undefined;
(x || 'foo');
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 6,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 18`] = `
{
  "code": "
declare let x: string | null | undefined;
(x ||= 'foo');
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 7,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 19`] = `
{
  "code": "
declare let x: number | null | undefined;
(x || 'foo');
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 6,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 20`] = `
{
  "code": "
declare let x: number | null | undefined;
(x ||= 'foo');
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 7,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 21`] = `
{
  "code": "
declare let x: boolean | null | undefined;
(x || 'foo');
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 6,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 22`] = `
{
  "code": "
declare let x: boolean | null | undefined;
(x ||= 'foo');
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 7,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 23`] = `
{
  "code": "
declare let x: object | null | undefined;
(x || 'foo');
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 6,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 24`] = `
{
  "code": "
declare let x: object | null | undefined;
(x ||= 'foo');
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 7,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 25`] = `
{
  "code": "this != undefined ? this : y;",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 29,
          "line": 1,
        },
        "start": {
          "column": 1,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 26`] = `
{
  "code": "
declare let x: string | undefined;
x !== undefined ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 24,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 27`] = `
{
  "code": "
declare let x: string | undefined;
undefined !== x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 24,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 28`] = `
{
  "code": "
declare let x: string | undefined;
x === undefined ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 24,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 29`] = `
{
  "code": "
declare let x: string | undefined;
undefined === x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 24,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 30`] = `
{
  "code": "
declare let x: string | null;
x !== null ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 19,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 31`] = `
{
  "code": "
declare let x: string | null;
null !== x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 19,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 32`] = `
{
  "code": "
declare let x: string | null;
x === null ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 19,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 33`] = `
{
  "code": "
declare let x: string | null;
null === x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 19,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 34`] = `
{
  "code": "
declare let x: string | null;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 35`] = `
{
  "code": "
declare let x: string | null;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 36`] = `
{
  "code": "
declare let x: string | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 37`] = `
{
  "code": "
declare let x: string | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 38`] = `
{
  "code": "
declare let x: string | null | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 39`] = `
{
  "code": "
declare let x: string | null | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 40`] = `
{
  "code": "
declare let x: string | object | null;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 41`] = `
{
  "code": "
declare let x: string | object | null;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 42`] = `
{
  "code": "
declare let x: string | object | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 43`] = `
{
  "code": "
declare let x: string | object | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 44`] = `
{
  "code": "
declare let x: string | object | null | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 45`] = `
{
  "code": "
declare let x: string | object | null | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 46`] = `
{
  "code": "
declare let x: number | null;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 47`] = `
{
  "code": "
declare let x: number | null;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 48`] = `
{
  "code": "
declare let x: number | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 49`] = `
{
  "code": "
declare let x: number | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 50`] = `
{
  "code": "
declare let x: number | null | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 51`] = `
{
  "code": "
declare let x: number | null | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 52`] = `
{
  "code": "
declare let x: bigint | null;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 53`] = `
{
  "code": "
declare let x: bigint | null;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 54`] = `
{
  "code": "
declare let x: bigint | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 55`] = `
{
  "code": "
declare let x: bigint | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 56`] = `
{
  "code": "
declare let x: bigint | null | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 57`] = `
{
  "code": "
declare let x: bigint | null | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 58`] = `
{
  "code": "
declare let x: boolean | null;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 59`] = `
{
  "code": "
declare let x: boolean | null;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 60`] = `
{
  "code": "
declare let x: boolean | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 61`] = `
{
  "code": "
declare let x: boolean | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 62`] = `
{
  "code": "
declare let x: boolean | null | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 63`] = `
{
  "code": "
declare let x: boolean | null | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 64`] = `
{
  "code": "
declare let x: string[] | null;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 65`] = `
{
  "code": "
declare let x: string[] | null;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 66`] = `
{
  "code": "
declare let x: string[] | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 67`] = `
{
  "code": "
declare let x: string[] | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 68`] = `
{
  "code": "
declare let x: string[] | null | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 69`] = `
{
  "code": "
declare let x: string[] | null | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 70`] = `
{
  "code": "
declare let x: object | null;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 71`] = `
{
  "code": "
declare let x: object | null;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 72`] = `
{
  "code": "
declare let x: object | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 73`] = `
{
  "code": "
declare let x: object | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 74`] = `
{
  "code": "
declare let x: object | null | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 75`] = `
{
  "code": "
declare let x: object | null | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 76`] = `
{
  "code": "
declare let x: Function | null;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 77`] = `
{
  "code": "
declare let x: Function | null;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 78`] = `
{
  "code": "
declare let x: Function | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 79`] = `
{
  "code": "
declare let x: Function | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 80`] = `
{
  "code": "
declare let x: Function | null | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 81`] = `
{
  "code": "
declare let x: Function | null | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 82`] = `
{
  "code": "
declare let x: (() => string) | null;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 83`] = `
{
  "code": "
declare let x: (() => string) | null;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 84`] = `
{
  "code": "
declare let x: (() => string) | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 85`] = `
{
  "code": "
declare let x: (() => string) | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 86`] = `
{
  "code": "
declare let x: (() => string) | null | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 87`] = `
{
  "code": "
declare let x: (() => string) | null | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 88`] = `
{
  "code": "
declare let x: { n: string | null };
x.n ? x.n : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 89`] = `
{
  "code": "
declare let x: { n: string | null };
!x.n ? y : x.n;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 15,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 90`] = `
{
  "code": "
declare let x: { n: string | undefined };
x.n ? x.n : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 91`] = `
{
  "code": "
declare let x: { n: string | undefined };
!x.n ? y : x.n;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 15,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 92`] = `
{
  "code": "
declare let x: { n: string | null | undefined };
x.n ? x.n : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 93`] = `
{
  "code": "
declare let x: { n: string | null | undefined };
!x.n ? y : x.n;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 15,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 94`] = `
{
  "code": "
declare let x: { n: string | object | null };
x.n ? x.n : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 95`] = `
{
  "code": "
declare let x: { n: string | object | null };
!x.n ? y : x.n;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 15,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 96`] = `
{
  "code": "
declare let x: { n: string | object | undefined };
x.n ? x.n : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 97`] = `
{
  "code": "
declare let x: { n: string | object | undefined };
!x.n ? y : x.n;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 15,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 98`] = `
{
  "code": "
declare let x: { n: string | object | null | undefined };
x.n ? x.n : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 99`] = `
{
  "code": "
declare let x: { n: string | object | null | undefined };
!x.n ? y : x.n;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 15,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 100`] = `
{
  "code": "
declare let x: { n: number | null };
x.n ? x.n : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 101`] = `
{
  "code": "
declare let x: { n: number | null };
!x.n ? y : x.n;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 15,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 102`] = `
{
  "code": "
declare let x: { n: number | undefined };
x.n ? x.n : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 103`] = `
{
  "code": "
declare let x: { n: number | undefined };
!x.n ? y : x.n;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 15,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 104`] = `
{
  "code": "
declare let x: { n: number | null | undefined };
x.n ? x.n : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 105`] = `
{
  "code": "
declare let x: { n: number | null | undefined };
!x.n ? y : x.n;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 15,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 106`] = `
{
  "code": "
declare let x: { n: bigint | null };
x.n ? x.n : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 107`] = `
{
  "code": "
declare let x: { n: bigint | null };
!x.n ? y : x.n;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 15,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 108`] = `
{
  "code": "
declare let x: { n: bigint | undefined };
x.n ? x.n : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 109`] = `
{
  "code": "
declare let x: { n: bigint | undefined };
!x.n ? y : x.n;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 15,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 110`] = `
{
  "code": "
declare let x: { n: bigint | null | undefined };
x.n ? x.n : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 111`] = `
{
  "code": "
declare let x: { n: bigint | null | undefined };
!x.n ? y : x.n;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 15,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 112`] = `
{
  "code": "
declare let x: { n: boolean | null };
x.n ? x.n : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 113`] = `
{
  "code": "
declare let x: { n: boolean | null };
!x.n ? y : x.n;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 15,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 114`] = `
{
  "code": "
declare let x: { n: boolean | undefined };
x.n ? x.n : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 115`] = `
{
  "code": "
declare let x: { n: boolean | undefined };
!x.n ? y : x.n;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 15,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 116`] = `
{
  "code": "
declare let x: { n: boolean | null | undefined };
x.n ? x.n : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 117`] = `
{
  "code": "
declare let x: { n: boolean | null | undefined };
!x.n ? y : x.n;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 15,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 118`] = `
{
  "code": "
declare let x: { n: string[] | null };
x.n ? x.n : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 119`] = `
{
  "code": "
declare let x: { n: string[] | null };
!x.n ? y : x.n;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 15,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 120`] = `
{
  "code": "
declare let x: { n: string[] | undefined };
x.n ? x.n : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 121`] = `
{
  "code": "
declare let x: { n: string[] | undefined };
!x.n ? y : x.n;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 15,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 122`] = `
{
  "code": "
declare let x: { n: string[] | null | undefined };
x.n ? x.n : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 123`] = `
{
  "code": "
declare let x: { n: string[] | null | undefined };
!x.n ? y : x.n;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 15,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 124`] = `
{
  "code": "
declare let x: { n: object | null };
x.n ? x.n : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 125`] = `
{
  "code": "
declare let x: { n: object | null };
!x.n ? y : x.n;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 15,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 126`] = `
{
  "code": "
declare let x: { n: object | undefined };
x.n ? x.n : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 127`] = `
{
  "code": "
declare let x: { n: object | undefined };
!x.n ? y : x.n;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 15,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 128`] = `
{
  "code": "
declare let x: { n: object | null | undefined };
x.n ? x.n : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 129`] = `
{
  "code": "
declare let x: { n: object | null | undefined };
!x.n ? y : x.n;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 15,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 130`] = `
{
  "code": "
declare let x: { n: Function | null };
x.n ? x.n : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 131`] = `
{
  "code": "
declare let x: { n: Function | null };
!x.n ? y : x.n;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 15,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 132`] = `
{
  "code": "
declare let x: { n: Function | undefined };
x.n ? x.n : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 133`] = `
{
  "code": "
declare let x: { n: Function | undefined };
!x.n ? y : x.n;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 15,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 134`] = `
{
  "code": "
declare let x: { n: Function | null | undefined };
x.n ? x.n : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 135`] = `
{
  "code": "
declare let x: { n: Function | null | undefined };
!x.n ? y : x.n;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 15,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 136`] = `
{
  "code": "
declare let x: { n: (() => string) | null };
x.n ? x.n : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 137`] = `
{
  "code": "
declare let x: { n: (() => string) | null };
!x.n ? y : x.n;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 15,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 138`] = `
{
  "code": "
declare let x: { n: (() => string) | undefined };
x.n ? x.n : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 139`] = `
{
  "code": "
declare let x: { n: (() => string) | undefined };
!x.n ? y : x.n;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 15,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 140`] = `
{
  "code": "
declare let x: { n: (() => string) | null | undefined };
x.n ? x.n : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 141`] = `
{
  "code": "
declare let x: { n: (() => string) | null | undefined };
!x.n ? y : x.n;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 15,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 142`] = `
{
  "code": "
declare let x: { n?: { a?: string } };
x.n?.a ? x?.n?.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 21,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 143`] = `
{
  "code": "
declare let x: { n?: { a?: string } };
x.n?.a ? x?.n.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 20,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 144`] = `
{
  "code": "
declare let x: { n?: { a?: string } };
x.n?.a ? x.n.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 19,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 145`] = `
{
  "code": "
declare let x: { n?: { a?: string } };
x.n?.a !== undefined ? x?.n?.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 35,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 146`] = `
{
  "code": "
declare let x: { n?: { a?: string } };
x.n?.a !== undefined ? x?.n.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 34,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 147`] = `
{
  "code": "
declare let x: { n?: { a?: string } };
x.n?.a !== undefined ? x.n.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 33,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 148`] = `
{
  "code": "
declare let x: { n?: { a?: string } };
x.n?.a != undefined ? x?.n?.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 34,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 149`] = `
{
  "code": "
declare let x: { n?: { a?: string } };
x.n?.a != undefined ? x?.n.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 33,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 150`] = `
{
  "code": "
declare let x: { n?: { a?: string } };
x.n?.a != undefined ? x.n.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 32,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 151`] = `
{
  "code": "
declare let x: { n?: { a?: string } };
x.n?.a != null ? x?.n?.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 29,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 152`] = `
{
  "code": "
declare let x: { n?: { a?: string } };
x.n?.a != null ? x?.n.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 28,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 153`] = `
{
  "code": "
declare let x: { n?: { a?: string } };
x.n?.a != null ? x.n.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 27,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 154`] = `
{
  "code": "
declare let x: { n?: { a?: string | null } };
x.n?.a !== undefined && x.n.a !== null ? x?.n?.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 53,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 155`] = `
{
  "code": "
declare let x: { n?: { a?: string | null } };
x.n?.a !== undefined && x.n.a !== null ? x.n.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 51,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 156`] = `
{
  "code": "
declare let x: { n?: { a?: string } };
x?.n?.a ? x?.n?.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 22,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 157`] = `
{
  "code": "
declare let x: { n?: { a?: string } };
x?.n?.a ? x.n?.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 21,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 158`] = `
{
  "code": "
declare let x: { n?: { a?: string } };
x?.n?.a ? x?.n.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 21,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 159`] = `
{
  "code": "
declare let x: { n?: { a?: string } };
x?.n?.a ? x.n.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 20,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 160`] = `
{
  "code": "
declare let x: { n?: { a?: string } };
x?.n?.a !== undefined ? x?.n?.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 36,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 161`] = `
{
  "code": "
declare let x: { n?: { a?: string } };
x?.n?.a !== undefined ? x.n?.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 35,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 162`] = `
{
  "code": "
declare let x: { n?: { a?: string } };
x?.n?.a !== undefined ? x?.n.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 35,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 163`] = `
{
  "code": "
declare let x: { n?: { a?: string } };
x?.n?.a !== undefined ? x.n.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 34,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 164`] = `
{
  "code": "
declare let x: { n?: { a?: string } };
x?.n?.a != undefined ? x?.n?.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 35,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 165`] = `
{
  "code": "
declare let x: { n?: { a?: string } };
x?.n?.a != undefined ? x.n?.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 34,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 166`] = `
{
  "code": "
declare let x: { n?: { a?: string } };
x?.n?.a != undefined ? x?.n.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 34,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 167`] = `
{
  "code": "
declare let x: { n?: { a?: string } };
x?.n?.a != undefined ? x.n.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 33,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 168`] = `
{
  "code": "
declare let x: { n?: { a?: string } };
x?.n?.a != null ? x?.n?.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 30,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 169`] = `
{
  "code": "
declare let x: { n?: { a?: string } };
x?.n?.a != null ? x.n?.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 29,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 170`] = `
{
  "code": "
declare let x: { n?: { a?: string } };
x?.n?.a != null ? x?.n.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 29,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 171`] = `
{
  "code": "
declare let x: { n?: { a?: string } };
x?.n?.a != null ? x.n.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 28,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 172`] = `
{
  "code": "
declare let x: { n?: { a?: string | null } };
x?.n?.a !== undefined && x.n.a !== null ? x?.n?.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 54,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 173`] = `
{
  "code": "
declare let x: { n?: { a?: string | null } };
x?.n?.a !== undefined && x.n.a !== null ? x.n?.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 53,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 174`] = `
{
  "code": "
declare let x: { n?: { a?: string | null } };
x?.n?.a !== undefined && x.n.a !== null ? x?.n.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 53,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 175`] = `
{
  "code": "
declare let x: { n?: { a?: string | null } };
x?.n?.a !== undefined && x.n.a !== null ? x.n.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 52,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 176`] = `
{
  "code": "
declare let x: { n?: { a?: string | null } };
x?.n?.a !== undefined && x.n.a !== null ? (x?.n)?.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 56,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 177`] = `
{
  "code": "
declare let x: { n?: { a?: string | null } };
x?.n?.a !== undefined && x.n.a !== null ? (x.n)?.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 55,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 178`] = `
{
  "code": "
declare let x: { n?: { a?: string | null } };
x?.n?.a !== undefined && x.n.a !== null ? (x?.n).a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 55,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 179`] = `
{
  "code": "
declare let x: { n?: { a?: string | null } };
x?.n?.a !== undefined && x.n.a !== null ? (x.n).a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 54,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 180`] = `
{
  "code": "
declare let x: { n?: { a?: string | null } };
(x?.n)?.a ? x?.n?.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 24,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 181`] = `
{
  "code": "
declare let x: { n?: { a?: string | null } };
(x?.n)?.a ? x.n?.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 23,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 182`] = `
{
  "code": "
declare let x: { n?: { a?: string | null } };
(x?.n)?.a ? x?.n.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 23,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 183`] = `
{
  "code": "
declare let x: { n?: { a?: string | null } };
(x?.n)?.a ? x.n.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 22,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 184`] = `
{
  "code": "
declare let x: { n?: { a?: string | null } };
(x?.n)?.a ? (x?.n)?.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 26,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 185`] = `
{
  "code": "
declare let x: { n?: { a?: string | null } };
(x?.n)?.a ? (x.n)?.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 25,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 186`] = `
{
  "code": "
declare let x: { n?: { a?: string | null } };
(x?.n)?.a ? (x?.n).a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 25,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 187`] = `
{
  "code": "
declare let x: { n?: { a?: string | null } };
(x.n)?.a ? x?.n?.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 23,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 188`] = `
{
  "code": "
declare let x: { n?: { a?: string | null } };
(x.n)?.a ? x.n?.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 22,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 189`] = `
{
  "code": "
declare let x: { n?: { a?: string | null } };
(x.n)?.a ? x?.n.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 22,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 190`] = `
{
  "code": "
declare let x: { n?: { a?: string | null } };
(x.n)?.a ? x.n.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 21,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 191`] = `
{
  "code": "
declare let x: { n?: { a?: string | null } };
(x.n)?.a ? (x?.n)?.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 25,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 192`] = `
{
  "code": "
declare let x: { n?: { a?: string | null } };
(x.n)?.a ? (x.n)?.a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 24,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 193`] = `
{
  "code": "
declare let x: { n?: { a?: string | null } };
(x.n)?.a ? (x?.n).a : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 24,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 194`] = `
{
  "code": "
declare let x: string[] | null;
if (x) {
}
      ",
  "diagnostics": [
    {
      "message": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
      "messageId": "noStrictNullCheck",
      "range": {
        "end": {
          "column": 1,
          "line": 1,
        },
        "start": {
          "column": 1,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 195`] = `
{
  "code": "
declare let x: string | null;
(x || 'foo') ? null : null;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 6,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 196`] = `
{
  "code": "
declare let x: string | null;
(x ||= 'foo') ? null : null;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 7,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 197`] = `
{
  "code": "
declare let x: number | null;
(x || 'foo') ? null : null;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 6,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 198`] = `
{
  "code": "
declare let x: number | null;
(x ||= 'foo') ? null : null;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 7,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 199`] = `
{
  "code": "
declare let x: boolean | null;
(x || 'foo') ? null : null;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 6,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 200`] = `
{
  "code": "
declare let x: boolean | null;
(x ||= 'foo') ? null : null;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 7,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 201`] = `
{
  "code": "
declare let x: object | null;
(x || 'foo') ? null : null;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 6,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 202`] = `
{
  "code": "
declare let x: object | null;
(x ||= 'foo') ? null : null;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 7,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 203`] = `
{
  "code": "
declare let x: string | undefined;
(x || 'foo') ? null : null;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 6,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 204`] = `
{
  "code": "
declare let x: string | undefined;
(x ||= 'foo') ? null : null;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 7,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 205`] = `
{
  "code": "
declare let x: number | undefined;
(x || 'foo') ? null : null;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 6,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 206`] = `
{
  "code": "
declare let x: number | undefined;
(x ||= 'foo') ? null : null;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 7,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 207`] = `
{
  "code": "
declare let x: boolean | undefined;
(x || 'foo') ? null : null;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 6,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 208`] = `
{
  "code": "
declare let x: boolean | undefined;
(x ||= 'foo') ? null : null;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 7,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 209`] = `
{
  "code": "
declare let x: object | undefined;
(x || 'foo') ? null : null;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 6,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 210`] = `
{
  "code": "
declare let x: object | undefined;
(x ||= 'foo') ? null : null;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 7,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 211`] = `
{
  "code": "
declare let x: string | null | undefined;
(x || 'foo') ? null : null;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 6,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 212`] = `
{
  "code": "
declare let x: string | null | undefined;
(x ||= 'foo') ? null : null;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 7,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 213`] = `
{
  "code": "
declare let x: number | null | undefined;
(x || 'foo') ? null : null;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 6,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 214`] = `
{
  "code": "
declare let x: number | null | undefined;
(x ||= 'foo') ? null : null;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 7,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 215`] = `
{
  "code": "
declare let x: boolean | null | undefined;
(x || 'foo') ? null : null;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 6,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 216`] = `
{
  "code": "
declare let x: boolean | null | undefined;
(x ||= 'foo') ? null : null;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 7,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 217`] = `
{
  "code": "
declare let x: object | null | undefined;
(x || 'foo') ? null : null;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 6,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 218`] = `
{
  "code": "
declare let x: object | null | undefined;
(x ||= 'foo') ? null : null;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 7,
          "line": 3,
        },
        "start": {
          "column": 4,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 219`] = `
{
  "code": "
declare let x: string | null;
if ((x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 8,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 220`] = `
{
  "code": "
declare let x: string | null;
if ((x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 8,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 221`] = `
{
  "code": "
declare let x: number | null;
if ((x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 8,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 222`] = `
{
  "code": "
declare let x: number | null;
if ((x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 8,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 223`] = `
{
  "code": "
declare let x: boolean | null;
if ((x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 8,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 224`] = `
{
  "code": "
declare let x: boolean | null;
if ((x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 8,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 225`] = `
{
  "code": "
declare let x: object | null;
if ((x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 8,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 226`] = `
{
  "code": "
declare let x: object | null;
if ((x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 8,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 227`] = `
{
  "code": "
declare let x: string | undefined;
if ((x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 8,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 228`] = `
{
  "code": "
declare let x: string | undefined;
if ((x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 8,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 229`] = `
{
  "code": "
declare let x: number | undefined;
if ((x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 8,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 230`] = `
{
  "code": "
declare let x: number | undefined;
if ((x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 8,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 231`] = `
{
  "code": "
declare let x: boolean | undefined;
if ((x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 8,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 232`] = `
{
  "code": "
declare let x: boolean | undefined;
if ((x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 8,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 233`] = `
{
  "code": "
declare let x: object | undefined;
if ((x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 8,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 234`] = `
{
  "code": "
declare let x: object | undefined;
if ((x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 8,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 235`] = `
{
  "code": "
declare let x: string | null | undefined;
if ((x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 8,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 236`] = `
{
  "code": "
declare let x: string | null | undefined;
if ((x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 8,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 237`] = `
{
  "code": "
declare let x: number | null | undefined;
if ((x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 8,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 238`] = `
{
  "code": "
declare let x: number | null | undefined;
if ((x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 8,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 239`] = `
{
  "code": "
declare let x: boolean | null | undefined;
if ((x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 8,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 240`] = `
{
  "code": "
declare let x: boolean | null | undefined;
if ((x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 8,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 241`] = `
{
  "code": "
declare let x: object | null | undefined;
if ((x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 8,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 242`] = `
{
  "code": "
declare let x: object | null | undefined;
if ((x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 8,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 243`] = `
{
  "code": "
declare let x: string | null;
do {} while ((x || 'foo'))
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 19,
          "line": 3,
        },
        "start": {
          "column": 17,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 244`] = `
{
  "code": "
declare let x: string | null;
do {} while ((x ||= 'foo'))
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 20,
          "line": 3,
        },
        "start": {
          "column": 17,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 245`] = `
{
  "code": "
declare let x: number | null;
do {} while ((x || 'foo'))
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 19,
          "line": 3,
        },
        "start": {
          "column": 17,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 246`] = `
{
  "code": "
declare let x: number | null;
do {} while ((x ||= 'foo'))
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 20,
          "line": 3,
        },
        "start": {
          "column": 17,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 247`] = `
{
  "code": "
declare let x: boolean | null;
do {} while ((x || 'foo'))
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 19,
          "line": 3,
        },
        "start": {
          "column": 17,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 248`] = `
{
  "code": "
declare let x: boolean | null;
do {} while ((x ||= 'foo'))
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 20,
          "line": 3,
        },
        "start": {
          "column": 17,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 249`] = `
{
  "code": "
declare let x: object | null;
do {} while ((x || 'foo'))
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 19,
          "line": 3,
        },
        "start": {
          "column": 17,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 250`] = `
{
  "code": "
declare let x: object | null;
do {} while ((x ||= 'foo'))
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 20,
          "line": 3,
        },
        "start": {
          "column": 17,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 251`] = `
{
  "code": "
declare let x: string | undefined;
do {} while ((x || 'foo'))
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 19,
          "line": 3,
        },
        "start": {
          "column": 17,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 252`] = `
{
  "code": "
declare let x: string | undefined;
do {} while ((x ||= 'foo'))
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 20,
          "line": 3,
        },
        "start": {
          "column": 17,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 253`] = `
{
  "code": "
declare let x: number | undefined;
do {} while ((x || 'foo'))
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 19,
          "line": 3,
        },
        "start": {
          "column": 17,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 254`] = `
{
  "code": "
declare let x: number | undefined;
do {} while ((x ||= 'foo'))
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 20,
          "line": 3,
        },
        "start": {
          "column": 17,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 255`] = `
{
  "code": "
declare let x: boolean | undefined;
do {} while ((x || 'foo'))
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 19,
          "line": 3,
        },
        "start": {
          "column": 17,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 256`] = `
{
  "code": "
declare let x: boolean | undefined;
do {} while ((x ||= 'foo'))
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 20,
          "line": 3,
        },
        "start": {
          "column": 17,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 257`] = `
{
  "code": "
declare let x: object | undefined;
do {} while ((x || 'foo'))
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 19,
          "line": 3,
        },
        "start": {
          "column": 17,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 258`] = `
{
  "code": "
declare let x: object | undefined;
do {} while ((x ||= 'foo'))
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 20,
          "line": 3,
        },
        "start": {
          "column": 17,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 259`] = `
{
  "code": "
declare let x: string | null | undefined;
do {} while ((x || 'foo'))
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 19,
          "line": 3,
        },
        "start": {
          "column": 17,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 260`] = `
{
  "code": "
declare let x: string | null | undefined;
do {} while ((x ||= 'foo'))
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 20,
          "line": 3,
        },
        "start": {
          "column": 17,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 261`] = `
{
  "code": "
declare let x: number | null | undefined;
do {} while ((x || 'foo'))
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 19,
          "line": 3,
        },
        "start": {
          "column": 17,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 262`] = `
{
  "code": "
declare let x: number | null | undefined;
do {} while ((x ||= 'foo'))
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 20,
          "line": 3,
        },
        "start": {
          "column": 17,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 263`] = `
{
  "code": "
declare let x: boolean | null | undefined;
do {} while ((x || 'foo'))
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 19,
          "line": 3,
        },
        "start": {
          "column": 17,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 264`] = `
{
  "code": "
declare let x: boolean | null | undefined;
do {} while ((x ||= 'foo'))
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 20,
          "line": 3,
        },
        "start": {
          "column": 17,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 265`] = `
{
  "code": "
declare let x: object | null | undefined;
do {} while ((x || 'foo'))
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 19,
          "line": 3,
        },
        "start": {
          "column": 17,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 266`] = `
{
  "code": "
declare let x: object | null | undefined;
do {} while ((x ||= 'foo'))
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 20,
          "line": 3,
        },
        "start": {
          "column": 17,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 267`] = `
{
  "code": "
declare let x: string | null;
for (;(x || 'foo');) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 12,
          "line": 3,
        },
        "start": {
          "column": 10,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 268`] = `
{
  "code": "
declare let x: string | null;
for (;(x ||= 'foo');) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 13,
          "line": 3,
        },
        "start": {
          "column": 10,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 269`] = `
{
  "code": "
declare let x: number | null;
for (;(x || 'foo');) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 12,
          "line": 3,
        },
        "start": {
          "column": 10,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 270`] = `
{
  "code": "
declare let x: number | null;
for (;(x ||= 'foo');) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 13,
          "line": 3,
        },
        "start": {
          "column": 10,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 271`] = `
{
  "code": "
declare let x: boolean | null;
for (;(x || 'foo');) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 12,
          "line": 3,
        },
        "start": {
          "column": 10,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 272`] = `
{
  "code": "
declare let x: boolean | null;
for (;(x ||= 'foo');) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 13,
          "line": 3,
        },
        "start": {
          "column": 10,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 273`] = `
{
  "code": "
declare let x: object | null;
for (;(x || 'foo');) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 12,
          "line": 3,
        },
        "start": {
          "column": 10,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 274`] = `
{
  "code": "
declare let x: object | null;
for (;(x ||= 'foo');) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 13,
          "line": 3,
        },
        "start": {
          "column": 10,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 275`] = `
{
  "code": "
declare let x: string | undefined;
for (;(x || 'foo');) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 12,
          "line": 3,
        },
        "start": {
          "column": 10,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 276`] = `
{
  "code": "
declare let x: string | undefined;
for (;(x ||= 'foo');) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 13,
          "line": 3,
        },
        "start": {
          "column": 10,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 277`] = `
{
  "code": "
declare let x: number | undefined;
for (;(x || 'foo');) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 12,
          "line": 3,
        },
        "start": {
          "column": 10,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 278`] = `
{
  "code": "
declare let x: number | undefined;
for (;(x ||= 'foo');) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 13,
          "line": 3,
        },
        "start": {
          "column": 10,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 279`] = `
{
  "code": "
declare let x: boolean | undefined;
for (;(x || 'foo');) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 12,
          "line": 3,
        },
        "start": {
          "column": 10,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 280`] = `
{
  "code": "
declare let x: boolean | undefined;
for (;(x ||= 'foo');) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 13,
          "line": 3,
        },
        "start": {
          "column": 10,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 281`] = `
{
  "code": "
declare let x: object | undefined;
for (;(x || 'foo');) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 12,
          "line": 3,
        },
        "start": {
          "column": 10,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 282`] = `
{
  "code": "
declare let x: object | undefined;
for (;(x ||= 'foo');) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 13,
          "line": 3,
        },
        "start": {
          "column": 10,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 283`] = `
{
  "code": "
declare let x: string | null | undefined;
for (;(x || 'foo');) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 12,
          "line": 3,
        },
        "start": {
          "column": 10,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 284`] = `
{
  "code": "
declare let x: string | null | undefined;
for (;(x ||= 'foo');) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 13,
          "line": 3,
        },
        "start": {
          "column": 10,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 285`] = `
{
  "code": "
declare let x: number | null | undefined;
for (;(x || 'foo');) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 12,
          "line": 3,
        },
        "start": {
          "column": 10,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 286`] = `
{
  "code": "
declare let x: number | null | undefined;
for (;(x ||= 'foo');) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 13,
          "line": 3,
        },
        "start": {
          "column": 10,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 287`] = `
{
  "code": "
declare let x: boolean | null | undefined;
for (;(x || 'foo');) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 12,
          "line": 3,
        },
        "start": {
          "column": 10,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 288`] = `
{
  "code": "
declare let x: boolean | null | undefined;
for (;(x ||= 'foo');) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 13,
          "line": 3,
        },
        "start": {
          "column": 10,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 289`] = `
{
  "code": "
declare let x: object | null | undefined;
for (;(x || 'foo');) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 12,
          "line": 3,
        },
        "start": {
          "column": 10,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 290`] = `
{
  "code": "
declare let x: object | null | undefined;
for (;(x ||= 'foo');) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 13,
          "line": 3,
        },
        "start": {
          "column": 10,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 291`] = `
{
  "code": "
declare let x: string | null;
while ((x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 13,
          "line": 3,
        },
        "start": {
          "column": 11,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 292`] = `
{
  "code": "
declare let x: string | null;
while ((x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 11,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 293`] = `
{
  "code": "
declare let x: number | null;
while ((x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 13,
          "line": 3,
        },
        "start": {
          "column": 11,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 294`] = `
{
  "code": "
declare let x: number | null;
while ((x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 11,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 295`] = `
{
  "code": "
declare let x: boolean | null;
while ((x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 13,
          "line": 3,
        },
        "start": {
          "column": 11,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 296`] = `
{
  "code": "
declare let x: boolean | null;
while ((x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 11,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 297`] = `
{
  "code": "
declare let x: object | null;
while ((x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 13,
          "line": 3,
        },
        "start": {
          "column": 11,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 298`] = `
{
  "code": "
declare let x: object | null;
while ((x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 11,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 299`] = `
{
  "code": "
declare let x: string | undefined;
while ((x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 13,
          "line": 3,
        },
        "start": {
          "column": 11,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 300`] = `
{
  "code": "
declare let x: string | undefined;
while ((x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 11,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 301`] = `
{
  "code": "
declare let x: number | undefined;
while ((x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 13,
          "line": 3,
        },
        "start": {
          "column": 11,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 302`] = `
{
  "code": "
declare let x: number | undefined;
while ((x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 11,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 303`] = `
{
  "code": "
declare let x: boolean | undefined;
while ((x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 13,
          "line": 3,
        },
        "start": {
          "column": 11,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 304`] = `
{
  "code": "
declare let x: boolean | undefined;
while ((x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 11,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 305`] = `
{
  "code": "
declare let x: object | undefined;
while ((x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 13,
          "line": 3,
        },
        "start": {
          "column": 11,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 306`] = `
{
  "code": "
declare let x: object | undefined;
while ((x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 11,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 307`] = `
{
  "code": "
declare let x: string | null | undefined;
while ((x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 13,
          "line": 3,
        },
        "start": {
          "column": 11,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 308`] = `
{
  "code": "
declare let x: string | null | undefined;
while ((x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 11,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 309`] = `
{
  "code": "
declare let x: number | null | undefined;
while ((x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 13,
          "line": 3,
        },
        "start": {
          "column": 11,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 310`] = `
{
  "code": "
declare let x: number | null | undefined;
while ((x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 11,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 311`] = `
{
  "code": "
declare let x: boolean | null | undefined;
while ((x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 13,
          "line": 3,
        },
        "start": {
          "column": 11,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 312`] = `
{
  "code": "
declare let x: boolean | null | undefined;
while ((x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 11,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 313`] = `
{
  "code": "
declare let x: object | null | undefined;
while ((x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 13,
          "line": 3,
        },
        "start": {
          "column": 11,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 314`] = `
{
  "code": "
declare let x: object | null | undefined;
while ((x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 14,
          "line": 3,
        },
        "start": {
          "column": 11,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 315`] = `
{
  "code": "
declare let a: string | null;
declare let b: string | null;
declare let c: string | null;
a || b && c;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 5,
        },
        "start": {
          "column": 3,
          "line": 5,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 316`] = `
{
  "code": "
declare let a: number | null;
declare let b: number | null;
declare let c: number | null;
a || b && c;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 5,
        },
        "start": {
          "column": 3,
          "line": 5,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 317`] = `
{
  "code": "
declare let a: boolean | null;
declare let b: boolean | null;
declare let c: boolean | null;
a || b && c;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 5,
        },
        "start": {
          "column": 3,
          "line": 5,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 318`] = `
{
  "code": "
declare let a: object | null;
declare let b: object | null;
declare let c: object | null;
a || b && c;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 5,
        },
        "start": {
          "column": 3,
          "line": 5,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 319`] = `
{
  "code": "
declare let a: string | undefined;
declare let b: string | undefined;
declare let c: string | undefined;
a || b && c;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 5,
        },
        "start": {
          "column": 3,
          "line": 5,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 320`] = `
{
  "code": "
declare let a: number | undefined;
declare let b: number | undefined;
declare let c: number | undefined;
a || b && c;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 5,
        },
        "start": {
          "column": 3,
          "line": 5,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 321`] = `
{
  "code": "
declare let a: boolean | undefined;
declare let b: boolean | undefined;
declare let c: boolean | undefined;
a || b && c;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 5,
        },
        "start": {
          "column": 3,
          "line": 5,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 322`] = `
{
  "code": "
declare let a: object | undefined;
declare let b: object | undefined;
declare let c: object | undefined;
a || b && c;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 5,
        },
        "start": {
          "column": 3,
          "line": 5,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 323`] = `
{
  "code": "
declare let a: string | null | undefined;
declare let b: string | null | undefined;
declare let c: string | null | undefined;
a || b && c;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 5,
        },
        "start": {
          "column": 3,
          "line": 5,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 324`] = `
{
  "code": "
declare let a: number | null | undefined;
declare let b: number | null | undefined;
declare let c: number | null | undefined;
a || b && c;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 5,
        },
        "start": {
          "column": 3,
          "line": 5,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 325`] = `
{
  "code": "
declare let a: boolean | null | undefined;
declare let b: boolean | null | undefined;
declare let c: boolean | null | undefined;
a || b && c;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 5,
        },
        "start": {
          "column": 3,
          "line": 5,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 326`] = `
{
  "code": "
declare let a: object | null | undefined;
declare let b: object | null | undefined;
declare let c: object | null | undefined;
a || b && c;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 5,
        },
        "start": {
          "column": 3,
          "line": 5,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 327`] = `
{
  "code": "
declare let a: string | null;
declare let b: string | null;
declare let c: string | null;
declare let d: string | null;
a || b || c && d;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 6,
        },
        "start": {
          "column": 3,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 6,
        },
        "start": {
          "column": 8,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 2,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 328`] = `
{
  "code": "
declare let a: number | null;
declare let b: number | null;
declare let c: number | null;
declare let d: number | null;
a || b || c && d;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 6,
        },
        "start": {
          "column": 3,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 6,
        },
        "start": {
          "column": 8,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 2,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 329`] = `
{
  "code": "
declare let a: boolean | null;
declare let b: boolean | null;
declare let c: boolean | null;
declare let d: boolean | null;
a || b || c && d;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 6,
        },
        "start": {
          "column": 3,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 6,
        },
        "start": {
          "column": 8,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 2,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 330`] = `
{
  "code": "
declare let a: object | null;
declare let b: object | null;
declare let c: object | null;
declare let d: object | null;
a || b || c && d;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 6,
        },
        "start": {
          "column": 3,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 6,
        },
        "start": {
          "column": 8,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 2,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 331`] = `
{
  "code": "
declare let a: string | undefined;
declare let b: string | undefined;
declare let c: string | undefined;
declare let d: string | undefined;
a || b || c && d;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 6,
        },
        "start": {
          "column": 3,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 6,
        },
        "start": {
          "column": 8,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 2,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 332`] = `
{
  "code": "
declare let a: number | undefined;
declare let b: number | undefined;
declare let c: number | undefined;
declare let d: number | undefined;
a || b || c && d;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 6,
        },
        "start": {
          "column": 3,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 6,
        },
        "start": {
          "column": 8,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 2,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 333`] = `
{
  "code": "
declare let a: boolean | undefined;
declare let b: boolean | undefined;
declare let c: boolean | undefined;
declare let d: boolean | undefined;
a || b || c && d;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 6,
        },
        "start": {
          "column": 3,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 6,
        },
        "start": {
          "column": 8,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 2,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 334`] = `
{
  "code": "
declare let a: object | undefined;
declare let b: object | undefined;
declare let c: object | undefined;
declare let d: object | undefined;
a || b || c && d;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 6,
        },
        "start": {
          "column": 3,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 6,
        },
        "start": {
          "column": 8,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 2,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 335`] = `
{
  "code": "
declare let a: string | null | undefined;
declare let b: string | null | undefined;
declare let c: string | null | undefined;
declare let d: string | null | undefined;
a || b || c && d;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 6,
        },
        "start": {
          "column": 3,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 6,
        },
        "start": {
          "column": 8,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 2,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 336`] = `
{
  "code": "
declare let a: number | null | undefined;
declare let b: number | null | undefined;
declare let c: number | null | undefined;
declare let d: number | null | undefined;
a || b || c && d;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 6,
        },
        "start": {
          "column": 3,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 6,
        },
        "start": {
          "column": 8,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 2,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 337`] = `
{
  "code": "
declare let a: boolean | null | undefined;
declare let b: boolean | null | undefined;
declare let c: boolean | null | undefined;
declare let d: boolean | null | undefined;
a || b || c && d;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 6,
        },
        "start": {
          "column": 3,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 6,
        },
        "start": {
          "column": 8,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 2,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 338`] = `
{
  "code": "
declare let a: object | null | undefined;
declare let b: object | null | undefined;
declare let c: object | null | undefined;
declare let d: object | null | undefined;
a || b || c && d;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 6,
        },
        "start": {
          "column": 3,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 6,
        },
        "start": {
          "column": 8,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 2,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 339`] = `
{
  "code": "
declare let a: string | null;
declare let b: string | null;
declare let c: string | null;
declare let d: string | null;
a && b || c || d;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 6,
        },
        "start": {
          "column": 8,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 15,
          "line": 6,
        },
        "start": {
          "column": 13,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 2,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 340`] = `
{
  "code": "
declare let a: number | null;
declare let b: number | null;
declare let c: number | null;
declare let d: number | null;
a && b || c || d;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 6,
        },
        "start": {
          "column": 8,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 15,
          "line": 6,
        },
        "start": {
          "column": 13,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 2,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 341`] = `
{
  "code": "
declare let a: boolean | null;
declare let b: boolean | null;
declare let c: boolean | null;
declare let d: boolean | null;
a && b || c || d;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 6,
        },
        "start": {
          "column": 8,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 15,
          "line": 6,
        },
        "start": {
          "column": 13,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 2,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 342`] = `
{
  "code": "
declare let a: object | null;
declare let b: object | null;
declare let c: object | null;
declare let d: object | null;
a && b || c || d;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 6,
        },
        "start": {
          "column": 8,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 15,
          "line": 6,
        },
        "start": {
          "column": 13,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 2,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 343`] = `
{
  "code": "
declare let a: string | undefined;
declare let b: string | undefined;
declare let c: string | undefined;
declare let d: string | undefined;
a && b || c || d;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 6,
        },
        "start": {
          "column": 8,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 15,
          "line": 6,
        },
        "start": {
          "column": 13,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 2,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 344`] = `
{
  "code": "
declare let a: number | undefined;
declare let b: number | undefined;
declare let c: number | undefined;
declare let d: number | undefined;
a && b || c || d;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 6,
        },
        "start": {
          "column": 8,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 15,
          "line": 6,
        },
        "start": {
          "column": 13,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 2,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 345`] = `
{
  "code": "
declare let a: boolean | undefined;
declare let b: boolean | undefined;
declare let c: boolean | undefined;
declare let d: boolean | undefined;
a && b || c || d;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 6,
        },
        "start": {
          "column": 8,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 15,
          "line": 6,
        },
        "start": {
          "column": 13,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 2,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 346`] = `
{
  "code": "
declare let a: object | undefined;
declare let b: object | undefined;
declare let c: object | undefined;
declare let d: object | undefined;
a && b || c || d;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 6,
        },
        "start": {
          "column": 8,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 15,
          "line": 6,
        },
        "start": {
          "column": 13,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 2,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 347`] = `
{
  "code": "
declare let a: string | null | undefined;
declare let b: string | null | undefined;
declare let c: string | null | undefined;
declare let d: string | null | undefined;
a && b || c || d;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 6,
        },
        "start": {
          "column": 8,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 15,
          "line": 6,
        },
        "start": {
          "column": 13,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 2,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 348`] = `
{
  "code": "
declare let a: number | null | undefined;
declare let b: number | null | undefined;
declare let c: number | null | undefined;
declare let d: number | null | undefined;
a && b || c || d;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 6,
        },
        "start": {
          "column": 8,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 15,
          "line": 6,
        },
        "start": {
          "column": 13,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 2,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 349`] = `
{
  "code": "
declare let a: boolean | null | undefined;
declare let b: boolean | null | undefined;
declare let c: boolean | null | undefined;
declare let d: boolean | null | undefined;
a && b || c || d;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 6,
        },
        "start": {
          "column": 8,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 15,
          "line": 6,
        },
        "start": {
          "column": 13,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 2,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 350`] = `
{
  "code": "
declare let a: object | null | undefined;
declare let b: object | null | undefined;
declare let c: object | null | undefined;
declare let d: object | null | undefined;
a && b || c || d;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 10,
          "line": 6,
        },
        "start": {
          "column": 8,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 15,
          "line": 6,
        },
        "start": {
          "column": 13,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 2,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 351`] = `
{
  "code": "
declare let x: string | null;
if (() => (x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 16,
          "line": 3,
        },
        "start": {
          "column": 14,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 352`] = `
{
  "code": "
declare let x: string | null;
if (() => (x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 17,
          "line": 3,
        },
        "start": {
          "column": 14,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 353`] = `
{
  "code": "
declare let x: number | null;
if (() => (x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 16,
          "line": 3,
        },
        "start": {
          "column": 14,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 354`] = `
{
  "code": "
declare let x: number | null;
if (() => (x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 17,
          "line": 3,
        },
        "start": {
          "column": 14,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 355`] = `
{
  "code": "
declare let x: boolean | null;
if (() => (x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 16,
          "line": 3,
        },
        "start": {
          "column": 14,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 356`] = `
{
  "code": "
declare let x: boolean | null;
if (() => (x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 17,
          "line": 3,
        },
        "start": {
          "column": 14,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 357`] = `
{
  "code": "
declare let x: object | null;
if (() => (x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 16,
          "line": 3,
        },
        "start": {
          "column": 14,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 358`] = `
{
  "code": "
declare let x: object | null;
if (() => (x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 17,
          "line": 3,
        },
        "start": {
          "column": 14,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 359`] = `
{
  "code": "
declare let x: string | undefined;
if (() => (x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 16,
          "line": 3,
        },
        "start": {
          "column": 14,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 360`] = `
{
  "code": "
declare let x: string | undefined;
if (() => (x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 17,
          "line": 3,
        },
        "start": {
          "column": 14,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 361`] = `
{
  "code": "
declare let x: number | undefined;
if (() => (x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 16,
          "line": 3,
        },
        "start": {
          "column": 14,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 362`] = `
{
  "code": "
declare let x: number | undefined;
if (() => (x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 17,
          "line": 3,
        },
        "start": {
          "column": 14,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 363`] = `
{
  "code": "
declare let x: boolean | undefined;
if (() => (x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 16,
          "line": 3,
        },
        "start": {
          "column": 14,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 364`] = `
{
  "code": "
declare let x: boolean | undefined;
if (() => (x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 17,
          "line": 3,
        },
        "start": {
          "column": 14,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 365`] = `
{
  "code": "
declare let x: object | undefined;
if (() => (x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 16,
          "line": 3,
        },
        "start": {
          "column": 14,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 366`] = `
{
  "code": "
declare let x: object | undefined;
if (() => (x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 17,
          "line": 3,
        },
        "start": {
          "column": 14,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 367`] = `
{
  "code": "
declare let x: string | null | undefined;
if (() => (x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 16,
          "line": 3,
        },
        "start": {
          "column": 14,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 368`] = `
{
  "code": "
declare let x: string | null | undefined;
if (() => (x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 17,
          "line": 3,
        },
        "start": {
          "column": 14,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 369`] = `
{
  "code": "
declare let x: number | null | undefined;
if (() => (x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 16,
          "line": 3,
        },
        "start": {
          "column": 14,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 370`] = `
{
  "code": "
declare let x: number | null | undefined;
if (() => (x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 17,
          "line": 3,
        },
        "start": {
          "column": 14,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 371`] = `
{
  "code": "
declare let x: boolean | null | undefined;
if (() => (x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 16,
          "line": 3,
        },
        "start": {
          "column": 14,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 372`] = `
{
  "code": "
declare let x: boolean | null | undefined;
if (() => (x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 17,
          "line": 3,
        },
        "start": {
          "column": 14,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 373`] = `
{
  "code": "
declare let x: object | null | undefined;
if (() => (x || 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 16,
          "line": 3,
        },
        "start": {
          "column": 14,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 374`] = `
{
  "code": "
declare let x: object | null | undefined;
if (() => (x ||= 'foo')) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 17,
          "line": 3,
        },
        "start": {
          "column": 14,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 375`] = `
{
  "code": "
declare let x: string | null;
if (function weird() { return (x || 'foo') }) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 36,
          "line": 3,
        },
        "start": {
          "column": 34,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 376`] = `
{
  "code": "
declare let x: string | null;
if (function weird() { return (x ||= 'foo') }) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 37,
          "line": 3,
        },
        "start": {
          "column": 34,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 377`] = `
{
  "code": "
declare let x: number | null;
if (function weird() { return (x || 'foo') }) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 36,
          "line": 3,
        },
        "start": {
          "column": 34,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 378`] = `
{
  "code": "
declare let x: number | null;
if (function weird() { return (x ||= 'foo') }) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 37,
          "line": 3,
        },
        "start": {
          "column": 34,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 379`] = `
{
  "code": "
declare let x: boolean | null;
if (function weird() { return (x || 'foo') }) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 36,
          "line": 3,
        },
        "start": {
          "column": 34,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 380`] = `
{
  "code": "
declare let x: boolean | null;
if (function weird() { return (x ||= 'foo') }) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 37,
          "line": 3,
        },
        "start": {
          "column": 34,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 381`] = `
{
  "code": "
declare let x: object | null;
if (function weird() { return (x || 'foo') }) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 36,
          "line": 3,
        },
        "start": {
          "column": 34,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 382`] = `
{
  "code": "
declare let x: object | null;
if (function weird() { return (x ||= 'foo') }) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 37,
          "line": 3,
        },
        "start": {
          "column": 34,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 383`] = `
{
  "code": "
declare let x: string | undefined;
if (function weird() { return (x || 'foo') }) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 36,
          "line": 3,
        },
        "start": {
          "column": 34,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 384`] = `
{
  "code": "
declare let x: string | undefined;
if (function weird() { return (x ||= 'foo') }) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 37,
          "line": 3,
        },
        "start": {
          "column": 34,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 385`] = `
{
  "code": "
declare let x: number | undefined;
if (function weird() { return (x || 'foo') }) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 36,
          "line": 3,
        },
        "start": {
          "column": 34,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 386`] = `
{
  "code": "
declare let x: number | undefined;
if (function weird() { return (x ||= 'foo') }) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 37,
          "line": 3,
        },
        "start": {
          "column": 34,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 387`] = `
{
  "code": "
declare let x: boolean | undefined;
if (function weird() { return (x || 'foo') }) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 36,
          "line": 3,
        },
        "start": {
          "column": 34,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 388`] = `
{
  "code": "
declare let x: boolean | undefined;
if (function weird() { return (x ||= 'foo') }) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 37,
          "line": 3,
        },
        "start": {
          "column": 34,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 389`] = `
{
  "code": "
declare let x: object | undefined;
if (function weird() { return (x || 'foo') }) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 36,
          "line": 3,
        },
        "start": {
          "column": 34,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 390`] = `
{
  "code": "
declare let x: object | undefined;
if (function weird() { return (x ||= 'foo') }) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 37,
          "line": 3,
        },
        "start": {
          "column": 34,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 391`] = `
{
  "code": "
declare let x: string | null | undefined;
if (function weird() { return (x || 'foo') }) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 36,
          "line": 3,
        },
        "start": {
          "column": 34,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 392`] = `
{
  "code": "
declare let x: string | null | undefined;
if (function weird() { return (x ||= 'foo') }) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 37,
          "line": 3,
        },
        "start": {
          "column": 34,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 393`] = `
{
  "code": "
declare let x: number | null | undefined;
if (function weird() { return (x || 'foo') }) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 36,
          "line": 3,
        },
        "start": {
          "column": 34,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 394`] = `
{
  "code": "
declare let x: number | null | undefined;
if (function weird() { return (x ||= 'foo') }) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 37,
          "line": 3,
        },
        "start": {
          "column": 34,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 395`] = `
{
  "code": "
declare let x: boolean | null | undefined;
if (function weird() { return (x || 'foo') }) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 36,
          "line": 3,
        },
        "start": {
          "column": 34,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 396`] = `
{
  "code": "
declare let x: boolean | null | undefined;
if (function weird() { return (x ||= 'foo') }) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 37,
          "line": 3,
        },
        "start": {
          "column": 34,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 397`] = `
{
  "code": "
declare let x: object | null | undefined;
if (function weird() { return (x || 'foo') }) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 36,
          "line": 3,
        },
        "start": {
          "column": 34,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 398`] = `
{
  "code": "
declare let x: object | null | undefined;
if (function weird() { return (x ||= 'foo') }) {}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 37,
          "line": 3,
        },
        "start": {
          "column": 34,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 399`] = `
{
  "code": "
declare let a: string | null;
declare let b: string;
declare let c: string;
a || b || c;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 5,
        },
        "start": {
          "column": 3,
          "line": 5,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 400`] = `
{
  "code": "
declare let a: number | null;
declare let b: number;
declare let c: number;
a || b || c;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 5,
        },
        "start": {
          "column": 3,
          "line": 5,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 401`] = `
{
  "code": "
declare let a: boolean | null;
declare let b: boolean;
declare let c: boolean;
a || b || c;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 5,
        },
        "start": {
          "column": 3,
          "line": 5,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 402`] = `
{
  "code": "
declare let a: object | null;
declare let b: object;
declare let c: object;
a || b || c;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 5,
        },
        "start": {
          "column": 3,
          "line": 5,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 403`] = `
{
  "code": "
declare let a: string | undefined;
declare let b: string;
declare let c: string;
a || b || c;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 5,
        },
        "start": {
          "column": 3,
          "line": 5,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 404`] = `
{
  "code": "
declare let a: number | undefined;
declare let b: number;
declare let c: number;
a || b || c;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 5,
        },
        "start": {
          "column": 3,
          "line": 5,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 405`] = `
{
  "code": "
declare let a: boolean | undefined;
declare let b: boolean;
declare let c: boolean;
a || b || c;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 5,
        },
        "start": {
          "column": 3,
          "line": 5,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 406`] = `
{
  "code": "
declare let a: object | undefined;
declare let b: object;
declare let c: object;
a || b || c;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 5,
        },
        "start": {
          "column": 3,
          "line": 5,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 407`] = `
{
  "code": "
declare let a: string | null | undefined;
declare let b: string;
declare let c: string;
a || b || c;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 5,
        },
        "start": {
          "column": 3,
          "line": 5,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 408`] = `
{
  "code": "
declare let a: number | null | undefined;
declare let b: number;
declare let c: number;
a || b || c;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 5,
        },
        "start": {
          "column": 3,
          "line": 5,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 409`] = `
{
  "code": "
declare let a: boolean | null | undefined;
declare let b: boolean;
declare let c: boolean;
a || b || c;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 5,
        },
        "start": {
          "column": 3,
          "line": 5,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 410`] = `
{
  "code": "
declare let a: object | null | undefined;
declare let b: object;
declare let c: object;
a || b || c;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 5,
        },
        "start": {
          "column": 3,
          "line": 5,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 411`] = `
{
  "code": "
declare let x: string | undefined;
x || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 3,
        },
        "start": {
          "column": 3,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 412`] = `
{
  "code": "
declare let x: number | undefined;
x || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 3,
        },
        "start": {
          "column": 3,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 413`] = `
{
  "code": "
declare let x: boolean | undefined;
x || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 3,
        },
        "start": {
          "column": 3,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 414`] = `
{
  "code": "
declare let x: bigint | undefined;
x || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 3,
        },
        "start": {
          "column": 3,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 415`] = `
{
  "code": "
declare let x: string | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 416`] = `
{
  "code": "
declare let x: number | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 417`] = `
{
  "code": "
declare let x: boolean | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 418`] = `
{
  "code": "
declare let x: bigint | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 419`] = `
{
  "code": "
declare let x: '' | undefined;
x || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 3,
        },
        "start": {
          "column": 3,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 420`] = `
{
  "code": "
declare let x: \`\` | undefined;
x || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 3,
        },
        "start": {
          "column": 3,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 421`] = `
{
  "code": "
declare let x: 0 | undefined;
x || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 3,
        },
        "start": {
          "column": 3,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 422`] = `
{
  "code": "
declare let x: 0n | undefined;
x || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 3,
        },
        "start": {
          "column": 3,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 423`] = `
{
  "code": "
declare let x: false | undefined;
x || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 3,
        },
        "start": {
          "column": 3,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 424`] = `
{
  "code": "
declare let x: '' | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 425`] = `
{
  "code": "
declare let x: \`\` | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 426`] = `
{
  "code": "
declare let x: 0 | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 427`] = `
{
  "code": "
declare let x: 0n | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 428`] = `
{
  "code": "
declare let x: false | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 429`] = `
{
  "code": "
declare let x: 'a' | undefined;
x || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 3,
        },
        "start": {
          "column": 3,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 430`] = `
{
  "code": "
declare let x: \`hello\${'string'}\` | undefined;
x || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 3,
        },
        "start": {
          "column": 3,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 431`] = `
{
  "code": "
declare let x: 1 | undefined;
x || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 3,
        },
        "start": {
          "column": 3,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 432`] = `
{
  "code": "
declare let x: 1n | undefined;
x || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 3,
        },
        "start": {
          "column": 3,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 433`] = `
{
  "code": "
declare let x: true | undefined;
x || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 3,
        },
        "start": {
          "column": 3,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 434`] = `
{
  "code": "
declare let x: 'a' | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 435`] = `
{
  "code": "
declare let x: 'a' | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 436`] = `
{
  "code": "
declare let x: \`hello\${'string'}\` | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 437`] = `
{
  "code": "
declare let x: \`hello\${'string'}\` | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 438`] = `
{
  "code": "
declare let x: 1 | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 439`] = `
{
  "code": "
declare let x: 1 | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 440`] = `
{
  "code": "
declare let x: 1n | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 441`] = `
{
  "code": "
declare let x: 1n | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 442`] = `
{
  "code": "
declare let x: true | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 443`] = `
{
  "code": "
declare let x: true | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 444`] = `
{
  "code": "
declare let x: 'a' | 'b' | undefined;
x || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 3,
        },
        "start": {
          "column": 3,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 445`] = `
{
  "code": "
declare let x: 'a' | \`b\` | undefined;
x || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 3,
        },
        "start": {
          "column": 3,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 446`] = `
{
  "code": "
declare let x: 0 | 1 | undefined;
x || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 3,
        },
        "start": {
          "column": 3,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 447`] = `
{
  "code": "
declare let x: 1 | 2 | 3 | undefined;
x || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 3,
        },
        "start": {
          "column": 3,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 448`] = `
{
  "code": "
declare let x: 0n | 1n | undefined;
x || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 3,
        },
        "start": {
          "column": 3,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 449`] = `
{
  "code": "
declare let x: 1n | 2n | 3n | undefined;
x || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 3,
        },
        "start": {
          "column": 3,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 450`] = `
{
  "code": "
declare let x: true | false | undefined;
x || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 3,
        },
        "start": {
          "column": 3,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 451`] = `
{
  "code": "
declare let x: 'a' | 'b' | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 452`] = `
{
  "code": "
declare let x: 'a' | 'b' | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 453`] = `
{
  "code": "
declare let x: 'a' | \`b\` | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 454`] = `
{
  "code": "
declare let x: 'a' | \`b\` | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 455`] = `
{
  "code": "
declare let x: 0 | 1 | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 456`] = `
{
  "code": "
declare let x: 0 | 1 | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 457`] = `
{
  "code": "
declare let x: 1 | 2 | 3 | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 458`] = `
{
  "code": "
declare let x: 1 | 2 | 3 | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 459`] = `
{
  "code": "
declare let x: 0n | 1n | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 460`] = `
{
  "code": "
declare let x: 0n | 1n | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 461`] = `
{
  "code": "
declare let x: 1n | 2n | 3n | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 462`] = `
{
  "code": "
declare let x: 1n | 2n | 3n | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 463`] = `
{
  "code": "
declare let x: true | false | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 464`] = `
{
  "code": "
declare let x: true | false | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 465`] = `
{
  "code": "
declare let x: 0 | 1 | 0n | 1n | undefined;
x || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 3,
        },
        "start": {
          "column": 3,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 466`] = `
{
  "code": "
declare let x: true | false | null | undefined;
x || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 3,
        },
        "start": {
          "column": 3,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 467`] = `
{
  "code": "
declare let x: 0 | 1 | 0n | 1n | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 468`] = `
{
  "code": "
declare let x: 0 | 1 | 0n | 1n | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 469`] = `
{
  "code": "
declare let x: true | false | null | undefined;
x ? x : y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 10,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 470`] = `
{
  "code": "
declare let x: true | false | null | undefined;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 3,
        },
        "start": {
          "column": 1,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 471`] = `
{
  "code": "
declare let x: null;
x || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 3,
        },
        "start": {
          "column": 3,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 472`] = `
{
  "code": "
const x = undefined;
x || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 3,
        },
        "start": {
          "column": 3,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 473`] = `
{
  "code": "
null || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 8,
          "line": 2,
        },
        "start": {
          "column": 6,
          "line": 2,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 474`] = `
{
  "code": "
undefined || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 13,
          "line": 2,
        },
        "start": {
          "column": 11,
          "line": 2,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 475`] = `
{
  "code": "
enum Enum {
  A = 0,
  B = 1,
  C = 2,
}
declare let x: Enum | undefined;
x || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 8,
        },
        "start": {
          "column": 3,
          "line": 8,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 476`] = `
{
  "code": "
enum Enum {
  A = 0,
  B = 1,
  C = 2,
}
declare let x: Enum.A | Enum.B | undefined;
x || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 8,
        },
        "start": {
          "column": 3,
          "line": 8,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 477`] = `
{
  "code": "
enum Enum {
  A = 'a',
  B = 'b',
  C = 'c',
}
declare let x: Enum | undefined;
x || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 8,
        },
        "start": {
          "column": 3,
          "line": 8,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 478`] = `
{
  "code": "
enum Enum {
  A = 'a',
  B = 'b',
  C = 'c',
}
declare let x: Enum.A | Enum.B | undefined;
x || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 8,
        },
        "start": {
          "column": 3,
          "line": 8,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 479`] = `
{
  "code": "
let a: string | true | undefined;
let b: string | boolean | undefined;
let c: boolean | undefined;

const x = Boolean(a || b);
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 23,
          "line": 6,
        },
        "start": {
          "column": 21,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 480`] = `
{
  "code": "
let a: string | true | undefined;
let b: string | boolean | undefined;

const x = String(a || b);
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 22,
          "line": 5,
        },
        "start": {
          "column": 20,
          "line": 5,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 481`] = `
{
  "code": "
let a: string | true | undefined;
let b: string | boolean | undefined;

const x = Boolean(() => a || b);
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 29,
          "line": 5,
        },
        "start": {
          "column": 27,
          "line": 5,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 482`] = `
{
  "code": "
let a: string | true | undefined;
let b: string | boolean | undefined;

const x = Boolean(function weird() {
  return a || b;
});
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 14,
          "line": 6,
        },
        "start": {
          "column": 12,
          "line": 6,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 483`] = `
{
  "code": "
let a: string | true | undefined;
let b: string | boolean | undefined;

declare function f(x: unknown): unknown;

const x = Boolean(f(a || b));
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 25,
          "line": 7,
        },
        "start": {
          "column": 23,
          "line": 7,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 484`] = `
{
  "code": "
let a: string | true | undefined;
let b: string | boolean | undefined;

const x = Boolean(1 + (a || b));
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 28,
          "line": 5,
        },
        "start": {
          "column": 26,
          "line": 5,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 485`] = `
{
  "code": "
let a: string | true | undefined;
let b: string | boolean | undefined;

declare function f(x: unknown): unknown;

if (f(a || b)) {
}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 11,
          "line": 7,
        },
        "start": {
          "column": 9,
          "line": 7,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 486`] = `
{
  "code": "
declare const a: string | undefined;
declare const b: string;

if (+(a || b)) {
}
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 11,
          "line": 5,
        },
        "start": {
          "column": 9,
          "line": 5,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 487`] = `
{
  "code": "
interface Box {
  value: string;
}
declare function getFallbackBox(): Box;
declare const defaultBox: Box | undefined;

defaultBox || getFallbackBox();
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 14,
          "line": 8,
        },
        "start": {
          "column": 12,
          "line": 8,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 488`] = `
{
  "code": "
interface Box {
  value: string;
}
declare function getFallbackBox(): Box;
declare const defaultBox: Box | undefined;

defaultBox ? defaultBox : getFallbackBox();
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 43,
          "line": 8,
        },
        "start": {
          "column": 1,
          "line": 8,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 489`] = `
{
  "code": "
interface Box {
  value: string;
}
declare function getFallbackBox(): Box;
declare const defaultBoxOptional: { a?: { b?: Box | undefined } };

defaultBoxOptional.a?.b != null ? defaultBoxOptional.a?.b : getFallbackBox();
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 77,
          "line": 8,
        },
        "start": {
          "column": 1,
          "line": 8,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 490`] = `
{
  "code": "
declare const x: any;
declare const y: any;
x || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 4,
        },
        "start": {
          "column": 3,
          "line": 4,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 491`] = `
{
  "code": "
declare const x: unknown;
declare const y: any;
x || y;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "range": {
        "end": {
          "column": 5,
          "line": 4,
        },
        "start": {
          "column": 3,
          "line": 4,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 492`] = `
{
  "code": "
interface Box {
  value: string;
}
declare function getFallbackBox(): Box;
declare const defaultBoxOptional: { a?: { b?: Box | undefined } };

defaultBoxOptional.a?.b != null ? defaultBoxOptional.a.b : getFallbackBox();
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 76,
          "line": 8,
        },
        "start": {
          "column": 1,
          "line": 8,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 493`] = `
{
  "code": "
interface Box {
  value: string;
}
declare function getFallbackBox(): Box;
declare const defaultBoxOptional: { a?: { b?: Box | undefined } };

defaultBoxOptional.a?.b ? defaultBoxOptional.a?.b : getFallbackBox();
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 69,
          "line": 8,
        },
        "start": {
          "column": 1,
          "line": 8,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 494`] = `
{
  "code": "
interface Box {
  value: string;
}
declare function getFallbackBox(): Box;
declare const defaultBoxOptional: { a?: { b?: Box | undefined } };

defaultBoxOptional.a?.b ? defaultBoxOptional.a.b : getFallbackBox();
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 68,
          "line": 8,
        },
        "start": {
          "column": 1,
          "line": 8,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 495`] = `
{
  "code": "
interface Box {
  value: string;
}
declare function getFallbackBox(): Box;
declare const defaultBoxOptional: { a?: { b?: Box | undefined } };

defaultBoxOptional.a?.b !== undefined
  ? defaultBoxOptional.a?.b
  : getFallbackBox();
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 21,
          "line": 10,
        },
        "start": {
          "column": 1,
          "line": 8,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 496`] = `
{
  "code": "
interface Box {
  value: string;
}
declare function getFallbackBox(): Box;
declare const defaultBoxOptional: { a?: { b?: Box | undefined } };

defaultBoxOptional.a?.b !== undefined
  ? defaultBoxOptional.a.b
  : getFallbackBox();
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 21,
          "line": 10,
        },
        "start": {
          "column": 1,
          "line": 8,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 497`] = `
{
  "code": "
interface Box {
  value: string;
}
declare function getFallbackBox(): Box;
declare const defaultBoxOptional: { a?: { b?: Box | undefined } };

defaultBoxOptional.a?.b !== undefined && defaultBoxOptional.a?.b !== null
  ? defaultBoxOptional.a?.b
  : getFallbackBox();
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 21,
          "line": 10,
        },
        "start": {
          "column": 1,
          "line": 8,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 498`] = `
{
  "code": "
interface Box {
  value: string;
}
declare function getFallbackBox(): Box;
declare const defaultBoxOptional: { a?: { b?: Box | undefined } };

defaultBoxOptional.a?.b !== undefined && defaultBoxOptional.a?.b !== null
  ? defaultBoxOptional.a.b
  : getFallbackBox();
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 21,
          "line": 10,
        },
        "start": {
          "column": 1,
          "line": 8,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;

exports[`prefer-nullish-coalescing > invalid 499`] = `
{
  "code": "
declare let x: unknown;
declare let y: number;
!x ? y : x;
      ",
  "diagnostics": [
    {
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression testing for null/undefined.",
      "messageId": "preferNullishOverTernary",
      "range": {
        "end": {
          "column": 11,
          "line": 4,
        },
        "start": {
          "column": 1,
          "line": 4,
        },
      },
      "ruleName": "@typescript-eslint/prefer-nullish-coalescing",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "ruleCount": 1,
}
`;
