// Rstest Snapshot v1

exports[`array-type > invalid 1`] = `
{
  "code": "let a: Array<number> = [];",
  "diagnostics": [
    {
      "message": "Array type using 'Array<number>' is forbidden. Use 'number[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 21,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: number[] = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 2`] = `
{
  "code": "let a: Array<string | number> = [];",
  "diagnostics": [
    {
      "message": "Array type using 'Array<T>' is forbidden. Use 'T[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 30,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: (string | number)[] = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 3`] = `
{
  "code": "let a: ReadonlyArray<number> = [];",
  "diagnostics": [
    {
      "message": "Array type using 'ReadonlyArray<number>' is forbidden. Use 'readonly number[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 29,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: readonly number[] = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 4`] = `
{
  "code": "let a: ReadonlyArray<string | number> = [];",
  "diagnostics": [
    {
      "message": "Array type using 'ReadonlyArray<T>' is forbidden. Use 'readonly T[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 38,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: readonly (string | number)[] = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 5`] = `
{
  "code": "let a: Array<number> = [];",
  "diagnostics": [
    {
      "message": "Array type using 'Array<number>' is forbidden. Use 'number[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 21,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: number[] = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 6`] = `
{
  "code": "let a: Array<string | number> = [];",
  "diagnostics": [
    {
      "message": "Array type using 'Array<T>' is forbidden. Use 'T[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 30,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: (string | number)[] = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 7`] = `
{
  "code": "let a: ReadonlyArray<number> = [];",
  "diagnostics": [
    {
      "message": "Array type using 'ReadonlyArray<number>' is forbidden. Use 'readonly number[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 29,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: readonly number[] = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 8`] = `
{
  "code": "let a: ReadonlyArray<string | number> = [];",
  "diagnostics": [
    {
      "message": "Array type using 'ReadonlyArray<T>' is forbidden. Use 'readonly T[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 38,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: readonly (string | number)[] = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 9`] = `
{
  "code": "let a: Array<number> = [];",
  "diagnostics": [
    {
      "message": "Array type using 'Array<number>' is forbidden. Use 'number[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 21,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: number[] = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 10`] = `
{
  "code": "let a: Array<string | number> = [];",
  "diagnostics": [
    {
      "message": "Array type using 'Array<T>' is forbidden. Use 'T[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 30,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: (string | number)[] = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 11`] = `
{
  "code": "let a: ReadonlyArray<number> = [];",
  "diagnostics": [
    {
      "message": "Array type using 'ReadonlyArray<number>' is forbidden for simple types. Use 'readonly number[]' instead.",
      "messageId": "errorStringArraySimple",
      "range": {
        "end": {
          "column": 29,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: readonly number[] = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 12`] = `
{
  "code": "let a: readonly (string | number)[] = [];",
  "diagnostics": [
    {
      "message": "Array type using 'readonly T[]' is forbidden for non-simple types. Use 'ReadonlyArray<T>' instead.",
      "messageId": "errorStringGenericSimple",
      "range": {
        "end": {
          "column": 36,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: ReadonlyArray<string | number> = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 13`] = `
{
  "code": "let a: Array<number> = [];",
  "diagnostics": [
    {
      "message": "Array type using 'Array<number>' is forbidden. Use 'number[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 21,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: number[] = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 14`] = `
{
  "code": "let a: Array<string | number> = [];",
  "diagnostics": [
    {
      "message": "Array type using 'Array<T>' is forbidden. Use 'T[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 30,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: (string | number)[] = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 15`] = `
{
  "code": "let a: readonly number[] = [];",
  "diagnostics": [
    {
      "message": "Array type using 'readonly number[]' is forbidden. Use 'ReadonlyArray<number>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 25,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: ReadonlyArray<number> = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 16`] = `
{
  "code": "let a: readonly (string | number)[] = [];",
  "diagnostics": [
    {
      "message": "Array type using 'readonly T[]' is forbidden. Use 'ReadonlyArray<T>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 36,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: ReadonlyArray<string | number> = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 17`] = `
{
  "code": "let a: Array<number> = [];",
  "diagnostics": [
    {
      "message": "Array type using 'Array<number>' is forbidden for simple types. Use 'number[]' instead.",
      "messageId": "errorStringArraySimple",
      "range": {
        "end": {
          "column": 21,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: number[] = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 18`] = `
{
  "code": "let a: (string | number)[] = [];",
  "diagnostics": [
    {
      "message": "Array type using 'T[]' is forbidden for non-simple types. Use 'Array<T>' instead.",
      "messageId": "errorStringGenericSimple",
      "range": {
        "end": {
          "column": 27,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: Array<string | number> = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 19`] = `
{
  "code": "let a: ReadonlyArray<number> = [];",
  "diagnostics": [
    {
      "message": "Array type using 'ReadonlyArray<number>' is forbidden for simple types. Use 'readonly number[]' instead.",
      "messageId": "errorStringArraySimple",
      "range": {
        "end": {
          "column": 29,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: readonly number[] = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 20`] = `
{
  "code": "let a: readonly (string | number)[] = [];",
  "diagnostics": [
    {
      "message": "Array type using 'readonly T[]' is forbidden for non-simple types. Use 'ReadonlyArray<T>' instead.",
      "messageId": "errorStringGenericSimple",
      "range": {
        "end": {
          "column": 36,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: ReadonlyArray<string | number> = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 21`] = `
{
  "code": "let a: Array<number> = [];",
  "diagnostics": [
    {
      "message": "Array type using 'Array<number>' is forbidden for simple types. Use 'number[]' instead.",
      "messageId": "errorStringArraySimple",
      "range": {
        "end": {
          "column": 21,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: number[] = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 22`] = `
{
  "code": "let a: (string | number)[] = [];",
  "diagnostics": [
    {
      "message": "Array type using 'T[]' is forbidden for non-simple types. Use 'Array<T>' instead.",
      "messageId": "errorStringGenericSimple",
      "range": {
        "end": {
          "column": 27,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: Array<string | number> = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 23`] = `
{
  "code": "let a: ReadonlyArray<number> = [];",
  "diagnostics": [
    {
      "message": "Array type using 'ReadonlyArray<number>' is forbidden. Use 'readonly number[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 29,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: readonly number[] = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 24`] = `
{
  "code": "let a: ReadonlyArray<string | number> = [];",
  "diagnostics": [
    {
      "message": "Array type using 'ReadonlyArray<T>' is forbidden. Use 'readonly T[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 38,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: readonly (string | number)[] = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 25`] = `
{
  "code": "let a: Array<number> = [];",
  "diagnostics": [
    {
      "message": "Array type using 'Array<number>' is forbidden for simple types. Use 'number[]' instead.",
      "messageId": "errorStringArraySimple",
      "range": {
        "end": {
          "column": 21,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: number[] = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 26`] = `
{
  "code": "let a: (string | number)[] = [];",
  "diagnostics": [
    {
      "message": "Array type using 'T[]' is forbidden for non-simple types. Use 'Array<T>' instead.",
      "messageId": "errorStringGenericSimple",
      "range": {
        "end": {
          "column": 27,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: Array<string | number> = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 27`] = `
{
  "code": "let a: ReadonlyArray<number> = [];",
  "diagnostics": [
    {
      "message": "Array type using 'ReadonlyArray<number>' is forbidden for simple types. Use 'readonly number[]' instead.",
      "messageId": "errorStringArraySimple",
      "range": {
        "end": {
          "column": 29,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: readonly number[] = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 28`] = `
{
  "code": "let a: readonly (string | number)[] = [];",
  "diagnostics": [
    {
      "message": "Array type using 'readonly T[]' is forbidden for non-simple types. Use 'ReadonlyArray<T>' instead.",
      "messageId": "errorStringGenericSimple",
      "range": {
        "end": {
          "column": 36,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: ReadonlyArray<string | number> = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 29`] = `
{
  "code": "let a: Array<number> = [];",
  "diagnostics": [
    {
      "message": "Array type using 'Array<number>' is forbidden for simple types. Use 'number[]' instead.",
      "messageId": "errorStringArraySimple",
      "range": {
        "end": {
          "column": 21,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: number[] = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 30`] = `
{
  "code": "let a: (string | number)[] = [];",
  "diagnostics": [
    {
      "message": "Array type using 'T[]' is forbidden for non-simple types. Use 'Array<T>' instead.",
      "messageId": "errorStringGenericSimple",
      "range": {
        "end": {
          "column": 27,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: Array<string | number> = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 31`] = `
{
  "code": "let a: readonly number[] = [];",
  "diagnostics": [
    {
      "message": "Array type using 'readonly number[]' is forbidden. Use 'ReadonlyArray<number>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 25,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: ReadonlyArray<number> = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 32`] = `
{
  "code": "let a: readonly (string | number)[] = [];",
  "diagnostics": [
    {
      "message": "Array type using 'readonly T[]' is forbidden. Use 'ReadonlyArray<T>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 36,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: ReadonlyArray<string | number> = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 33`] = `
{
  "code": "let a: number[] = [];",
  "diagnostics": [
    {
      "message": "Array type using 'number[]' is forbidden. Use 'Array<number>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 16,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: Array<number> = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 34`] = `
{
  "code": "let a: (string | number)[] = [];",
  "diagnostics": [
    {
      "message": "Array type using 'T[]' is forbidden. Use 'Array<T>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 27,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: Array<string | number> = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 35`] = `
{
  "code": "let a: readonly number[] = [];",
  "diagnostics": [
    {
      "message": "Array type using 'readonly number[]' is forbidden. Use 'ReadonlyArray<number>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 25,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: ReadonlyArray<number> = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 36`] = `
{
  "code": "let a: readonly (string | number)[] = [];",
  "diagnostics": [
    {
      "message": "Array type using 'readonly T[]' is forbidden. Use 'ReadonlyArray<T>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 36,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: ReadonlyArray<string | number> = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 37`] = `
{
  "code": "let a: number[] = [];",
  "diagnostics": [
    {
      "message": "Array type using 'number[]' is forbidden. Use 'Array<number>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 16,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: Array<number> = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 38`] = `
{
  "code": "let a: (string | number)[] = [];",
  "diagnostics": [
    {
      "message": "Array type using 'T[]' is forbidden. Use 'Array<T>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 27,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: Array<string | number> = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 39`] = `
{
  "code": "let a: ReadonlyArray<number> = [];",
  "diagnostics": [
    {
      "message": "Array type using 'ReadonlyArray<number>' is forbidden. Use 'readonly number[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 29,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: readonly number[] = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 40`] = `
{
  "code": "let a: ReadonlyArray<string | number> = [];",
  "diagnostics": [
    {
      "message": "Array type using 'ReadonlyArray<T>' is forbidden. Use 'readonly T[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 38,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: readonly (string | number)[] = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 41`] = `
{
  "code": "let a: number[] = [];",
  "diagnostics": [
    {
      "message": "Array type using 'number[]' is forbidden. Use 'Array<number>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 16,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: Array<number> = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 42`] = `
{
  "code": "let a: (string | number)[] = [];",
  "diagnostics": [
    {
      "message": "Array type using 'T[]' is forbidden. Use 'Array<T>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 27,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: Array<string | number> = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 43`] = `
{
  "code": "let a: ReadonlyArray<number> = [];",
  "diagnostics": [
    {
      "message": "Array type using 'ReadonlyArray<number>' is forbidden for simple types. Use 'readonly number[]' instead.",
      "messageId": "errorStringArraySimple",
      "range": {
        "end": {
          "column": 29,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: readonly number[] = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 44`] = `
{
  "code": "let a: readonly (string | number)[] = [];",
  "diagnostics": [
    {
      "message": "Array type using 'readonly T[]' is forbidden for non-simple types. Use 'ReadonlyArray<T>' instead.",
      "messageId": "errorStringGenericSimple",
      "range": {
        "end": {
          "column": 36,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: ReadonlyArray<string | number> = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 45`] = `
{
  "code": "let a: number[] = [];",
  "diagnostics": [
    {
      "message": "Array type using 'number[]' is forbidden. Use 'Array<number>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 16,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: Array<number> = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 46`] = `
{
  "code": "let a: (string | number)[] = [];",
  "diagnostics": [
    {
      "message": "Array type using 'T[]' is forbidden. Use 'Array<T>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 27,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: Array<string | number> = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 47`] = `
{
  "code": "let a: readonly number[] = [];",
  "diagnostics": [
    {
      "message": "Array type using 'readonly number[]' is forbidden. Use 'ReadonlyArray<number>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 25,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: ReadonlyArray<number> = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 48`] = `
{
  "code": "let a: readonly (string | number)[] = [];",
  "diagnostics": [
    {
      "message": "Array type using 'readonly T[]' is forbidden. Use 'ReadonlyArray<T>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 36,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: ReadonlyArray<string | number> = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 49`] = `
{
  "code": "let a: bigint[] = [];",
  "diagnostics": [
    {
      "message": "Array type using 'bigint[]' is forbidden. Use 'Array<bigint>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 16,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: Array<bigint> = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 50`] = `
{
  "code": "let a: (string | bigint)[] = [];",
  "diagnostics": [
    {
      "message": "Array type using 'T[]' is forbidden. Use 'Array<T>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 27,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: Array<string | bigint> = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 51`] = `
{
  "code": "let a: ReadonlyArray<bigint> = [];",
  "diagnostics": [
    {
      "message": "Array type using 'ReadonlyArray<bigint>' is forbidden for simple types. Use 'readonly bigint[]' instead.",
      "messageId": "errorStringArraySimple",
      "range": {
        "end": {
          "column": 29,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: readonly bigint[] = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 52`] = `
{
  "code": "let a: (string | bigint)[] = [];",
  "diagnostics": [
    {
      "message": "Array type using 'T[]' is forbidden. Use 'Array<T>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 27,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: Array<string | bigint> = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 53`] = `
{
  "code": "let a: readonly bigint[] = [];",
  "diagnostics": [
    {
      "message": "Array type using 'readonly bigint[]' is forbidden. Use 'ReadonlyArray<bigint>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 25,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: ReadonlyArray<bigint> = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 54`] = `
{
  "code": "let a: readonly (string | bigint)[] = [];",
  "diagnostics": [
    {
      "message": "Array type using 'readonly T[]' is forbidden. Use 'ReadonlyArray<T>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 36,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: ReadonlyArray<string | bigint> = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 55`] = `
{
  "code": "let a: { foo: Array<Bar> }[] = [];",
  "diagnostics": [
    {
      "message": "Array type using 'Array<Bar>' is forbidden. Use 'Bar[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 25,
          "line": 1,
        },
        "start": {
          "column": 15,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: { foo: Bar[] }[] = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 56`] = `
{
  "code": "let a: Array<{ foo: Bar[] }> = [];",
  "diagnostics": [
    {
      "message": "Array type using 'Bar[]' is forbidden. Use 'Array<Bar>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 26,
          "line": 1,
        },
        "start": {
          "column": 21,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: Array<{ foo: Array<Bar> }> = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 57`] = `
{
  "code": "let a: Array<{ foo: Foo | Bar[] }> = [];",
  "diagnostics": [
    {
      "message": "Array type using 'Bar[]' is forbidden. Use 'Array<Bar>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 32,
          "line": 1,
        },
        "start": {
          "column": 27,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let a: Array<{ foo: Foo | Array<Bar> }> = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 58`] = `
{
  "code": "function foo(a: Array<Bar>): Array<Bar> {}",
  "diagnostics": [
    {
      "message": "Array type using 'Array<Bar>' is forbidden. Use 'Bar[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 27,
          "line": 1,
        },
        "start": {
          "column": 17,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
    {
      "message": "Array type using 'Array<Bar>' is forbidden. Use 'Bar[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 40,
          "line": 1,
        },
        "start": {
          "column": 30,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 2,
  "fileCount": 1,
  "output": "function foo(a: Bar[]): Bar[] {}",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 59`] = `
{
  "code": "let x: Array<undefined> = [undefined] as undefined[];",
  "diagnostics": [
    {
      "message": "Array type using 'Array<undefined>' is forbidden for simple types. Use 'undefined[]' instead.",
      "messageId": "errorStringArraySimple",
      "range": {
        "end": {
          "column": 24,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let x: undefined[] = [undefined] as undefined[];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 60`] = `
{
  "code": "let y: string[] = <Array<string>>['2'];",
  "diagnostics": [
    {
      "message": "Array type using 'Array<string>' is forbidden for simple types. Use 'string[]' instead.",
      "messageId": "errorStringArraySimple",
      "range": {
        "end": {
          "column": 33,
          "line": 1,
        },
        "start": {
          "column": 20,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let y: string[] = <string[]>['2'];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 61`] = `
{
  "code": "let z: Array = [3, '4'];",
  "diagnostics": [
    {
      "message": "Array type using 'Array<any>' is forbidden for simple types. Use 'any[]' instead.",
      "messageId": "errorStringArraySimple",
      "range": {
        "end": {
          "column": 13,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let z: any[] = [3, '4'];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 62`] = `
{
  "code": "let ya = [[1, '2']] as [number, string][];",
  "diagnostics": [
    {
      "message": "Array type using 'T[]' is forbidden for non-simple types. Use 'Array<T>' instead.",
      "messageId": "errorStringGenericSimple",
      "range": {
        "end": {
          "column": 42,
          "line": 1,
        },
        "start": {
          "column": 24,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let ya = [[1, '2']] as Array<[number, string]>;",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 63`] = `
{
  "code": "type Arr<T> = Array<T>;",
  "diagnostics": [
    {
      "message": "Array type using 'Array<T>' is forbidden for simple types. Use 'T[]' instead.",
      "messageId": "errorStringArraySimple",
      "range": {
        "end": {
          "column": 23,
          "line": 1,
        },
        "start": {
          "column": 15,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "type Arr<T> = T[];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 64`] = `
{
  "code": "
// Ignore user defined aliases
let yyyy: Arr<Array<Arr<string>>[]> = [[[['2']]]];
      ",
  "diagnostics": [
    {
      "message": "Array type using 'T[]' is forbidden for non-simple types. Use 'Array<T>' instead.",
      "messageId": "errorStringGenericSimple",
      "range": {
        "end": {
          "column": 35,
          "line": 3,
        },
        "start": {
          "column": 15,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "
// Ignore user defined aliases
let yyyy: Arr<Array<Array<Arr<string>>>> = [[[['2']]]];
      ",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 65`] = `
{
  "code": "
interface ArrayClass<T> {
  foo: Array<T>;
  bar: T[];
  baz: Arr<T>;
  xyz: this[];
}
      ",
  "diagnostics": [
    {
      "message": "Array type using 'Array<T>' is forbidden for simple types. Use 'T[]' instead.",
      "messageId": "errorStringArraySimple",
      "range": {
        "end": {
          "column": 16,
          "line": 3,
        },
        "start": {
          "column": 8,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "
interface ArrayClass<T> {
  foo: T[];
  bar: T[];
  baz: Arr<T>;
  xyz: this[];
}
      ",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 66`] = `
{
  "code": "
function barFunction(bar: ArrayClass<String>[]) {
  return bar.map(e => e.bar);
}
      ",
  "diagnostics": [
    {
      "message": "Array type using 'T[]' is forbidden for non-simple types. Use 'Array<T>' instead.",
      "messageId": "errorStringGenericSimple",
      "range": {
        "end": {
          "column": 47,
          "line": 2,
        },
        "start": {
          "column": 27,
          "line": 2,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "
function barFunction(bar: Array<ArrayClass<String>>) {
  return bar.map(e => e.bar);
}
      ",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 67`] = `
{
  "code": "let barVar: ((c: number) => number)[];",
  "diagnostics": [
    {
      "message": "Array type using 'T[]' is forbidden for non-simple types. Use 'Array<T>' instead.",
      "messageId": "errorStringGenericSimple",
      "range": {
        "end": {
          "column": 38,
          "line": 1,
        },
        "start": {
          "column": 13,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let barVar: Array<(c: number) => number>;",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 68`] = `
{
  "code": "type barUnion = (string | number | boolean)[];",
  "diagnostics": [
    {
      "message": "Array type using 'T[]' is forbidden for non-simple types. Use 'Array<T>' instead.",
      "messageId": "errorStringGenericSimple",
      "range": {
        "end": {
          "column": 46,
          "line": 1,
        },
        "start": {
          "column": 17,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "type barUnion = Array<string | number | boolean>;",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 69`] = `
{
  "code": "type barIntersection = (string & number)[];",
  "diagnostics": [
    {
      "message": "Array type using 'T[]' is forbidden for non-simple types. Use 'Array<T>' instead.",
      "messageId": "errorStringGenericSimple",
      "range": {
        "end": {
          "column": 43,
          "line": 1,
        },
        "start": {
          "column": 24,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "type barIntersection = Array<string & number>;",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 70`] = `
{
  "code": "let v: Array<fooName.BarType> = [{ bar: 'bar' }];",
  "diagnostics": [
    {
      "message": "Array type using 'Array<fooName.BarType>' is forbidden for simple types. Use 'fooName.BarType[]' instead.",
      "messageId": "errorStringArraySimple",
      "range": {
        "end": {
          "column": 30,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let v: fooName.BarType[] = [{ bar: 'bar' }];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 71`] = `
{
  "code": "let w: fooName.BazType<string>[] = [['baz']];",
  "diagnostics": [
    {
      "message": "Array type using 'T[]' is forbidden for non-simple types. Use 'Array<T>' instead.",
      "messageId": "errorStringGenericSimple",
      "range": {
        "end": {
          "column": 33,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let w: Array<fooName.BazType<string>> = [['baz']];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 72`] = `
{
  "code": "let x: Array<undefined> = [undefined] as undefined[];",
  "diagnostics": [
    {
      "message": "Array type using 'Array<undefined>' is forbidden. Use 'undefined[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 24,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let x: undefined[] = [undefined] as undefined[];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 73`] = `
{
  "code": "let y: string[] = <Array<string>>['2'];",
  "diagnostics": [
    {
      "message": "Array type using 'Array<string>' is forbidden. Use 'string[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 33,
          "line": 1,
        },
        "start": {
          "column": 20,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let y: string[] = <string[]>['2'];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 74`] = `
{
  "code": "let z: Array = [3, '4'];",
  "diagnostics": [
    {
      "message": "Array type using 'Array<any>' is forbidden. Use 'any[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 13,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let z: any[] = [3, '4'];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 75`] = `
{
  "code": "type Arr<T> = Array<T>;",
  "diagnostics": [
    {
      "message": "Array type using 'Array<T>' is forbidden. Use 'T[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 23,
          "line": 1,
        },
        "start": {
          "column": 15,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "type Arr<T> = T[];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 76`] = `
{
  "code": "
// Ignore user defined aliases
let yyyy: Arr<Array<Arr<string>>[]> = [[[['2']]]];
      ",
  "diagnostics": [
    {
      "message": "Array type using 'Array<T>' is forbidden. Use 'T[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 33,
          "line": 3,
        },
        "start": {
          "column": 15,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "
// Ignore user defined aliases
let yyyy: Arr<Arr<string>[][]> = [[[['2']]]];
      ",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 77`] = `
{
  "code": "
interface ArrayClass<T> {
  foo: Array<T>;
  bar: T[];
  baz: Arr<T>;
}
      ",
  "diagnostics": [
    {
      "message": "Array type using 'Array<T>' is forbidden. Use 'T[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 16,
          "line": 3,
        },
        "start": {
          "column": 8,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "
interface ArrayClass<T> {
  foo: T[];
  bar: T[];
  baz: Arr<T>;
}
      ",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 78`] = `
{
  "code": "
function fooFunction(foo: Array<ArrayClass<string>>) {
  return foo.map(e => e.foo);
}
      ",
  "diagnostics": [
    {
      "message": "Array type using 'Array<T>' is forbidden. Use 'T[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 52,
          "line": 2,
        },
        "start": {
          "column": 27,
          "line": 2,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "
function fooFunction(foo: ArrayClass<string>[]) {
  return foo.map(e => e.foo);
}
      ",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 79`] = `
{
  "code": "let fooVar: Array<(c: number) => number>;",
  "diagnostics": [
    {
      "message": "Array type using 'Array<T>' is forbidden. Use 'T[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 41,
          "line": 1,
        },
        "start": {
          "column": 13,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let fooVar: ((c: number) => number)[];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 80`] = `
{
  "code": "type fooUnion = Array<string | number | boolean>;",
  "diagnostics": [
    {
      "message": "Array type using 'Array<T>' is forbidden. Use 'T[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 49,
          "line": 1,
        },
        "start": {
          "column": 17,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "type fooUnion = (string | number | boolean)[];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 81`] = `
{
  "code": "type fooIntersection = Array<string & number>;",
  "diagnostics": [
    {
      "message": "Array type using 'Array<T>' is forbidden. Use 'T[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 46,
          "line": 1,
        },
        "start": {
          "column": 24,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "type fooIntersection = (string & number)[];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 82`] = `
{
  "code": "let x: Array;",
  "diagnostics": [
    {
      "message": "Array type using 'Array<any>' is forbidden. Use 'any[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 13,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let x: any[];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 83`] = `
{
  "code": "let x: Array<>;",
  "diagnostics": [
    {
      "message": "Array type using 'Array<any>' is forbidden. Use 'any[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 15,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let x: any[];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 84`] = `
{
  "code": "let x: Array;",
  "diagnostics": [
    {
      "message": "Array type using 'Array<any>' is forbidden for simple types. Use 'any[]' instead.",
      "messageId": "errorStringArraySimple",
      "range": {
        "end": {
          "column": 13,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let x: any[];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 85`] = `
{
  "code": "let x: Array<>;",
  "diagnostics": [
    {
      "message": "Array type using 'Array<any>' is forbidden for simple types. Use 'any[]' instead.",
      "messageId": "errorStringArraySimple",
      "range": {
        "end": {
          "column": 15,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let x: any[];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 86`] = `
{
  "code": "let x: Array<number> = [1] as number[];",
  "diagnostics": [
    {
      "message": "Array type using 'number[]' is forbidden. Use 'Array<number>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 39,
          "line": 1,
        },
        "start": {
          "column": 31,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let x: Array<number> = [1] as Array<number>;",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 87`] = `
{
  "code": "let y: string[] = <Array<string>>['2'];",
  "diagnostics": [
    {
      "message": "Array type using 'string[]' is forbidden. Use 'Array<string>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 16,
          "line": 1,
        },
        "start": {
          "column": 8,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let y: Array<string> = <Array<string>>['2'];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 88`] = `
{
  "code": "let ya = [[1, '2']] as [number, string][];",
  "diagnostics": [
    {
      "message": "Array type using 'T[]' is forbidden. Use 'Array<T>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 42,
          "line": 1,
        },
        "start": {
          "column": 24,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let ya = [[1, '2']] as Array<[number, string]>;",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 89`] = `
{
  "code": "
// Ignore user defined aliases
let yyyy: Arr<Array<Arr<string>>[]> = [[[['2']]]];
      ",
  "diagnostics": [
    {
      "message": "Array type using 'T[]' is forbidden. Use 'Array<T>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 35,
          "line": 3,
        },
        "start": {
          "column": 15,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "
// Ignore user defined aliases
let yyyy: Arr<Array<Array<Arr<string>>>> = [[[['2']]]];
      ",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 90`] = `
{
  "code": "
interface ArrayClass<T> {
  foo: Array<T>;
  bar: T[];
  baz: Arr<T>;
}
      ",
  "diagnostics": [
    {
      "message": "Array type using 'T[]' is forbidden. Use 'Array<T>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 11,
          "line": 4,
        },
        "start": {
          "column": 8,
          "line": 4,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "
interface ArrayClass<T> {
  foo: Array<T>;
  bar: Array<T>;
  baz: Arr<T>;
}
      ",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 91`] = `
{
  "code": "
function barFunction(bar: ArrayClass<String>[]) {
  return bar.map(e => e.bar);
}
      ",
  "diagnostics": [
    {
      "message": "Array type using 'T[]' is forbidden. Use 'Array<T>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 47,
          "line": 2,
        },
        "start": {
          "column": 27,
          "line": 2,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "
function barFunction(bar: Array<ArrayClass<String>>) {
  return bar.map(e => e.bar);
}
      ",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 92`] = `
{
  "code": "let barVar: ((c: number) => number)[];",
  "diagnostics": [
    {
      "message": "Array type using 'T[]' is forbidden. Use 'Array<T>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 38,
          "line": 1,
        },
        "start": {
          "column": 13,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "let barVar: Array<(c: number) => number>;",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 93`] = `
{
  "code": "type barUnion = (string | number | boolean)[];",
  "diagnostics": [
    {
      "message": "Array type using 'T[]' is forbidden. Use 'Array<T>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 46,
          "line": 1,
        },
        "start": {
          "column": 17,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "type barUnion = Array<string | number | boolean>;",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 94`] = `
{
  "code": "type barIntersection = (string & number)[];",
  "diagnostics": [
    {
      "message": "Array type using 'T[]' is forbidden. Use 'Array<T>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 43,
          "line": 1,
        },
        "start": {
          "column": 24,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "type barIntersection = Array<string & number>;",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 95`] = `
{
  "code": "
interface FooInterface {
  '.bar': { baz: string[] };
}
      ",
  "diagnostics": [
    {
      "message": "Array type using 'string[]' is forbidden. Use 'Array<string>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 26,
          "line": 3,
        },
        "start": {
          "column": 18,
          "line": 3,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "
interface FooInterface {
  '.bar': { baz: Array<string> };
}
      ",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 96`] = `
{
  "code": "type Unwrap<T> = T extends Array<infer E> ? E : T;",
  "diagnostics": [
    {
      "message": "Array type using 'Array<T>' is forbidden. Use 'T[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 42,
          "line": 1,
        },
        "start": {
          "column": 28,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "type Unwrap<T> = T extends (infer E)[] ? E : T;",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 97`] = `
{
  "code": "type Unwrap<T> = T extends (infer E)[] ? E : T;",
  "diagnostics": [
    {
      "message": "Array type using 'T[]' is forbidden. Use 'Array<T>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 39,
          "line": 1,
        },
        "start": {
          "column": 28,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "type Unwrap<T> = T extends Array<infer E> ? E : T;",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 98`] = `
{
  "code": "type Foo = ReadonlyArray<object>[];",
  "diagnostics": [
    {
      "message": "Array type using 'ReadonlyArray<object>' is forbidden. Use 'readonly object[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 33,
          "line": 1,
        },
        "start": {
          "column": 12,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "type Foo = (readonly object[])[];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 99`] = `
{
  "code": "const foo: Array<new (...args: any[]) => void> = [];",
  "diagnostics": [
    {
      "message": "Array type using 'Array<T>' is forbidden. Use 'T[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 47,
          "line": 1,
        },
        "start": {
          "column": 12,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "const foo: (new (...args: any[]) => void)[] = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 100`] = `
{
  "code": "const foo: ReadonlyArray<new (...args: any[]) => void> = [];",
  "diagnostics": [
    {
      "message": "Array type using 'ReadonlyArray<T>' is forbidden. Use 'readonly T[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 55,
          "line": 1,
        },
        "start": {
          "column": 12,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "const foo: readonly (new (...args: any[]) => void)[] = [];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 101`] = `
{
  "code": "const x: Readonly<string[]> = ['a', 'b'];",
  "diagnostics": [
    {
      "message": "Array type using 'Readonly<string[]>' is forbidden. Use 'readonly string[][]' instead.",
      "messageId": "errorStringArrayReadonly",
      "range": {
        "end": {
          "column": 28,
          "line": 1,
        },
        "start": {
          "column": 10,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "const x: readonly string[] = ['a', 'b'];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 102`] = `
{
  "code": "declare function foo<E extends Readonly<string[]>>(extra: E): E;",
  "diagnostics": [
    {
      "message": "Array type using 'Readonly<string[]>' is forbidden for simple types. Use 'readonly string[][]' instead.",
      "messageId": "errorStringArraySimpleReadonly",
      "range": {
        "end": {
          "column": 50,
          "line": 1,
        },
        "start": {
          "column": 32,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "declare function foo<E extends readonly string[]>(extra: E): E;",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 103`] = `
{
  "code": "type Conditional<T> = Array<T extends string ? string : number>;",
  "diagnostics": [
    {
      "message": "Array type using 'Array<T>' is forbidden. Use 'T[]' instead.",
      "messageId": "errorStringArray",
      "range": {
        "end": {
          "column": 64,
          "line": 1,
        },
        "start": {
          "column": 23,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "type Conditional<T> = (T extends string ? string : number)[];",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 104`] = `
{
  "code": "type Conditional<T> = (T extends string ? string : number)[];",
  "diagnostics": [
    {
      "message": "Array type using 'T[]' is forbidden for non-simple types. Use 'Array<T>' instead.",
      "messageId": "errorStringGenericSimple",
      "range": {
        "end": {
          "column": 61,
          "line": 1,
        },
        "start": {
          "column": 23,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "type Conditional<T> = Array<T extends string ? string : number>;",
  "ruleCount": 1,
}
`;

exports[`array-type > invalid 105`] = `
{
  "code": "type Conditional<T> = (T extends string ? string : number)[];",
  "diagnostics": [
    {
      "message": "Array type using 'T[]' is forbidden. Use 'Array<T>' instead.",
      "messageId": "errorStringGeneric",
      "range": {
        "end": {
          "column": 61,
          "line": 1,
        },
        "start": {
          "column": 23,
          "line": 1,
        },
      },
      "ruleName": "@typescript-eslint/array-type",
    },
  ],
  "errorCount": 1,
  "fileCount": 1,
  "output": "type Conditional<T> = Array<T extends string ? string : number>;",
  "ruleCount": 1,
}
`;
