
// Code generated by tools/gen_shims. DO NOT EDIT.

package tsoptions

import "github.com/microsoft/typescript-go/internal/ast"
import "github.com/microsoft/typescript-go/internal/collections"
import "github.com/microsoft/typescript-go/internal/core"
import "github.com/microsoft/typescript-go/internal/diagnostics"
import "github.com/microsoft/typescript-go/internal/tsoptions"
import "github.com/microsoft/typescript-go/internal/tspath"
import "reflect"
import _ "unsafe"

type AlternateModeDiagnostics = tsoptions.AlternateModeDiagnostics
var BuildNameMap = tsoptions.BuildNameMap
var BuildOpts = tsoptions.BuildOpts
var CommandLineCompilerOptionsMap = tsoptions.CommandLineCompilerOptionsMap
type CommandLineOption = tsoptions.CommandLineOption
type CommandLineOptionKind = tsoptions.CommandLineOptionKind
type CommandLineOptionNameMap = tsoptions.CommandLineOptionNameMap
const CommandLineOptionTypeBoolean = tsoptions.CommandLineOptionTypeBoolean
const CommandLineOptionTypeEnum = tsoptions.CommandLineOptionTypeEnum
const CommandLineOptionTypeList = tsoptions.CommandLineOptionTypeList
const CommandLineOptionTypeListOrElement = tsoptions.CommandLineOptionTypeListOrElement
const CommandLineOptionTypeNumber = tsoptions.CommandLineOptionTypeNumber
const CommandLineOptionTypeObject = tsoptions.CommandLineOptionTypeObject
const CommandLineOptionTypeString = tsoptions.CommandLineOptionTypeString
var CompilerNameMap = tsoptions.CompilerNameMap
//go:linkname CompilerOptionsAffectDeclarationPath github.com/microsoft/typescript-go/internal/tsoptions.CompilerOptionsAffectDeclarationPath
func CompilerOptionsAffectDeclarationPath(oldOptions *core.CompilerOptions, newOptions *core.CompilerOptions) bool
//go:linkname CompilerOptionsAffectEmit github.com/microsoft/typescript-go/internal/tsoptions.CompilerOptionsAffectEmit
func CompilerOptionsAffectEmit(oldOptions *core.CompilerOptions, newOptions *core.CompilerOptions) bool
//go:linkname CompilerOptionsAffectSemanticDiagnostics github.com/microsoft/typescript-go/internal/tsoptions.CompilerOptionsAffectSemanticDiagnostics
func CompilerOptionsAffectSemanticDiagnostics(oldOptions *core.CompilerOptions, newOptions *core.CompilerOptions) bool
var CompilerOptionsDidYouMeanDiagnostics = tsoptions.CompilerOptionsDidYouMeanDiagnostics
type CompilerOptionsValue = tsoptions.CompilerOptionsValue
//go:linkname ConvertOptionToAbsolutePath github.com/microsoft/typescript-go/internal/tsoptions.ConvertOptionToAbsolutePath
func ConvertOptionToAbsolutePath(o string, v any, optionMap tsoptions.CommandLineOptionNameMap, cwd string) (any, bool)
//go:linkname CreateDiagnosticAtReferenceSyntax github.com/microsoft/typescript-go/internal/tsoptions.CreateDiagnosticAtReferenceSyntax
func CreateDiagnosticAtReferenceSyntax(config *tsoptions.ParsedCommandLine, index int, message *diagnostics.Message, args ...any) *ast.Diagnostic
//go:linkname CreateDiagnosticForNodeInSourceFile github.com/microsoft/typescript-go/internal/tsoptions.CreateDiagnosticForNodeInSourceFile
func CreateDiagnosticForNodeInSourceFile(sourceFile *ast.SourceFile, node *ast.Node, message *diagnostics.Message, args ...any) *ast.Diagnostic
//go:linkname CreateDiagnosticForNodeInSourceFileOrCompilerDiagnostic github.com/microsoft/typescript-go/internal/tsoptions.CreateDiagnosticForNodeInSourceFileOrCompilerDiagnostic
func CreateDiagnosticForNodeInSourceFileOrCompilerDiagnostic(sourceFile *ast.SourceFile, node *ast.Node, message *diagnostics.Message, args ...any) *ast.Diagnostic
type DidYouMeanOptionsDiagnostics = tsoptions.DidYouMeanOptionsDiagnostics
type ExtendedConfigCacheEntry = tsoptions.ExtendedConfigCacheEntry
type FileExtensionInfo = tsoptions.FileExtensionInfo
//go:linkname ForEachCompilerOptionValue github.com/microsoft/typescript-go/internal/tsoptions.ForEachCompilerOptionValue
func ForEachCompilerOptionValue(options *core.CompilerOptions, declFilter func(*tsoptions.CommandLineOption) bool, fn func(option *tsoptions.CommandLineOption, value reflect.Value, i int) bool) bool
//go:linkname GetCallbackForFindingPropertyAssignmentByValue github.com/microsoft/typescript-go/internal/tsoptions.GetCallbackForFindingPropertyAssignmentByValue
func GetCallbackForFindingPropertyAssignmentByValue(value string) func(property *ast.PropertyAssignment) *ast.Node
//go:linkname GetDefaultLibFileName github.com/microsoft/typescript-go/internal/tsoptions.GetDefaultLibFileName
func GetDefaultLibFileName(options *core.CompilerOptions) string
//go:linkname GetLibFileName github.com/microsoft/typescript-go/internal/tsoptions.GetLibFileName
func GetLibFileName(libName string) (string, bool)
//go:linkname GetNameMapFromList github.com/microsoft/typescript-go/internal/tsoptions.GetNameMapFromList
func GetNameMapFromList(optDecls []*tsoptions.CommandLineOption) *tsoptions.NameMap
//go:linkname GetOptionsSyntaxByArrayElementValue github.com/microsoft/typescript-go/internal/tsoptions.GetOptionsSyntaxByArrayElementValue
func GetOptionsSyntaxByArrayElementValue(objectLiteral *ast.ObjectLiteralExpression, propKey string, elementValue string) *ast.Node
//go:linkname GetParsedCommandLineOfConfigFile github.com/microsoft/typescript-go/internal/tsoptions.GetParsedCommandLineOfConfigFile
func GetParsedCommandLineOfConfigFile(configFileName string, options *core.CompilerOptions, sys tsoptions.ParseConfigHost, extendedConfigCache *collections.SyncMap[tspath.Path, *tsoptions.ExtendedConfigCacheEntry]) (*tsoptions.ParsedCommandLine, []*ast.Diagnostic)
//go:linkname GetParsedCommandLineOfConfigFilePath github.com/microsoft/typescript-go/internal/tsoptions.GetParsedCommandLineOfConfigFilePath
func GetParsedCommandLineOfConfigFilePath(configFileName string, path tspath.Path, options *core.CompilerOptions, sys tsoptions.ParseConfigHost, extendedConfigCache *collections.SyncMap[tspath.Path, *tsoptions.ExtendedConfigCacheEntry]) (*tsoptions.ParsedCommandLine, []*ast.Diagnostic)
//go:linkname GetSupportedExtensionsWithJsonIfResolveJsonModule github.com/microsoft/typescript-go/internal/tsoptions.GetSupportedExtensionsWithJsonIfResolveJsonModule
func GetSupportedExtensionsWithJsonIfResolveJsonModule(compilerOptions *core.CompilerOptions, supportedExtensions [][]string) [][]string
//go:linkname GetTsConfigPropArrayElementValue github.com/microsoft/typescript-go/internal/tsoptions.GetTsConfigPropArrayElementValue
func GetTsConfigPropArrayElementValue(tsConfigSourceFile *ast.SourceFile, propKey string, elementValue string) *ast.StringLiteral
var InverseJsxOptionMap = tsoptions.InverseJsxOptionMap
var LibFilesSet = tsoptions.LibFilesSet
var Libs = tsoptions.Libs
type NameMap = tsoptions.NameMap
//go:linkname NewTsconfigSourceFileFromFilePath github.com/microsoft/typescript-go/internal/tsoptions.NewTsconfigSourceFileFromFilePath
func NewTsconfigSourceFileFromFilePath(configFileName string, configPath tspath.Path, configSourceText string) *tsoptions.TsConfigSourceFile
var OptionsDeclarations = tsoptions.OptionsDeclarations
type OutputDtsAndProjectReference = tsoptions.OutputDtsAndProjectReference
//go:linkname ParseCommandLine github.com/microsoft/typescript-go/internal/tsoptions.ParseCommandLine
func ParseCommandLine(commandLine []string, host tsoptions.ParseConfigHost) *tsoptions.ParsedCommandLine
type ParseCommandLineWorkerDiagnostics = tsoptions.ParseCommandLineWorkerDiagnostics
//go:linkname ParseCompilerOptions github.com/microsoft/typescript-go/internal/tsoptions.ParseCompilerOptions
func ParseCompilerOptions(key string, value any, allOptions *core.CompilerOptions) []*ast.Diagnostic
//go:linkname ParseConfigFileTextToJson github.com/microsoft/typescript-go/internal/tsoptions.ParseConfigFileTextToJson
func ParseConfigFileTextToJson(fileName string, path tspath.Path, jsonText string) (any, []*ast.Diagnostic)
type ParseConfigHost = tsoptions.ParseConfigHost
//go:linkname ParseListTypeOption github.com/microsoft/typescript-go/internal/tsoptions.ParseListTypeOption
func ParseListTypeOption(opt *tsoptions.CommandLineOption, value string) ([]any, []*ast.Diagnostic)
//go:linkname ParseTypeAcquisition github.com/microsoft/typescript-go/internal/tsoptions.ParseTypeAcquisition
func ParseTypeAcquisition(key string, value any, allOptions *core.TypeAcquisition) []*ast.Diagnostic
//go:linkname ParseWatchOptions github.com/microsoft/typescript-go/internal/tsoptions.ParseWatchOptions
func ParseWatchOptions(key string, value any, allOptions *core.WatchOptions) []*ast.Diagnostic
type ParsedCommandLine = tsoptions.ParsedCommandLine
type SourceAndProjectReference = tsoptions.SourceAndProjectReference
//go:linkname TargetToLibMap github.com/microsoft/typescript-go/internal/tsoptions.TargetToLibMap
func TargetToLibMap() map[core.ScriptTarget]string
type TsConfigSourceFile = tsoptions.TsConfigSourceFile
var TscBuildOption = tsoptions.TscBuildOption
var WatchNameMap = tsoptions.WatchNameMap
