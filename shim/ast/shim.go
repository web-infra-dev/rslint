
// Code generated by tools/gen_shims. DO NOT EDIT.

package ast

import "github.com/microsoft/typescript-go/internal/ast"
import "github.com/microsoft/typescript-go/internal/core"
import "github.com/microsoft/typescript-go/internal/diagnostics"
import "github.com/microsoft/typescript-go/internal/tspath"
import _ "unsafe"

type AccessExpression = ast.AccessExpression
type AccessorDeclaration = ast.AccessorDeclaration
type AccessorDeclarationBase = ast.AccessorDeclarationBase
type AnyValidImportOrReExport = ast.AnyValidImportOrReExport
type ArgumentList = ast.ArgumentList
type ArrayLiteralExpression = ast.ArrayLiteralExpression
type ArrayTypeNode = ast.ArrayTypeNode
type ArrowFunction = ast.ArrowFunction
type AsExpression = ast.AsExpression
type AwaitExpression = ast.AwaitExpression
type BigIntLiteral = ast.BigIntLiteral
type BinaryExpression = ast.BinaryExpression
type BindingElement = ast.BindingElement
type BindingElementList = ast.BindingElementList
type BindingElementNode = ast.BindingElementNode
type BindingName = ast.BindingName
type BindingPattern = ast.BindingPattern
type BindingPatternNode = ast.BindingPatternNode
type Block = ast.Block
type BlockNode = ast.BlockNode
type BlockOrExpression = ast.BlockOrExpression
type BodyBase = ast.BodyBase
type BreakOrContinueStatement = ast.BreakOrContinueStatement
type BreakStatement = ast.BreakStatement
type CallExpression = ast.CallExpression
type CallLikeExpression = ast.CallLikeExpression
type CallSignatureDeclaration = ast.CallSignatureDeclaration
//go:linkname CanHaveDecorators github.com/microsoft/typescript-go/internal/ast.CanHaveDecorators
func CanHaveDecorators(node *ast.Node) bool
//go:linkname CanHaveIllegalDecorators github.com/microsoft/typescript-go/internal/ast.CanHaveIllegalDecorators
func CanHaveIllegalDecorators(node *ast.Node) bool
//go:linkname CanHaveIllegalModifiers github.com/microsoft/typescript-go/internal/ast.CanHaveIllegalModifiers
func CanHaveIllegalModifiers(node *ast.Node) bool
//go:linkname CanHaveModifiers github.com/microsoft/typescript-go/internal/ast.CanHaveModifiers
func CanHaveModifiers(node *ast.Node) bool
//go:linkname CanHaveSymbol github.com/microsoft/typescript-go/internal/ast.CanHaveSymbol
func CanHaveSymbol(node *ast.Node) bool
type CaseBlock = ast.CaseBlock
type CaseBlockNode = ast.CaseBlockNode
type CaseClauseNode = ast.CaseClauseNode
type CaseClausesList = ast.CaseClausesList
type CaseOrDefaultClause = ast.CaseOrDefaultClause
type CaseOrDefaultClauseNode = ast.CaseOrDefaultClauseNode
type CatchClause = ast.CatchClause
type CatchClauseNode = ast.CatchClauseNode
type CheckFlags = ast.CheckFlags
const CheckFlagsContainsPrivate = ast.CheckFlagsContainsPrivate
const CheckFlagsContainsProtected = ast.CheckFlagsContainsProtected
const CheckFlagsContainsPublic = ast.CheckFlagsContainsPublic
const CheckFlagsContainsStatic = ast.CheckFlagsContainsStatic
const CheckFlagsDeferredType = ast.CheckFlagsDeferredType
const CheckFlagsHasLiteralType = ast.CheckFlagsHasLiteralType
const CheckFlagsHasNeverType = ast.CheckFlagsHasNeverType
const CheckFlagsHasNonUniformType = ast.CheckFlagsHasNonUniformType
const CheckFlagsInstantiated = ast.CheckFlagsInstantiated
const CheckFlagsIsDiscriminant = ast.CheckFlagsIsDiscriminant
const CheckFlagsIsDiscriminantComputed = ast.CheckFlagsIsDiscriminantComputed
const CheckFlagsLate = ast.CheckFlagsLate
const CheckFlagsMapped = ast.CheckFlagsMapped
const CheckFlagsNonUniformAndLiteral = ast.CheckFlagsNonUniformAndLiteral
const CheckFlagsNone = ast.CheckFlagsNone
const CheckFlagsOptionalParameter = ast.CheckFlagsOptionalParameter
const CheckFlagsPartial = ast.CheckFlagsPartial
const CheckFlagsReadPartial = ast.CheckFlagsReadPartial
const CheckFlagsReadonly = ast.CheckFlagsReadonly
const CheckFlagsRestParameter = ast.CheckFlagsRestParameter
const CheckFlagsReverseMapped = ast.CheckFlagsReverseMapped
const CheckFlagsStripOptional = ast.CheckFlagsStripOptional
const CheckFlagsSynthetic = ast.CheckFlagsSynthetic
const CheckFlagsSyntheticMethod = ast.CheckFlagsSyntheticMethod
const CheckFlagsSyntheticProperty = ast.CheckFlagsSyntheticProperty
const CheckFlagsUnresolved = ast.CheckFlagsUnresolved
const CheckFlagsWritePartial = ast.CheckFlagsWritePartial
type CheckJsDirective = ast.CheckJsDirective
type ClassDeclaration = ast.ClassDeclaration
type ClassElement = ast.ClassElement
type ClassElementBase = ast.ClassElementBase
type ClassElementList = ast.ClassElementList
type ClassExpression = ast.ClassExpression
type ClassLikeBase = ast.ClassLikeBase
type ClassLikeDeclaration = ast.ClassLikeDeclaration
type ClassStaticBlockDeclaration = ast.ClassStaticBlockDeclaration
type CommentDirective = ast.CommentDirective
type CommentDirectiveKind = ast.CommentDirectiveKind
const CommentDirectiveKindExpectError = ast.CommentDirectiveKindExpectError
const CommentDirectiveKindIgnore = ast.CommentDirectiveKindIgnore
const CommentDirectiveKindUnknown = ast.CommentDirectiveKindUnknown
type CommentRange = ast.CommentRange
type CommonJSExport = ast.CommonJSExport
//go:linkname CompareDiagnostics github.com/microsoft/typescript-go/internal/ast.CompareDiagnostics
func CompareDiagnostics(d1 *ast.Diagnostic, d2 *ast.Diagnostic) int
type ComputedPropertyName = ast.ComputedPropertyName
type ConditionalExpression = ast.ConditionalExpression
type ConditionalTypeNode = ast.ConditionalTypeNode
type ConstructSignatureDeclaration = ast.ConstructSignatureDeclaration
type ConstructorDeclaration = ast.ConstructorDeclaration
type ConstructorDeclarationNode = ast.ConstructorDeclarationNode
type ConstructorTypeNode = ast.ConstructorTypeNode
type ContinueStatement = ast.ContinueStatement
//go:linkname CreateModifiersFromModifierFlags github.com/microsoft/typescript-go/internal/ast.CreateModifiersFromModifierFlags
func CreateModifiersFromModifierFlags(flags ast.ModifierFlags, createModifier func(kind ast.Kind) *ast.Node) []*ast.Node
type DebuggerStatement = ast.DebuggerStatement
type Declaration = ast.Declaration
type DeclarationBase = ast.DeclarationBase
type DeclarationName = ast.DeclarationName
type Decorator = ast.Decorator
type DeleteExpression = ast.DeleteExpression
type Diagnostic = ast.Diagnostic
type DiagnosticsCollection = ast.DiagnosticsCollection
type DoStatement = ast.DoStatement
type ElementAccessExpression = ast.ElementAccessExpression
type ElementList = ast.ElementList
type EmptyStatement = ast.EmptyStatement
type EntityName = ast.EntityName
type EnumDeclaration = ast.EnumDeclaration
type EnumDeclarationNode = ast.EnumDeclarationNode
type EnumMember = ast.EnumMember
type EnumMemberList = ast.EnumMemberList
type EnumMemberNode = ast.EnumMemberNode
//go:linkname EqualDiagnostics github.com/microsoft/typescript-go/internal/ast.EqualDiagnostics
func EqualDiagnostics(d1 *ast.Diagnostic, d2 *ast.Diagnostic) bool
//go:linkname EqualDiagnosticsNoRelatedInfo github.com/microsoft/typescript-go/internal/ast.EqualDiagnosticsNoRelatedInfo
func EqualDiagnosticsNoRelatedInfo(d1 *ast.Diagnostic, d2 *ast.Diagnostic) bool
type ExportAssignment = ast.ExportAssignment
//go:linkname ExportAssignmentIsAlias github.com/microsoft/typescript-go/internal/ast.ExportAssignmentIsAlias
func ExportAssignmentIsAlias(node *ast.Node) bool
type ExportDeclaration = ast.ExportDeclaration
type ExportSpecifier = ast.ExportSpecifier
type ExportSpecifierList = ast.ExportSpecifierList
type ExportSpecifierNode = ast.ExportSpecifierNode
type ExportableBase = ast.ExportableBase
type Expression = ast.Expression
type ExpressionBase = ast.ExpressionBase
type ExpressionStatement = ast.ExpressionStatement
type ExpressionWithTypeArguments = ast.ExpressionWithTypeArguments
type ExpressionWithTypeArgumentsList = ast.ExpressionWithTypeArgumentsList
type ExpressionWithTypeArgumentsNode = ast.ExpressionWithTypeArgumentsNode
type ExternalModuleIndicatorOptions = ast.ExternalModuleIndicatorOptions
type ExternalModuleReference = ast.ExternalModuleReference
type FileReference = ast.FileReference
//go:linkname FindAncestor github.com/microsoft/typescript-go/internal/ast.FindAncestor
func FindAncestor(node *ast.Node, callback func(*ast.Node) bool) *ast.Node
const FindAncestorFalse = ast.FindAncestorFalse
//go:linkname FindAncestorKind github.com/microsoft/typescript-go/internal/ast.FindAncestorKind
func FindAncestorKind(node *ast.Node, kind ast.Kind) *ast.Node
//go:linkname FindAncestorOrQuit github.com/microsoft/typescript-go/internal/ast.FindAncestorOrQuit
func FindAncestorOrQuit(node *ast.Node, callback func(*ast.Node) ast.FindAncestorResult) *ast.Node
const FindAncestorQuit = ast.FindAncestorQuit
type FindAncestorResult = ast.FindAncestorResult
const FindAncestorTrue = ast.FindAncestorTrue
//go:linkname FindConstructorDeclaration github.com/microsoft/typescript-go/internal/ast.FindConstructorDeclaration
func FindConstructorDeclaration(node *ast.ClassLikeDeclaration) *ast.Node
//go:linkname FindLastVisibleNode github.com/microsoft/typescript-go/internal/ast.FindLastVisibleNode
func FindLastVisibleNode(nodes []*ast.Node) *ast.Node
type FlowFlags = ast.FlowFlags
const FlowFlagsArrayMutation = ast.FlowFlagsArrayMutation
const FlowFlagsAssignment = ast.FlowFlagsAssignment
const FlowFlagsBranchLabel = ast.FlowFlagsBranchLabel
const FlowFlagsCall = ast.FlowFlagsCall
const FlowFlagsCondition = ast.FlowFlagsCondition
const FlowFlagsFalseCondition = ast.FlowFlagsFalseCondition
const FlowFlagsLabel = ast.FlowFlagsLabel
const FlowFlagsLoopLabel = ast.FlowFlagsLoopLabel
const FlowFlagsReduceLabel = ast.FlowFlagsReduceLabel
const FlowFlagsReferenced = ast.FlowFlagsReferenced
const FlowFlagsShared = ast.FlowFlagsShared
const FlowFlagsStart = ast.FlowFlagsStart
const FlowFlagsSwitchClause = ast.FlowFlagsSwitchClause
const FlowFlagsTrueCondition = ast.FlowFlagsTrueCondition
const FlowFlagsUnreachable = ast.FlowFlagsUnreachable
type FlowLabel = ast.FlowLabel
type FlowList = ast.FlowList
type FlowNode = ast.FlowNode
type FlowNodeBase = ast.FlowNodeBase
type FlowReduceLabelData = ast.FlowReduceLabelData
type FlowSwitchClauseData = ast.FlowSwitchClauseData
//go:linkname ForEachChildAndJSDoc github.com/microsoft/typescript-go/internal/ast.ForEachChildAndJSDoc
func ForEachChildAndJSDoc(node *ast.Node, sourceFile *ast.SourceFile, v ast.Visitor) bool
//go:linkname ForEachDynamicImportOrRequireCall github.com/microsoft/typescript-go/internal/ast.ForEachDynamicImportOrRequireCall
func ForEachDynamicImportOrRequireCall(file *ast.SourceFile, includeTypeSpaceImports bool, requireStringLiteralLikeArgument bool, cb func(node *ast.Node, argument *ast.Expression) bool) bool
//go:linkname ForEachReturnStatement github.com/microsoft/typescript-go/internal/ast.ForEachReturnStatement
func ForEachReturnStatement(body *ast.Node, visitor func(stmt *ast.Node) bool) bool
type ForInOrOfStatement = ast.ForInOrOfStatement
type ForInitializer = ast.ForInitializer
type ForStatement = ast.ForStatement
type FunctionDeclaration = ast.FunctionDeclaration
type FunctionDeclarationNode = ast.FunctionDeclarationNode
type FunctionExpression = ast.FunctionExpression
type FunctionLikeBase = ast.FunctionLikeBase
type FunctionLikeWithBodyBase = ast.FunctionLikeWithBodyBase
type FunctionOrConstructorTypeNodeBase = ast.FunctionOrConstructorTypeNodeBase
type FunctionTypeNode = ast.FunctionTypeNode
type GetAccessorDeclaration = ast.GetAccessorDeclaration
//go:linkname GetAssertedTypeNode github.com/microsoft/typescript-go/internal/ast.GetAssertedTypeNode
func GetAssertedTypeNode(node *ast.Node) *ast.Node
//go:linkname GetAssignmentDeclarationKind github.com/microsoft/typescript-go/internal/ast.GetAssignmentDeclarationKind
func GetAssignmentDeclarationKind(bin *ast.BinaryExpression) ast.JSDeclarationKind
//go:linkname GetAssignmentTarget github.com/microsoft/typescript-go/internal/ast.GetAssignmentTarget
func GetAssignmentTarget(node *ast.Node) *ast.Node
//go:linkname GetBinaryOperatorPrecedence github.com/microsoft/typescript-go/internal/ast.GetBinaryOperatorPrecedence
func GetBinaryOperatorPrecedence(operatorKind ast.Kind) ast.OperatorPrecedence
//go:linkname GetClassExtendsHeritageElement github.com/microsoft/typescript-go/internal/ast.GetClassExtendsHeritageElement
func GetClassExtendsHeritageElement(node *ast.Node) *ast.ExpressionWithTypeArgumentsNode
//go:linkname GetClassLikeDeclarationOfSymbol github.com/microsoft/typescript-go/internal/ast.GetClassLikeDeclarationOfSymbol
func GetClassLikeDeclarationOfSymbol(symbol *ast.Symbol) *ast.Node
//go:linkname GetCombinedModifierFlags github.com/microsoft/typescript-go/internal/ast.GetCombinedModifierFlags
func GetCombinedModifierFlags(node *ast.Node) ast.ModifierFlags
//go:linkname GetCombinedNodeFlags github.com/microsoft/typescript-go/internal/ast.GetCombinedNodeFlags
func GetCombinedNodeFlags(node *ast.Node) ast.NodeFlags
//go:linkname GetContainingClass github.com/microsoft/typescript-go/internal/ast.GetContainingClass
func GetContainingClass(node *ast.Node) *ast.Node
//go:linkname GetDeclarationContainer github.com/microsoft/typescript-go/internal/ast.GetDeclarationContainer
func GetDeclarationContainer(node *ast.Node) *ast.Node
//go:linkname GetDeclarationOfKind github.com/microsoft/typescript-go/internal/ast.GetDeclarationOfKind
func GetDeclarationOfKind(symbol *ast.Symbol, kind ast.Kind) *ast.Node
//go:linkname GetElementOrPropertyAccessName github.com/microsoft/typescript-go/internal/ast.GetElementOrPropertyAccessName
func GetElementOrPropertyAccessName(node *ast.Node) *ast.Node
//go:linkname GetEmitModuleFormatOfFileWorker github.com/microsoft/typescript-go/internal/ast.GetEmitModuleFormatOfFileWorker
func GetEmitModuleFormatOfFileWorker(fileName string, options *core.CompilerOptions, sourceFileMetaData ast.SourceFileMetaData) core.ModuleKind
//go:linkname GetEnclosingBlockScopeContainer github.com/microsoft/typescript-go/internal/ast.GetEnclosingBlockScopeContainer
func GetEnclosingBlockScopeContainer(node *ast.Node) *ast.Node
//go:linkname GetExports github.com/microsoft/typescript-go/internal/ast.GetExports
func GetExports(symbol *ast.Symbol) ast.SymbolTable
//go:linkname GetExpressionPrecedence github.com/microsoft/typescript-go/internal/ast.GetExpressionPrecedence
func GetExpressionPrecedence(expression *ast.Expression) ast.OperatorPrecedence
//go:linkname GetExtendsHeritageClauseElement github.com/microsoft/typescript-go/internal/ast.GetExtendsHeritageClauseElement
func GetExtendsHeritageClauseElement(node *ast.Node) *ast.ExpressionWithTypeArgumentsNode
//go:linkname GetExtendsHeritageClauseElements github.com/microsoft/typescript-go/internal/ast.GetExtendsHeritageClauseElements
func GetExtendsHeritageClauseElements(node *ast.Node) []*ast.ExpressionWithTypeArgumentsNode
//go:linkname GetExternalModuleImportEqualsDeclarationExpression github.com/microsoft/typescript-go/internal/ast.GetExternalModuleImportEqualsDeclarationExpression
func GetExternalModuleImportEqualsDeclarationExpression(node *ast.Node) *ast.Node
//go:linkname GetExternalModuleIndicatorOptions github.com/microsoft/typescript-go/internal/ast.GetExternalModuleIndicatorOptions
func GetExternalModuleIndicatorOptions(fileName string, options *core.CompilerOptions, metadata ast.SourceFileMetaData) ast.ExternalModuleIndicatorOptions
//go:linkname GetExternalModuleName github.com/microsoft/typescript-go/internal/ast.GetExternalModuleName
func GetExternalModuleName(node *ast.Node) *ast.Expression
//go:linkname GetFirstIdentifier github.com/microsoft/typescript-go/internal/ast.GetFirstIdentifier
func GetFirstIdentifier(node *ast.Node) *ast.Node
//go:linkname GetHeritageClause github.com/microsoft/typescript-go/internal/ast.GetHeritageClause
func GetHeritageClause(node *ast.Node, kind ast.Kind) *ast.Node
//go:linkname GetHeritageElements github.com/microsoft/typescript-go/internal/ast.GetHeritageElements
func GetHeritageElements(node *ast.Node, kind ast.Kind) []*ast.Node
//go:linkname GetImmediatelyInvokedFunctionExpression github.com/microsoft/typescript-go/internal/ast.GetImmediatelyInvokedFunctionExpression
func GetImmediatelyInvokedFunctionExpression(fn *ast.Node) *ast.Node
//go:linkname GetImplementsHeritageClauseElements github.com/microsoft/typescript-go/internal/ast.GetImplementsHeritageClauseElements
func GetImplementsHeritageClauseElements(node *ast.Node) []*ast.ExpressionWithTypeArgumentsNode
//go:linkname GetImplementsTypeNodes github.com/microsoft/typescript-go/internal/ast.GetImplementsTypeNodes
func GetImplementsTypeNodes(node *ast.Node) []*ast.ExpressionWithTypeArgumentsNode
//go:linkname GetImpliedNodeFormatForEmitWorker github.com/microsoft/typescript-go/internal/ast.GetImpliedNodeFormatForEmitWorker
func GetImpliedNodeFormatForEmitWorker(fileName string, emitModuleKind core.ModuleKind, sourceFileMetaData ast.SourceFileMetaData) core.ResolutionMode
//go:linkname GetImpliedNodeFormatForFile github.com/microsoft/typescript-go/internal/ast.GetImpliedNodeFormatForFile
func GetImpliedNodeFormatForFile(path string, packageJsonType string) core.ModuleKind
//go:linkname GetImportAttributes github.com/microsoft/typescript-go/internal/ast.GetImportAttributes
func GetImportAttributes(node *ast.Node) *ast.Node
//go:linkname GetInitializerOfBinaryExpression github.com/microsoft/typescript-go/internal/ast.GetInitializerOfBinaryExpression
func GetInitializerOfBinaryExpression(expr *ast.BinaryExpression) *ast.Expression
//go:linkname GetInvokedExpression github.com/microsoft/typescript-go/internal/ast.GetInvokedExpression
func GetInvokedExpression(node *ast.Node) *ast.Node
//go:linkname GetJSXImplicitImportBase github.com/microsoft/typescript-go/internal/ast.GetJSXImplicitImportBase
func GetJSXImplicitImportBase(compilerOptions *core.CompilerOptions, file *ast.SourceFile) string
//go:linkname GetJSXRuntimeImport github.com/microsoft/typescript-go/internal/ast.GetJSXRuntimeImport
func GetJSXRuntimeImport(base string, options *core.CompilerOptions) string
//go:linkname GetLeftmostAccessExpression github.com/microsoft/typescript-go/internal/ast.GetLeftmostAccessExpression
func GetLeftmostAccessExpression(expr *ast.Node) *ast.Node
//go:linkname GetLeftmostExpression github.com/microsoft/typescript-go/internal/ast.GetLeftmostExpression
func GetLeftmostExpression(node *ast.Expression, stopAtCallExpressions bool) *ast.Expression
//go:linkname GetLocals github.com/microsoft/typescript-go/internal/ast.GetLocals
func GetLocals(container *ast.Node) ast.SymbolTable
//go:linkname GetMeaningFromDeclaration github.com/microsoft/typescript-go/internal/ast.GetMeaningFromDeclaration
func GetMeaningFromDeclaration(node *ast.Node) ast.SemanticMeaning
//go:linkname GetMembers github.com/microsoft/typescript-go/internal/ast.GetMembers
func GetMembers(symbol *ast.Symbol) ast.SymbolTable
//go:linkname GetModuleInstanceState github.com/microsoft/typescript-go/internal/ast.GetModuleInstanceState
func GetModuleInstanceState(node *ast.Node) ast.ModuleInstanceState
//go:linkname GetNameOfDeclaration github.com/microsoft/typescript-go/internal/ast.GetNameOfDeclaration
func GetNameOfDeclaration(declaration *ast.Node) *ast.Node
//go:linkname GetNamespaceDeclarationNode github.com/microsoft/typescript-go/internal/ast.GetNamespaceDeclarationNode
func GetNamespaceDeclarationNode(node *ast.Node) *ast.Node
//go:linkname GetNewTargetContainer github.com/microsoft/typescript-go/internal/ast.GetNewTargetContainer
func GetNewTargetContainer(node *ast.Node) *ast.Node
//go:linkname GetNodeAtPosition github.com/microsoft/typescript-go/internal/ast.GetNodeAtPosition
func GetNodeAtPosition(file *ast.SourceFile, position int, isJavaScriptFile bool) *ast.Node
//go:linkname GetNodeId github.com/microsoft/typescript-go/internal/ast.GetNodeId
func GetNodeId(node *ast.Node) ast.NodeId
//go:linkname GetNonAssignedNameOfDeclaration github.com/microsoft/typescript-go/internal/ast.GetNonAssignedNameOfDeclaration
func GetNonAssignedNameOfDeclaration(declaration *ast.Node) *ast.Node
//go:linkname GetOperatorPrecedence github.com/microsoft/typescript-go/internal/ast.GetOperatorPrecedence
func GetOperatorPrecedence(nodeKind ast.Kind, operatorKind ast.Kind, flags ast.OperatorPrecedenceFlags) ast.OperatorPrecedence
//go:linkname GetPragmaArgument github.com/microsoft/typescript-go/internal/ast.GetPragmaArgument
func GetPragmaArgument(pragma *ast.Pragma, name string) string
//go:linkname GetPragmaFromSourceFile github.com/microsoft/typescript-go/internal/ast.GetPragmaFromSourceFile
func GetPragmaFromSourceFile(file *ast.SourceFile, name string) *ast.Pragma
//go:linkname GetPropertyNameForPropertyNameNode github.com/microsoft/typescript-go/internal/ast.GetPropertyNameForPropertyNameNode
func GetPropertyNameForPropertyNameNode(name *ast.Node) string
//go:linkname GetRightMostAssignedExpression github.com/microsoft/typescript-go/internal/ast.GetRightMostAssignedExpression
func GetRightMostAssignedExpression(node *ast.Node) *ast.Node
//go:linkname GetRootDeclaration github.com/microsoft/typescript-go/internal/ast.GetRootDeclaration
func GetRootDeclaration(node *ast.Node) *ast.Node
//go:linkname GetSemanticJsxChildren github.com/microsoft/typescript-go/internal/ast.GetSemanticJsxChildren
func GetSemanticJsxChildren(children []*ast.JsxChild) []*ast.JsxChild
//go:linkname GetSourceFileAffectingCompilerOptions github.com/microsoft/typescript-go/internal/ast.GetSourceFileAffectingCompilerOptions
func GetSourceFileAffectingCompilerOptions(fileName string, options *core.CompilerOptions) core.SourceFileAffectingCompilerOptions
//go:linkname GetSourceFileOfModule github.com/microsoft/typescript-go/internal/ast.GetSourceFileOfModule
func GetSourceFileOfModule(module *ast.Symbol) *ast.SourceFile
//go:linkname GetSourceFileOfNode github.com/microsoft/typescript-go/internal/ast.GetSourceFileOfNode
func GetSourceFileOfNode(node *ast.Node) *ast.SourceFile
//go:linkname GetStatementsOfBlock github.com/microsoft/typescript-go/internal/ast.GetStatementsOfBlock
func GetStatementsOfBlock(block *ast.Node) *ast.StatementList
//go:linkname GetSuperContainer github.com/microsoft/typescript-go/internal/ast.GetSuperContainer
func GetSuperContainer(node *ast.Node, stopOnFunctions bool) *ast.Node
//go:linkname GetSymbolId github.com/microsoft/typescript-go/internal/ast.GetSymbolId
func GetSymbolId(symbol *ast.Symbol) ast.SymbolId
//go:linkname GetSymbolTable github.com/microsoft/typescript-go/internal/ast.GetSymbolTable
func GetSymbolTable(data *ast.SymbolTable) ast.SymbolTable
//go:linkname GetTextOfPropertyName github.com/microsoft/typescript-go/internal/ast.GetTextOfPropertyName
func GetTextOfPropertyName(name *ast.Node) string
//go:linkname GetThisContainer github.com/microsoft/typescript-go/internal/ast.GetThisContainer
func GetThisContainer(node *ast.Node, includeArrowFunctions bool, includeClassComputedPropertyName bool) *ast.Node
//go:linkname GetThisParameter github.com/microsoft/typescript-go/internal/ast.GetThisParameter
func GetThisParameter(signature *ast.Node) *ast.Node
//go:linkname GetTypeAnnotationNode github.com/microsoft/typescript-go/internal/ast.GetTypeAnnotationNode
func GetTypeAnnotationNode(node *ast.Node) *ast.TypeNode
//go:linkname GetTypeNodePrecedence github.com/microsoft/typescript-go/internal/ast.GetTypeNodePrecedence
func GetTypeNodePrecedence(n *ast.TypeNode) ast.TypePrecedence
//go:linkname HasAccessorModifier github.com/microsoft/typescript-go/internal/ast.HasAccessorModifier
func HasAccessorModifier(node *ast.Node) bool
//go:linkname HasDecorators github.com/microsoft/typescript-go/internal/ast.HasDecorators
func HasDecorators(node *ast.Node) bool
//go:linkname HasDynamicName github.com/microsoft/typescript-go/internal/ast.HasDynamicName
func HasDynamicName(declaration *ast.Node) bool
type HasFileName = ast.HasFileName
//go:linkname HasInitializer github.com/microsoft/typescript-go/internal/ast.HasInitializer
func HasInitializer(node *ast.Node) bool
//go:linkname HasQuestionToken github.com/microsoft/typescript-go/internal/ast.HasQuestionToken
func HasQuestionToken(node *ast.Node) bool
//go:linkname HasResolutionModeOverride github.com/microsoft/typescript-go/internal/ast.HasResolutionModeOverride
func HasResolutionModeOverride(node *ast.Node) bool
//go:linkname HasSamePropertyAccessName github.com/microsoft/typescript-go/internal/ast.HasSamePropertyAccessName
func HasSamePropertyAccessName(node1 *ast.Node, node2 *ast.Node) bool
//go:linkname HasStaticModifier github.com/microsoft/typescript-go/internal/ast.HasStaticModifier
func HasStaticModifier(node *ast.Node) bool
//go:linkname HasSyntacticModifier github.com/microsoft/typescript-go/internal/ast.HasSyntacticModifier
func HasSyntacticModifier(node *ast.Node, flags ast.ModifierFlags) bool
type HeritageClause = ast.HeritageClause
type HeritageClauseList = ast.HeritageClauseList
type HeritageClauseNode = ast.HeritageClauseNode
type Identifier = ast.Identifier
type IdentifierNode = ast.IdentifierNode
type IfStatement = ast.IfStatement
type ImportAttribute = ast.ImportAttribute
type ImportAttributeList = ast.ImportAttributeList
type ImportAttributeName = ast.ImportAttributeName
type ImportAttributeNode = ast.ImportAttributeNode
type ImportAttributes = ast.ImportAttributes
type ImportAttributesNode = ast.ImportAttributesNode
type ImportClause = ast.ImportClause
type ImportClauseNode = ast.ImportClauseNode
type ImportDeclaration = ast.ImportDeclaration
type ImportEqualsDeclaration = ast.ImportEqualsDeclaration
type ImportSpecifier = ast.ImportSpecifier
type ImportSpecifierList = ast.ImportSpecifierList
type ImportSpecifierNode = ast.ImportSpecifierNode
type ImportTypeNode = ast.ImportTypeNode
//go:linkname IndexOfNode github.com/microsoft/typescript-go/internal/ast.IndexOfNode
func IndexOfNode(nodes []*ast.Node, node *ast.Node) int
type IndexSignatureDeclaration = ast.IndexSignatureDeclaration
type IndexedAccessTypeNode = ast.IndexedAccessTypeNode
type InferTypeNode = ast.InferTypeNode
type InterfaceDeclaration = ast.InterfaceDeclaration
const InternalSymbolNameCall = ast.InternalSymbolNameCall
const InternalSymbolNameClass = ast.InternalSymbolNameClass
const InternalSymbolNameComputed = ast.InternalSymbolNameComputed
const InternalSymbolNameConstructor = ast.InternalSymbolNameConstructor
const InternalSymbolNameDefault = ast.InternalSymbolNameDefault
const InternalSymbolNameExportEquals = ast.InternalSymbolNameExportEquals
const InternalSymbolNameExportStar = ast.InternalSymbolNameExportStar
const InternalSymbolNameFunction = ast.InternalSymbolNameFunction
const InternalSymbolNameGlobal = ast.InternalSymbolNameGlobal
const InternalSymbolNameImportAttributes = ast.InternalSymbolNameImportAttributes
const InternalSymbolNameIndex = ast.InternalSymbolNameIndex
const InternalSymbolNameInstantiationExpression = ast.InternalSymbolNameInstantiationExpression
const InternalSymbolNameJSXAttributes = ast.InternalSymbolNameJSXAttributes
const InternalSymbolNameMissing = ast.InternalSymbolNameMissing
const InternalSymbolNameModuleExports = ast.InternalSymbolNameModuleExports
const InternalSymbolNameNew = ast.InternalSymbolNameNew
const InternalSymbolNameObject = ast.InternalSymbolNameObject
const InternalSymbolNamePrefix = ast.InternalSymbolNamePrefix
const InternalSymbolNameResolving = ast.InternalSymbolNameResolving
const InternalSymbolNameThis = ast.InternalSymbolNameThis
const InternalSymbolNameType = ast.InternalSymbolNameType
type IntersectionTypeNode = ast.IntersectionTypeNode
//go:linkname IsAccessExpression github.com/microsoft/typescript-go/internal/ast.IsAccessExpression
func IsAccessExpression(node *ast.Node) bool
//go:linkname IsAccessor github.com/microsoft/typescript-go/internal/ast.IsAccessor
func IsAccessor(node *ast.Node) bool
//go:linkname IsAliasSymbolDeclaration github.com/microsoft/typescript-go/internal/ast.IsAliasSymbolDeclaration
func IsAliasSymbolDeclaration(node *ast.Node) bool
//go:linkname IsAmbientModule github.com/microsoft/typescript-go/internal/ast.IsAmbientModule
func IsAmbientModule(node *ast.Node) bool
//go:linkname IsAnyExportAssignment github.com/microsoft/typescript-go/internal/ast.IsAnyExportAssignment
func IsAnyExportAssignment(node *ast.Node) bool
//go:linkname IsAnyImportOrReExport github.com/microsoft/typescript-go/internal/ast.IsAnyImportOrReExport
func IsAnyImportOrReExport(node *ast.Node) bool
//go:linkname IsAnyImportSyntax github.com/microsoft/typescript-go/internal/ast.IsAnyImportSyntax
func IsAnyImportSyntax(node *ast.Node) bool
//go:linkname IsArrayBindingPattern github.com/microsoft/typescript-go/internal/ast.IsArrayBindingPattern
func IsArrayBindingPattern(node *ast.Node) bool
//go:linkname IsArrayLiteralExpression github.com/microsoft/typescript-go/internal/ast.IsArrayLiteralExpression
func IsArrayLiteralExpression(node *ast.Node) bool
//go:linkname IsArrowFunction github.com/microsoft/typescript-go/internal/ast.IsArrowFunction
func IsArrowFunction(node *ast.Node) bool
//go:linkname IsAssertionExpression github.com/microsoft/typescript-go/internal/ast.IsAssertionExpression
func IsAssertionExpression(node *ast.Node) bool
//go:linkname IsAssignmentExpression github.com/microsoft/typescript-go/internal/ast.IsAssignmentExpression
func IsAssignmentExpression(node *ast.Node, excludeCompoundAssignment bool) bool
//go:linkname IsAssignmentOperator github.com/microsoft/typescript-go/internal/ast.IsAssignmentOperator
func IsAssignmentOperator(token ast.Kind) bool
//go:linkname IsAssignmentTarget github.com/microsoft/typescript-go/internal/ast.IsAssignmentTarget
func IsAssignmentTarget(node *ast.Node) bool
//go:linkname IsAutoAccessorPropertyDeclaration github.com/microsoft/typescript-go/internal/ast.IsAutoAccessorPropertyDeclaration
func IsAutoAccessorPropertyDeclaration(node *ast.Node) bool
//go:linkname IsAwaitExpression github.com/microsoft/typescript-go/internal/ast.IsAwaitExpression
func IsAwaitExpression(node *ast.Node) bool
//go:linkname IsBigIntLiteral github.com/microsoft/typescript-go/internal/ast.IsBigIntLiteral
func IsBigIntLiteral(node *ast.Node) bool
//go:linkname IsBinaryExpression github.com/microsoft/typescript-go/internal/ast.IsBinaryExpression
func IsBinaryExpression(node *ast.Node) bool
//go:linkname IsBindableStaticAccessExpression github.com/microsoft/typescript-go/internal/ast.IsBindableStaticAccessExpression
func IsBindableStaticAccessExpression(node *ast.Node, excludeThisKeyword bool) bool
//go:linkname IsBindableStaticElementAccessExpression github.com/microsoft/typescript-go/internal/ast.IsBindableStaticElementAccessExpression
func IsBindableStaticElementAccessExpression(node *ast.Node, excludeThisKeyword bool) bool
//go:linkname IsBindableStaticNameExpression github.com/microsoft/typescript-go/internal/ast.IsBindableStaticNameExpression
func IsBindableStaticNameExpression(node *ast.Node, excludeThisKeyword bool) bool
//go:linkname IsBindingElement github.com/microsoft/typescript-go/internal/ast.IsBindingElement
func IsBindingElement(node *ast.Node) bool
//go:linkname IsBindingPattern github.com/microsoft/typescript-go/internal/ast.IsBindingPattern
func IsBindingPattern(node *ast.Node) bool
//go:linkname IsBlock github.com/microsoft/typescript-go/internal/ast.IsBlock
func IsBlock(node *ast.Node) bool
//go:linkname IsBlockOrCatchScoped github.com/microsoft/typescript-go/internal/ast.IsBlockOrCatchScoped
func IsBlockOrCatchScoped(declaration *ast.Node) bool
//go:linkname IsBlockScope github.com/microsoft/typescript-go/internal/ast.IsBlockScope
func IsBlockScope(node *ast.Node, parentNode *ast.Node) bool
//go:linkname IsBooleanLiteral github.com/microsoft/typescript-go/internal/ast.IsBooleanLiteral
func IsBooleanLiteral(node *ast.Node) bool
//go:linkname IsBreakOrContinueStatement github.com/microsoft/typescript-go/internal/ast.IsBreakOrContinueStatement
func IsBreakOrContinueStatement(node *ast.Node) bool
//go:linkname IsCallExpression github.com/microsoft/typescript-go/internal/ast.IsCallExpression
func IsCallExpression(node *ast.Node) bool
//go:linkname IsCallLikeExpression github.com/microsoft/typescript-go/internal/ast.IsCallLikeExpression
func IsCallLikeExpression(node *ast.Node) bool
//go:linkname IsCallLikeOrFunctionLikeExpression github.com/microsoft/typescript-go/internal/ast.IsCallLikeOrFunctionLikeExpression
func IsCallLikeOrFunctionLikeExpression(node *ast.Node) bool
//go:linkname IsCallOrNewExpression github.com/microsoft/typescript-go/internal/ast.IsCallOrNewExpression
func IsCallOrNewExpression(node *ast.Node) bool
//go:linkname IsCallSignatureDeclaration github.com/microsoft/typescript-go/internal/ast.IsCallSignatureDeclaration
func IsCallSignatureDeclaration(node *ast.Node) bool
//go:linkname IsCaseClause github.com/microsoft/typescript-go/internal/ast.IsCaseClause
func IsCaseClause(node *ast.Node) bool
//go:linkname IsCatchClause github.com/microsoft/typescript-go/internal/ast.IsCatchClause
func IsCatchClause(node *ast.Node) bool
//go:linkname IsCatchClauseVariableDeclarationOrBindingElement github.com/microsoft/typescript-go/internal/ast.IsCatchClauseVariableDeclarationOrBindingElement
func IsCatchClauseVariableDeclarationOrBindingElement(declaration *ast.Node) bool
//go:linkname IsCheckJSEnabledForFile github.com/microsoft/typescript-go/internal/ast.IsCheckJSEnabledForFile
func IsCheckJSEnabledForFile(sourceFile *ast.SourceFile, compilerOptions *core.CompilerOptions) bool
//go:linkname IsClassDeclaration github.com/microsoft/typescript-go/internal/ast.IsClassDeclaration
func IsClassDeclaration(node *ast.Node) bool
//go:linkname IsClassElement github.com/microsoft/typescript-go/internal/ast.IsClassElement
func IsClassElement(node *ast.Node) bool
//go:linkname IsClassExpression github.com/microsoft/typescript-go/internal/ast.IsClassExpression
func IsClassExpression(node *ast.Node) bool
//go:linkname IsClassLike github.com/microsoft/typescript-go/internal/ast.IsClassLike
func IsClassLike(node *ast.Node) bool
//go:linkname IsClassMemberModifier github.com/microsoft/typescript-go/internal/ast.IsClassMemberModifier
func IsClassMemberModifier(token ast.Kind) bool
//go:linkname IsClassOrTypeElement github.com/microsoft/typescript-go/internal/ast.IsClassOrTypeElement
func IsClassOrTypeElement(node *ast.Node) bool
//go:linkname IsClassStaticBlockDeclaration github.com/microsoft/typescript-go/internal/ast.IsClassStaticBlockDeclaration
func IsClassStaticBlockDeclaration(node *ast.Node) bool
//go:linkname IsCommaExpression github.com/microsoft/typescript-go/internal/ast.IsCommaExpression
func IsCommaExpression(node *ast.Node) bool
//go:linkname IsCommaSequence github.com/microsoft/typescript-go/internal/ast.IsCommaSequence
func IsCommaSequence(node *ast.Node) bool
//go:linkname IsCommonJSExport github.com/microsoft/typescript-go/internal/ast.IsCommonJSExport
func IsCommonJSExport(node *ast.Node) bool
//go:linkname IsComputedNonLiteralName github.com/microsoft/typescript-go/internal/ast.IsComputedNonLiteralName
func IsComputedNonLiteralName(name *ast.Node) bool
//go:linkname IsComputedPropertyName github.com/microsoft/typescript-go/internal/ast.IsComputedPropertyName
func IsComputedPropertyName(node *ast.Node) bool
//go:linkname IsConditionalExpression github.com/microsoft/typescript-go/internal/ast.IsConditionalExpression
func IsConditionalExpression(node *ast.Node) bool
//go:linkname IsConditionalTypeNode github.com/microsoft/typescript-go/internal/ast.IsConditionalTypeNode
func IsConditionalTypeNode(node *ast.Node) bool
//go:linkname IsConstAssertion github.com/microsoft/typescript-go/internal/ast.IsConstAssertion
func IsConstAssertion(node *ast.Node) bool
//go:linkname IsConstTypeReference github.com/microsoft/typescript-go/internal/ast.IsConstTypeReference
func IsConstTypeReference(node *ast.Node) bool
//go:linkname IsConstructSignatureDeclaration github.com/microsoft/typescript-go/internal/ast.IsConstructSignatureDeclaration
func IsConstructSignatureDeclaration(node *ast.Node) bool
//go:linkname IsConstructorDeclaration github.com/microsoft/typescript-go/internal/ast.IsConstructorDeclaration
func IsConstructorDeclaration(node *ast.Node) bool
//go:linkname IsConstructorTypeNode github.com/microsoft/typescript-go/internal/ast.IsConstructorTypeNode
func IsConstructorTypeNode(node *ast.Node) bool
//go:linkname IsContextualKeyword github.com/microsoft/typescript-go/internal/ast.IsContextualKeyword
func IsContextualKeyword(token ast.Kind) bool
//go:linkname IsDeclaration github.com/microsoft/typescript-go/internal/ast.IsDeclaration
func IsDeclaration(node *ast.Node) bool
//go:linkname IsDeclarationName github.com/microsoft/typescript-go/internal/ast.IsDeclarationName
func IsDeclarationName(name *ast.Node) bool
//go:linkname IsDeclarationNameOrImportPropertyName github.com/microsoft/typescript-go/internal/ast.IsDeclarationNameOrImportPropertyName
func IsDeclarationNameOrImportPropertyName(name *ast.Node) bool
//go:linkname IsDeclarationNode github.com/microsoft/typescript-go/internal/ast.IsDeclarationNode
func IsDeclarationNode(node *ast.Node) bool
//go:linkname IsDeclarationStatement github.com/microsoft/typescript-go/internal/ast.IsDeclarationStatement
func IsDeclarationStatement(node *ast.Node) bool
//go:linkname IsDecorator github.com/microsoft/typescript-go/internal/ast.IsDecorator
func IsDecorator(node *ast.Node) bool
//go:linkname IsDefaultClause github.com/microsoft/typescript-go/internal/ast.IsDefaultClause
func IsDefaultClause(node *ast.Node) bool
//go:linkname IsDefaultImport github.com/microsoft/typescript-go/internal/ast.IsDefaultImport
func IsDefaultImport(node *ast.Node) bool
//go:linkname IsDestructuringAssignment github.com/microsoft/typescript-go/internal/ast.IsDestructuringAssignment
func IsDestructuringAssignment(node *ast.Node) bool
//go:linkname IsDottedName github.com/microsoft/typescript-go/internal/ast.IsDottedName
func IsDottedName(node *ast.Node) bool
//go:linkname IsDynamicName github.com/microsoft/typescript-go/internal/ast.IsDynamicName
func IsDynamicName(name *ast.Node) bool
//go:linkname IsEffectiveExternalModule github.com/microsoft/typescript-go/internal/ast.IsEffectiveExternalModule
func IsEffectiveExternalModule(node *ast.SourceFile, compilerOptions *core.CompilerOptions) bool
//go:linkname IsElementAccessExpression github.com/microsoft/typescript-go/internal/ast.IsElementAccessExpression
func IsElementAccessExpression(node *ast.Node) bool
//go:linkname IsEmittableImport github.com/microsoft/typescript-go/internal/ast.IsEmittableImport
func IsEmittableImport(node *ast.Node) bool
//go:linkname IsEmptyStatement github.com/microsoft/typescript-go/internal/ast.IsEmptyStatement
func IsEmptyStatement(node *ast.Node) bool
//go:linkname IsEntityName github.com/microsoft/typescript-go/internal/ast.IsEntityName
func IsEntityName(node *ast.Node) bool
//go:linkname IsEntityNameExpression github.com/microsoft/typescript-go/internal/ast.IsEntityNameExpression
func IsEntityNameExpression(node *ast.Node) bool
//go:linkname IsEntityNameExpressionEx github.com/microsoft/typescript-go/internal/ast.IsEntityNameExpressionEx
func IsEntityNameExpressionEx(node *ast.Node, allowJS bool) bool
//go:linkname IsEnumConst github.com/microsoft/typescript-go/internal/ast.IsEnumConst
func IsEnumConst(node *ast.Node) bool
//go:linkname IsEnumDeclaration github.com/microsoft/typescript-go/internal/ast.IsEnumDeclaration
func IsEnumDeclaration(node *ast.Node) bool
//go:linkname IsEnumMember github.com/microsoft/typescript-go/internal/ast.IsEnumMember
func IsEnumMember(node *ast.Node) bool
//go:linkname IsExclusivelyTypeOnlyImportOrExport github.com/microsoft/typescript-go/internal/ast.IsExclusivelyTypeOnlyImportOrExport
func IsExclusivelyTypeOnlyImportOrExport(node *ast.Node) bool
//go:linkname IsExportAssignment github.com/microsoft/typescript-go/internal/ast.IsExportAssignment
func IsExportAssignment(node *ast.Node) bool
//go:linkname IsExportDeclaration github.com/microsoft/typescript-go/internal/ast.IsExportDeclaration
func IsExportDeclaration(node *ast.Node) bool
//go:linkname IsExportNamespaceAsDefaultDeclaration github.com/microsoft/typescript-go/internal/ast.IsExportNamespaceAsDefaultDeclaration
func IsExportNamespaceAsDefaultDeclaration(node *ast.Node) bool
//go:linkname IsExportSpecifier github.com/microsoft/typescript-go/internal/ast.IsExportSpecifier
func IsExportSpecifier(node *ast.Node) bool
//go:linkname IsExportsIdentifier github.com/microsoft/typescript-go/internal/ast.IsExportsIdentifier
func IsExportsIdentifier(node *ast.Node) bool
//go:linkname IsExpression github.com/microsoft/typescript-go/internal/ast.IsExpression
func IsExpression(node *ast.Node) bool
//go:linkname IsExpressionNode github.com/microsoft/typescript-go/internal/ast.IsExpressionNode
func IsExpressionNode(node *ast.Node) bool
//go:linkname IsExpressionOfOptionalChainRoot github.com/microsoft/typescript-go/internal/ast.IsExpressionOfOptionalChainRoot
func IsExpressionOfOptionalChainRoot(node *ast.Node) bool
//go:linkname IsExpressionStatement github.com/microsoft/typescript-go/internal/ast.IsExpressionStatement
func IsExpressionStatement(node *ast.Node) bool
//go:linkname IsExpressionWithTypeArguments github.com/microsoft/typescript-go/internal/ast.IsExpressionWithTypeArguments
func IsExpressionWithTypeArguments(node *ast.Node) bool
//go:linkname IsExpressionWithTypeArgumentsInClassExtendsClause github.com/microsoft/typescript-go/internal/ast.IsExpressionWithTypeArgumentsInClassExtendsClause
func IsExpressionWithTypeArgumentsInClassExtendsClause(node *ast.Node) bool
//go:linkname IsExternalModule github.com/microsoft/typescript-go/internal/ast.IsExternalModule
func IsExternalModule(file *ast.SourceFile) bool
//go:linkname IsExternalModuleAugmentation github.com/microsoft/typescript-go/internal/ast.IsExternalModuleAugmentation
func IsExternalModuleAugmentation(node *ast.Node) bool
//go:linkname IsExternalModuleImportEqualsDeclaration github.com/microsoft/typescript-go/internal/ast.IsExternalModuleImportEqualsDeclaration
func IsExternalModuleImportEqualsDeclaration(node *ast.Node) bool
//go:linkname IsExternalModuleIndicator github.com/microsoft/typescript-go/internal/ast.IsExternalModuleIndicator
func IsExternalModuleIndicator(node *ast.Statement) bool
//go:linkname IsExternalModuleReference github.com/microsoft/typescript-go/internal/ast.IsExternalModuleReference
func IsExternalModuleReference(node *ast.Node) bool
//go:linkname IsExternalOrCommonJSModule github.com/microsoft/typescript-go/internal/ast.IsExternalOrCommonJSModule
func IsExternalOrCommonJSModule(file *ast.SourceFile) bool
//go:linkname IsForInOrOfStatement github.com/microsoft/typescript-go/internal/ast.IsForInOrOfStatement
func IsForInOrOfStatement(node *ast.Node) bool
//go:linkname IsForInStatement github.com/microsoft/typescript-go/internal/ast.IsForInStatement
func IsForInStatement(node *ast.Node) bool
//go:linkname IsForOfStatement github.com/microsoft/typescript-go/internal/ast.IsForOfStatement
func IsForOfStatement(node *ast.Node) bool
//go:linkname IsForStatement github.com/microsoft/typescript-go/internal/ast.IsForStatement
func IsForStatement(node *ast.Node) bool
//go:linkname IsFunctionBlock github.com/microsoft/typescript-go/internal/ast.IsFunctionBlock
func IsFunctionBlock(node *ast.Node) bool
//go:linkname IsFunctionDeclaration github.com/microsoft/typescript-go/internal/ast.IsFunctionDeclaration
func IsFunctionDeclaration(node *ast.Node) bool
//go:linkname IsFunctionExpression github.com/microsoft/typescript-go/internal/ast.IsFunctionExpression
func IsFunctionExpression(node *ast.Node) bool
//go:linkname IsFunctionExpressionOrArrowFunction github.com/microsoft/typescript-go/internal/ast.IsFunctionExpressionOrArrowFunction
func IsFunctionExpressionOrArrowFunction(node *ast.Node) bool
//go:linkname IsFunctionLike github.com/microsoft/typescript-go/internal/ast.IsFunctionLike
func IsFunctionLike(node *ast.Node) bool
//go:linkname IsFunctionLikeDeclaration github.com/microsoft/typescript-go/internal/ast.IsFunctionLikeDeclaration
func IsFunctionLikeDeclaration(node *ast.Node) bool
//go:linkname IsFunctionLikeKind github.com/microsoft/typescript-go/internal/ast.IsFunctionLikeKind
func IsFunctionLikeKind(kind ast.Kind) bool
//go:linkname IsFunctionLikeOrClassStaticBlockDeclaration github.com/microsoft/typescript-go/internal/ast.IsFunctionLikeOrClassStaticBlockDeclaration
func IsFunctionLikeOrClassStaticBlockDeclaration(node *ast.Node) bool
//go:linkname IsFunctionOrModuleBlock github.com/microsoft/typescript-go/internal/ast.IsFunctionOrModuleBlock
func IsFunctionOrModuleBlock(node *ast.Node) bool
//go:linkname IsFunctionOrSourceFile github.com/microsoft/typescript-go/internal/ast.IsFunctionOrSourceFile
func IsFunctionOrSourceFile(node *ast.Node) bool
//go:linkname IsFunctionTypeNode github.com/microsoft/typescript-go/internal/ast.IsFunctionTypeNode
func IsFunctionTypeNode(node *ast.Node) bool
//go:linkname IsGetAccessorDeclaration github.com/microsoft/typescript-go/internal/ast.IsGetAccessorDeclaration
func IsGetAccessorDeclaration(node *ast.Node) bool
//go:linkname IsGlobalScopeAugmentation github.com/microsoft/typescript-go/internal/ast.IsGlobalScopeAugmentation
func IsGlobalScopeAugmentation(node *ast.Node) bool
//go:linkname IsGlobalSourceFile github.com/microsoft/typescript-go/internal/ast.IsGlobalSourceFile
func IsGlobalSourceFile(node *ast.Node) bool
//go:linkname IsHeritageClause github.com/microsoft/typescript-go/internal/ast.IsHeritageClause
func IsHeritageClause(node *ast.Node) bool
//go:linkname IsIdentifier github.com/microsoft/typescript-go/internal/ast.IsIdentifier
func IsIdentifier(node *ast.Node) bool
//go:linkname IsIdentifierName github.com/microsoft/typescript-go/internal/ast.IsIdentifierName
func IsIdentifierName(node *ast.Node) bool
//go:linkname IsIfStatement github.com/microsoft/typescript-go/internal/ast.IsIfStatement
func IsIfStatement(node *ast.Node) bool
//go:linkname IsImportAttributes github.com/microsoft/typescript-go/internal/ast.IsImportAttributes
func IsImportAttributes(node *ast.Node) bool
//go:linkname IsImportCall github.com/microsoft/typescript-go/internal/ast.IsImportCall
func IsImportCall(node *ast.Node) bool
//go:linkname IsImportClause github.com/microsoft/typescript-go/internal/ast.IsImportClause
func IsImportClause(node *ast.Node) bool
//go:linkname IsImportDeclaration github.com/microsoft/typescript-go/internal/ast.IsImportDeclaration
func IsImportDeclaration(node *ast.Node) bool
//go:linkname IsImportDeclarationOrJSImportDeclaration github.com/microsoft/typescript-go/internal/ast.IsImportDeclarationOrJSImportDeclaration
func IsImportDeclarationOrJSImportDeclaration(node *ast.Node) bool
//go:linkname IsImportEqualsDeclaration github.com/microsoft/typescript-go/internal/ast.IsImportEqualsDeclaration
func IsImportEqualsDeclaration(node *ast.Node) bool
//go:linkname IsImportMeta github.com/microsoft/typescript-go/internal/ast.IsImportMeta
func IsImportMeta(node *ast.Node) bool
//go:linkname IsImportOrExportSpecifier github.com/microsoft/typescript-go/internal/ast.IsImportOrExportSpecifier
func IsImportOrExportSpecifier(node *ast.Node) bool
//go:linkname IsImportSpecifier github.com/microsoft/typescript-go/internal/ast.IsImportSpecifier
func IsImportSpecifier(node *ast.Node) bool
//go:linkname IsImportTypeNode github.com/microsoft/typescript-go/internal/ast.IsImportTypeNode
func IsImportTypeNode(node *ast.Node) bool
//go:linkname IsInExpressionContext github.com/microsoft/typescript-go/internal/ast.IsInExpressionContext
func IsInExpressionContext(node *ast.Node) bool
//go:linkname IsInJSFile github.com/microsoft/typescript-go/internal/ast.IsInJSFile
func IsInJSFile(node *ast.Node) bool
//go:linkname IsInJsonFile github.com/microsoft/typescript-go/internal/ast.IsInJsonFile
func IsInJsonFile(node *ast.Node) bool
//go:linkname IsInTopLevelContext github.com/microsoft/typescript-go/internal/ast.IsInTopLevelContext
func IsInTopLevelContext(node *ast.Node) bool
//go:linkname IsIndexSignatureDeclaration github.com/microsoft/typescript-go/internal/ast.IsIndexSignatureDeclaration
func IsIndexSignatureDeclaration(node *ast.Node) bool
//go:linkname IsIndexedAccessTypeNode github.com/microsoft/typescript-go/internal/ast.IsIndexedAccessTypeNode
func IsIndexedAccessTypeNode(node *ast.Node) bool
//go:linkname IsInferTypeNode github.com/microsoft/typescript-go/internal/ast.IsInferTypeNode
func IsInferTypeNode(node *ast.Node) bool
//go:linkname IsInitializedProperty github.com/microsoft/typescript-go/internal/ast.IsInitializedProperty
func IsInitializedProperty(member *ast.ClassElement) bool
//go:linkname IsInstanceOfExpression github.com/microsoft/typescript-go/internal/ast.IsInstanceOfExpression
func IsInstanceOfExpression(node *ast.Node) bool
//go:linkname IsInterfaceDeclaration github.com/microsoft/typescript-go/internal/ast.IsInterfaceDeclaration
func IsInterfaceDeclaration(node *ast.Node) bool
//go:linkname IsInternalModuleImportEqualsDeclaration github.com/microsoft/typescript-go/internal/ast.IsInternalModuleImportEqualsDeclaration
func IsInternalModuleImportEqualsDeclaration(node *ast.Node) bool
//go:linkname IsIntersectionTypeNode github.com/microsoft/typescript-go/internal/ast.IsIntersectionTypeNode
func IsIntersectionTypeNode(node *ast.Node) bool
//go:linkname IsIterationStatement github.com/microsoft/typescript-go/internal/ast.IsIterationStatement
func IsIterationStatement(node *ast.Node, lookInLabeledStatements bool) bool
//go:linkname IsJSDocAugmentsTag github.com/microsoft/typescript-go/internal/ast.IsJSDocAugmentsTag
func IsJSDocAugmentsTag(node *ast.Node) bool
//go:linkname IsJSDocDeprecatedTag github.com/microsoft/typescript-go/internal/ast.IsJSDocDeprecatedTag
func IsJSDocDeprecatedTag(node *ast.Node) bool
//go:linkname IsJSDocImplementsTag github.com/microsoft/typescript-go/internal/ast.IsJSDocImplementsTag
func IsJSDocImplementsTag(node *ast.Node) bool
//go:linkname IsJSDocImportTag github.com/microsoft/typescript-go/internal/ast.IsJSDocImportTag
func IsJSDocImportTag(node *ast.Node) bool
//go:linkname IsJSDocKind github.com/microsoft/typescript-go/internal/ast.IsJSDocKind
func IsJSDocKind(kind ast.Kind) bool
//go:linkname IsJSDocLinkLike github.com/microsoft/typescript-go/internal/ast.IsJSDocLinkLike
func IsJSDocLinkLike(node *ast.Node) bool
//go:linkname IsJSDocNode github.com/microsoft/typescript-go/internal/ast.IsJSDocNode
func IsJSDocNode(node *ast.Node) bool
//go:linkname IsJSDocNonNullableType github.com/microsoft/typescript-go/internal/ast.IsJSDocNonNullableType
func IsJSDocNonNullableType(node *ast.Node) bool
//go:linkname IsJSDocNullableType github.com/microsoft/typescript-go/internal/ast.IsJSDocNullableType
func IsJSDocNullableType(node *ast.Node) bool
//go:linkname IsJSDocParameterTag github.com/microsoft/typescript-go/internal/ast.IsJSDocParameterTag
func IsJSDocParameterTag(node *ast.Node) bool
//go:linkname IsJSDocReturnTag github.com/microsoft/typescript-go/internal/ast.IsJSDocReturnTag
func IsJSDocReturnTag(node *ast.Node) bool
//go:linkname IsJSDocSingleCommentNode github.com/microsoft/typescript-go/internal/ast.IsJSDocSingleCommentNode
func IsJSDocSingleCommentNode(node *ast.Node) bool
//go:linkname IsJSDocSingleCommentNodeComment github.com/microsoft/typescript-go/internal/ast.IsJSDocSingleCommentNodeComment
func IsJSDocSingleCommentNodeComment(node *ast.Node) bool
//go:linkname IsJSDocSingleCommentNodeList github.com/microsoft/typescript-go/internal/ast.IsJSDocSingleCommentNodeList
func IsJSDocSingleCommentNodeList(nodeList *ast.NodeList) bool
//go:linkname IsJSDocTag github.com/microsoft/typescript-go/internal/ast.IsJSDocTag
func IsJSDocTag(node *ast.Node) bool
//go:linkname IsJSDocTemplateTag github.com/microsoft/typescript-go/internal/ast.IsJSDocTemplateTag
func IsJSDocTemplateTag(n *ast.Node) bool
//go:linkname IsJSDocTypeTag github.com/microsoft/typescript-go/internal/ast.IsJSDocTypeTag
func IsJSDocTypeTag(node *ast.Node) bool
//go:linkname IsJSDocUnknownTag github.com/microsoft/typescript-go/internal/ast.IsJSDocUnknownTag
func IsJSDocUnknownTag(node *ast.Node) bool
//go:linkname IsJSExportAssignment github.com/microsoft/typescript-go/internal/ast.IsJSExportAssignment
func IsJSExportAssignment(node *ast.Node) bool
//go:linkname IsJSTypeAliasDeclaration github.com/microsoft/typescript-go/internal/ast.IsJSTypeAliasDeclaration
func IsJSTypeAliasDeclaration(node *ast.Node) bool
//go:linkname IsJsonSourceFile github.com/microsoft/typescript-go/internal/ast.IsJsonSourceFile
func IsJsonSourceFile(file *ast.SourceFile) bool
//go:linkname IsJsxAttribute github.com/microsoft/typescript-go/internal/ast.IsJsxAttribute
func IsJsxAttribute(node *ast.Node) bool
//go:linkname IsJsxAttributeLike github.com/microsoft/typescript-go/internal/ast.IsJsxAttributeLike
func IsJsxAttributeLike(node *ast.Node) bool
//go:linkname IsJsxAttributes github.com/microsoft/typescript-go/internal/ast.IsJsxAttributes
func IsJsxAttributes(node *ast.Node) bool
//go:linkname IsJsxCallLike github.com/microsoft/typescript-go/internal/ast.IsJsxCallLike
func IsJsxCallLike(node *ast.Node) bool
//go:linkname IsJsxChild github.com/microsoft/typescript-go/internal/ast.IsJsxChild
func IsJsxChild(node *ast.Node) bool
//go:linkname IsJsxClosingElement github.com/microsoft/typescript-go/internal/ast.IsJsxClosingElement
func IsJsxClosingElement(node *ast.Node) bool
//go:linkname IsJsxElement github.com/microsoft/typescript-go/internal/ast.IsJsxElement
func IsJsxElement(node *ast.Node) bool
//go:linkname IsJsxExpression github.com/microsoft/typescript-go/internal/ast.IsJsxExpression
func IsJsxExpression(node *ast.Node) bool
//go:linkname IsJsxFragment github.com/microsoft/typescript-go/internal/ast.IsJsxFragment
func IsJsxFragment(node *ast.Node) bool
//go:linkname IsJsxNamespacedName github.com/microsoft/typescript-go/internal/ast.IsJsxNamespacedName
func IsJsxNamespacedName(node *ast.Node) bool
//go:linkname IsJsxOpeningElement github.com/microsoft/typescript-go/internal/ast.IsJsxOpeningElement
func IsJsxOpeningElement(node *ast.Node) bool
//go:linkname IsJsxOpeningFragment github.com/microsoft/typescript-go/internal/ast.IsJsxOpeningFragment
func IsJsxOpeningFragment(node *ast.Node) bool
//go:linkname IsJsxOpeningLikeElement github.com/microsoft/typescript-go/internal/ast.IsJsxOpeningLikeElement
func IsJsxOpeningLikeElement(node *ast.Node) bool
//go:linkname IsJsxSelfClosingElement github.com/microsoft/typescript-go/internal/ast.IsJsxSelfClosingElement
func IsJsxSelfClosingElement(node *ast.Node) bool
//go:linkname IsJsxSpreadAttribute github.com/microsoft/typescript-go/internal/ast.IsJsxSpreadAttribute
func IsJsxSpreadAttribute(node *ast.Node) bool
//go:linkname IsJsxTagName github.com/microsoft/typescript-go/internal/ast.IsJsxTagName
func IsJsxTagName(node *ast.Node) bool
//go:linkname IsJsxText github.com/microsoft/typescript-go/internal/ast.IsJsxText
func IsJsxText(node *ast.Node) bool
//go:linkname IsJumpStatementTarget github.com/microsoft/typescript-go/internal/ast.IsJumpStatementTarget
func IsJumpStatementTarget(node *ast.Node) bool
//go:linkname IsKeywordKind github.com/microsoft/typescript-go/internal/ast.IsKeywordKind
func IsKeywordKind(token ast.Kind) bool
//go:linkname IsLabelName github.com/microsoft/typescript-go/internal/ast.IsLabelName
func IsLabelName(node *ast.Node) bool
//go:linkname IsLabelOfLabeledStatement github.com/microsoft/typescript-go/internal/ast.IsLabelOfLabeledStatement
func IsLabelOfLabeledStatement(node *ast.Node) bool
//go:linkname IsLabeledStatement github.com/microsoft/typescript-go/internal/ast.IsLabeledStatement
func IsLabeledStatement(node *ast.Node) bool
//go:linkname IsLateVisibilityPaintedStatement github.com/microsoft/typescript-go/internal/ast.IsLateVisibilityPaintedStatement
func IsLateVisibilityPaintedStatement(node *ast.Node) bool
//go:linkname IsLeftHandSideExpression github.com/microsoft/typescript-go/internal/ast.IsLeftHandSideExpression
func IsLeftHandSideExpression(node *ast.Node) bool
//go:linkname IsLet github.com/microsoft/typescript-go/internal/ast.IsLet
func IsLet(node *ast.Node) bool
//go:linkname IsLiteralComputedPropertyDeclarationName github.com/microsoft/typescript-go/internal/ast.IsLiteralComputedPropertyDeclarationName
func IsLiteralComputedPropertyDeclarationName(node *ast.Node) bool
//go:linkname IsLiteralExpression github.com/microsoft/typescript-go/internal/ast.IsLiteralExpression
func IsLiteralExpression(node *ast.Node) bool
//go:linkname IsLiteralImportTypeNode github.com/microsoft/typescript-go/internal/ast.IsLiteralImportTypeNode
func IsLiteralImportTypeNode(node *ast.Node) bool
//go:linkname IsLiteralKind github.com/microsoft/typescript-go/internal/ast.IsLiteralKind
func IsLiteralKind(kind ast.Kind) bool
//go:linkname IsLiteralLikeElementAccess github.com/microsoft/typescript-go/internal/ast.IsLiteralLikeElementAccess
func IsLiteralLikeElementAccess(node *ast.Node) bool
//go:linkname IsLiteralTypeNode github.com/microsoft/typescript-go/internal/ast.IsLiteralTypeNode
func IsLiteralTypeNode(node *ast.Node) bool
//go:linkname IsLocalsContainer github.com/microsoft/typescript-go/internal/ast.IsLocalsContainer
func IsLocalsContainer(node *ast.Node) bool
//go:linkname IsLogicalBinaryOperator github.com/microsoft/typescript-go/internal/ast.IsLogicalBinaryOperator
func IsLogicalBinaryOperator(token ast.Kind) bool
//go:linkname IsLogicalExpression github.com/microsoft/typescript-go/internal/ast.IsLogicalExpression
func IsLogicalExpression(node *ast.Node) bool
//go:linkname IsLogicalOrCoalescingAssignmentExpression github.com/microsoft/typescript-go/internal/ast.IsLogicalOrCoalescingAssignmentExpression
func IsLogicalOrCoalescingAssignmentExpression(expr *ast.Node) bool
//go:linkname IsLogicalOrCoalescingAssignmentOperator github.com/microsoft/typescript-go/internal/ast.IsLogicalOrCoalescingAssignmentOperator
func IsLogicalOrCoalescingAssignmentOperator(token ast.Kind) bool
//go:linkname IsLogicalOrCoalescingBinaryExpression github.com/microsoft/typescript-go/internal/ast.IsLogicalOrCoalescingBinaryExpression
func IsLogicalOrCoalescingBinaryExpression(expr *ast.Node) bool
//go:linkname IsLogicalOrCoalescingBinaryOperator github.com/microsoft/typescript-go/internal/ast.IsLogicalOrCoalescingBinaryOperator
func IsLogicalOrCoalescingBinaryOperator(token ast.Kind) bool
//go:linkname IsMappedTypeNode github.com/microsoft/typescript-go/internal/ast.IsMappedTypeNode
func IsMappedTypeNode(node *ast.Node) bool
//go:linkname IsMemberName github.com/microsoft/typescript-go/internal/ast.IsMemberName
func IsMemberName(node *ast.Node) bool
//go:linkname IsMetaProperty github.com/microsoft/typescript-go/internal/ast.IsMetaProperty
func IsMetaProperty(node *ast.Node) bool
//go:linkname IsMethodDeclaration github.com/microsoft/typescript-go/internal/ast.IsMethodDeclaration
func IsMethodDeclaration(node *ast.Node) bool
//go:linkname IsMethodSignatureDeclaration github.com/microsoft/typescript-go/internal/ast.IsMethodSignatureDeclaration
func IsMethodSignatureDeclaration(node *ast.Node) bool
//go:linkname IsModifier github.com/microsoft/typescript-go/internal/ast.IsModifier
func IsModifier(node *ast.Node) bool
//go:linkname IsModifierKind github.com/microsoft/typescript-go/internal/ast.IsModifierKind
func IsModifierKind(token ast.Kind) bool
//go:linkname IsModifierLike github.com/microsoft/typescript-go/internal/ast.IsModifierLike
func IsModifierLike(node *ast.Node) bool
//go:linkname IsModuleAugmentationExternal github.com/microsoft/typescript-go/internal/ast.IsModuleAugmentationExternal
func IsModuleAugmentationExternal(node *ast.Node) bool
//go:linkname IsModuleBlock github.com/microsoft/typescript-go/internal/ast.IsModuleBlock
func IsModuleBlock(node *ast.Node) bool
//go:linkname IsModuleDeclaration github.com/microsoft/typescript-go/internal/ast.IsModuleDeclaration
func IsModuleDeclaration(node *ast.Node) bool
//go:linkname IsModuleExportsAccessExpression github.com/microsoft/typescript-go/internal/ast.IsModuleExportsAccessExpression
func IsModuleExportsAccessExpression(node *ast.Node) bool
//go:linkname IsModuleIdentifier github.com/microsoft/typescript-go/internal/ast.IsModuleIdentifier
func IsModuleIdentifier(node *ast.Node) bool
//go:linkname IsModuleOrEnumDeclaration github.com/microsoft/typescript-go/internal/ast.IsModuleOrEnumDeclaration
func IsModuleOrEnumDeclaration(node *ast.Node) bool
//go:linkname IsModuleWithStringLiteralName github.com/microsoft/typescript-go/internal/ast.IsModuleWithStringLiteralName
func IsModuleWithStringLiteralName(node *ast.Node) bool
//go:linkname IsNamedExports github.com/microsoft/typescript-go/internal/ast.IsNamedExports
func IsNamedExports(node *ast.Node) bool
//go:linkname IsNamedImports github.com/microsoft/typescript-go/internal/ast.IsNamedImports
func IsNamedImports(node *ast.Node) bool
//go:linkname IsNamedTupleMember github.com/microsoft/typescript-go/internal/ast.IsNamedTupleMember
func IsNamedTupleMember(node *ast.Node) bool
//go:linkname IsNamespaceExport github.com/microsoft/typescript-go/internal/ast.IsNamespaceExport
func IsNamespaceExport(node *ast.Node) bool
//go:linkname IsNamespaceExportDeclaration github.com/microsoft/typescript-go/internal/ast.IsNamespaceExportDeclaration
func IsNamespaceExportDeclaration(node *ast.Node) bool
//go:linkname IsNamespaceImport github.com/microsoft/typescript-go/internal/ast.IsNamespaceImport
func IsNamespaceImport(node *ast.Node) bool
//go:linkname IsNewExpression github.com/microsoft/typescript-go/internal/ast.IsNewExpression
func IsNewExpression(node *ast.Node) bool
//go:linkname IsNodeDescendantOf github.com/microsoft/typescript-go/internal/ast.IsNodeDescendantOf
func IsNodeDescendantOf(node *ast.Node, ancestor *ast.Node) bool
//go:linkname IsNonLocalAlias github.com/microsoft/typescript-go/internal/ast.IsNonLocalAlias
func IsNonLocalAlias(symbol *ast.Symbol, excludes ast.SymbolFlags) bool
//go:linkname IsNonNullExpression github.com/microsoft/typescript-go/internal/ast.IsNonNullExpression
func IsNonNullExpression(node *ast.Node) bool
//go:linkname IsNonWhitespaceToken github.com/microsoft/typescript-go/internal/ast.IsNonWhitespaceToken
func IsNonWhitespaceToken(node *ast.Node) bool
//go:linkname IsNotEmittedStatement github.com/microsoft/typescript-go/internal/ast.IsNotEmittedStatement
func IsNotEmittedStatement(node *ast.Node) bool
//go:linkname IsNotEmittedTypeElement github.com/microsoft/typescript-go/internal/ast.IsNotEmittedTypeElement
func IsNotEmittedTypeElement(node *ast.Node) bool
//go:linkname IsNullishCoalesce github.com/microsoft/typescript-go/internal/ast.IsNullishCoalesce
func IsNullishCoalesce(node *ast.Node) bool
//go:linkname IsNumericLiteral github.com/microsoft/typescript-go/internal/ast.IsNumericLiteral
func IsNumericLiteral(node *ast.Node) bool
//go:linkname IsObjectBindingPattern github.com/microsoft/typescript-go/internal/ast.IsObjectBindingPattern
func IsObjectBindingPattern(node *ast.Node) bool
//go:linkname IsObjectLiteralElement github.com/microsoft/typescript-go/internal/ast.IsObjectLiteralElement
func IsObjectLiteralElement(node *ast.Node) bool
//go:linkname IsObjectLiteralExpression github.com/microsoft/typescript-go/internal/ast.IsObjectLiteralExpression
func IsObjectLiteralExpression(node *ast.Node) bool
//go:linkname IsObjectLiteralMethod github.com/microsoft/typescript-go/internal/ast.IsObjectLiteralMethod
func IsObjectLiteralMethod(node *ast.Node) bool
//go:linkname IsObjectLiteralOrClassExpressionMethodOrAccessor github.com/microsoft/typescript-go/internal/ast.IsObjectLiteralOrClassExpressionMethodOrAccessor
func IsObjectLiteralOrClassExpressionMethodOrAccessor(node *ast.Node) bool
//go:linkname IsObjectTypeDeclaration github.com/microsoft/typescript-go/internal/ast.IsObjectTypeDeclaration
func IsObjectTypeDeclaration(node *ast.Node) bool
//go:linkname IsOmittedExpression github.com/microsoft/typescript-go/internal/ast.IsOmittedExpression
func IsOmittedExpression(node *ast.Node) bool
//go:linkname IsOptionalChain github.com/microsoft/typescript-go/internal/ast.IsOptionalChain
func IsOptionalChain(node *ast.Node) bool
//go:linkname IsOptionalChainRoot github.com/microsoft/typescript-go/internal/ast.IsOptionalChainRoot
func IsOptionalChainRoot(node *ast.Expression) bool
//go:linkname IsOptionalTypeNode github.com/microsoft/typescript-go/internal/ast.IsOptionalTypeNode
func IsOptionalTypeNode(node *ast.Node) bool
//go:linkname IsOuterExpression github.com/microsoft/typescript-go/internal/ast.IsOuterExpression
func IsOuterExpression(node *ast.Expression, kinds ast.OuterExpressionKinds) bool
//go:linkname IsOutermostOptionalChain github.com/microsoft/typescript-go/internal/ast.IsOutermostOptionalChain
func IsOutermostOptionalChain(node *ast.Expression) bool
//go:linkname IsParameter github.com/microsoft/typescript-go/internal/ast.IsParameter
func IsParameter(node *ast.Node) bool
//go:linkname IsParameterLike github.com/microsoft/typescript-go/internal/ast.IsParameterLike
func IsParameterLike(node *ast.Node) bool
//go:linkname IsParameterPropertyDeclaration github.com/microsoft/typescript-go/internal/ast.IsParameterPropertyDeclaration
func IsParameterPropertyDeclaration(node *ast.Node, parent *ast.Node) bool
//go:linkname IsParameterPropertyModifier github.com/microsoft/typescript-go/internal/ast.IsParameterPropertyModifier
func IsParameterPropertyModifier(kind ast.Kind) bool
//go:linkname IsParenthesizedExpression github.com/microsoft/typescript-go/internal/ast.IsParenthesizedExpression
func IsParenthesizedExpression(node *ast.Node) bool
//go:linkname IsParenthesizedTypeNode github.com/microsoft/typescript-go/internal/ast.IsParenthesizedTypeNode
func IsParenthesizedTypeNode(node *ast.Node) bool
//go:linkname IsParseTreeNode github.com/microsoft/typescript-go/internal/ast.IsParseTreeNode
func IsParseTreeNode(node *ast.Node) bool
//go:linkname IsPartOfExclusivelyTypeOnlyImportOrExportDeclaration github.com/microsoft/typescript-go/internal/ast.IsPartOfExclusivelyTypeOnlyImportOrExportDeclaration
func IsPartOfExclusivelyTypeOnlyImportOrExportDeclaration(node *ast.Node) bool
//go:linkname IsPartOfParameterDeclaration github.com/microsoft/typescript-go/internal/ast.IsPartOfParameterDeclaration
func IsPartOfParameterDeclaration(node *ast.Node) bool
//go:linkname IsPartOfTypeNode github.com/microsoft/typescript-go/internal/ast.IsPartOfTypeNode
func IsPartOfTypeNode(node *ast.Node) bool
//go:linkname IsPartOfTypeOnlyImportOrExportDeclaration github.com/microsoft/typescript-go/internal/ast.IsPartOfTypeOnlyImportOrExportDeclaration
func IsPartOfTypeOnlyImportOrExportDeclaration(node *ast.Node) bool
//go:linkname IsPartOfTypeQuery github.com/microsoft/typescript-go/internal/ast.IsPartOfTypeQuery
func IsPartOfTypeQuery(node *ast.Node) bool
//go:linkname IsPartiallyEmittedExpression github.com/microsoft/typescript-go/internal/ast.IsPartiallyEmittedExpression
func IsPartiallyEmittedExpression(node *ast.Node) bool
//go:linkname IsPlainJSFile github.com/microsoft/typescript-go/internal/ast.IsPlainJSFile
func IsPlainJSFile(file *ast.SourceFile, checkJs core.Tristate) bool
//go:linkname IsPrefixUnaryExpression github.com/microsoft/typescript-go/internal/ast.IsPrefixUnaryExpression
func IsPrefixUnaryExpression(node *ast.Node) bool
//go:linkname IsPrivateIdentifier github.com/microsoft/typescript-go/internal/ast.IsPrivateIdentifier
func IsPrivateIdentifier(node *ast.Node) bool
//go:linkname IsPrivateIdentifierClassElementDeclaration github.com/microsoft/typescript-go/internal/ast.IsPrivateIdentifierClassElementDeclaration
func IsPrivateIdentifierClassElementDeclaration(node *ast.Node) bool
//go:linkname IsPrologueDirective github.com/microsoft/typescript-go/internal/ast.IsPrologueDirective
func IsPrologueDirective(node *ast.Node) bool
//go:linkname IsPropertyAccessEntityNameExpression github.com/microsoft/typescript-go/internal/ast.IsPropertyAccessEntityNameExpression
func IsPropertyAccessEntityNameExpression(node *ast.Node, allowJS bool) bool
//go:linkname IsPropertyAccessExpression github.com/microsoft/typescript-go/internal/ast.IsPropertyAccessExpression
func IsPropertyAccessExpression(node *ast.Node) bool
//go:linkname IsPropertyAccessOrQualifiedName github.com/microsoft/typescript-go/internal/ast.IsPropertyAccessOrQualifiedName
func IsPropertyAccessOrQualifiedName(node *ast.Node) bool
//go:linkname IsPropertyAssignment github.com/microsoft/typescript-go/internal/ast.IsPropertyAssignment
func IsPropertyAssignment(node *ast.Node) bool
//go:linkname IsPropertyDeclaration github.com/microsoft/typescript-go/internal/ast.IsPropertyDeclaration
func IsPropertyDeclaration(node *ast.Node) bool
//go:linkname IsPropertyName github.com/microsoft/typescript-go/internal/ast.IsPropertyName
func IsPropertyName(node *ast.Node) bool
//go:linkname IsPropertyNameLiteral github.com/microsoft/typescript-go/internal/ast.IsPropertyNameLiteral
func IsPropertyNameLiteral(node *ast.Node) bool
//go:linkname IsPropertySignatureDeclaration github.com/microsoft/typescript-go/internal/ast.IsPropertySignatureDeclaration
func IsPropertySignatureDeclaration(node *ast.Node) bool
//go:linkname IsPunctuationKind github.com/microsoft/typescript-go/internal/ast.IsPunctuationKind
func IsPunctuationKind(token ast.Kind) bool
//go:linkname IsPushOrUnshiftIdentifier github.com/microsoft/typescript-go/internal/ast.IsPushOrUnshiftIdentifier
func IsPushOrUnshiftIdentifier(node *ast.Node) bool
//go:linkname IsQualifiedName github.com/microsoft/typescript-go/internal/ast.IsQualifiedName
func IsQualifiedName(node *ast.Node) bool
//go:linkname IsQuestionToken github.com/microsoft/typescript-go/internal/ast.IsQuestionToken
func IsQuestionToken(node *ast.Node) bool
//go:linkname IsRegularExpressionLiteral github.com/microsoft/typescript-go/internal/ast.IsRegularExpressionLiteral
func IsRegularExpressionLiteral(node *ast.Node) bool
//go:linkname IsRequireCall github.com/microsoft/typescript-go/internal/ast.IsRequireCall
func IsRequireCall(node *ast.Node, requireStringLiteralLikeArgument bool) bool
//go:linkname IsResolutionModeOverrideHost github.com/microsoft/typescript-go/internal/ast.IsResolutionModeOverrideHost
func IsResolutionModeOverrideHost(node *ast.Node) bool
//go:linkname IsRestTypeNode github.com/microsoft/typescript-go/internal/ast.IsRestTypeNode
func IsRestTypeNode(node *ast.Node) bool
//go:linkname IsReturnStatement github.com/microsoft/typescript-go/internal/ast.IsReturnStatement
func IsReturnStatement(node *ast.Node) bool
//go:linkname IsRightSideOfQualifiedNameOrPropertyAccess github.com/microsoft/typescript-go/internal/ast.IsRightSideOfQualifiedNameOrPropertyAccess
func IsRightSideOfQualifiedNameOrPropertyAccess(node *ast.Node) bool
//go:linkname IsSatisfiesExpression github.com/microsoft/typescript-go/internal/ast.IsSatisfiesExpression
func IsSatisfiesExpression(node *ast.Node) bool
//go:linkname IsSetAccessorDeclaration github.com/microsoft/typescript-go/internal/ast.IsSetAccessorDeclaration
func IsSetAccessorDeclaration(node *ast.Node) bool
//go:linkname IsShorthandPropertyAssignment github.com/microsoft/typescript-go/internal/ast.IsShorthandPropertyAssignment
func IsShorthandPropertyAssignment(node *ast.Node) bool
//go:linkname IsSignedNumericLiteral github.com/microsoft/typescript-go/internal/ast.IsSignedNumericLiteral
func IsSignedNumericLiteral(node *ast.Node) bool
//go:linkname IsSourceFile github.com/microsoft/typescript-go/internal/ast.IsSourceFile
func IsSourceFile(node *ast.Node) bool
//go:linkname IsSourceFileJS github.com/microsoft/typescript-go/internal/ast.IsSourceFileJS
func IsSourceFileJS(file *ast.SourceFile) bool
//go:linkname IsSpreadAssignment github.com/microsoft/typescript-go/internal/ast.IsSpreadAssignment
func IsSpreadAssignment(node *ast.Node) bool
//go:linkname IsSpreadElement github.com/microsoft/typescript-go/internal/ast.IsSpreadElement
func IsSpreadElement(node *ast.Node) bool
//go:linkname IsStatement github.com/microsoft/typescript-go/internal/ast.IsStatement
func IsStatement(node *ast.Node) bool
//go:linkname IsStatementButNotDeclaration github.com/microsoft/typescript-go/internal/ast.IsStatementButNotDeclaration
func IsStatementButNotDeclaration(node *ast.Node) bool
//go:linkname IsStatic github.com/microsoft/typescript-go/internal/ast.IsStatic
func IsStatic(node *ast.Node) bool
//go:linkname IsStringLiteral github.com/microsoft/typescript-go/internal/ast.IsStringLiteral
func IsStringLiteral(node *ast.Node) bool
//go:linkname IsStringLiteralLike github.com/microsoft/typescript-go/internal/ast.IsStringLiteralLike
func IsStringLiteralLike(node *ast.Node) bool
//go:linkname IsStringOrNumericLiteralLike github.com/microsoft/typescript-go/internal/ast.IsStringOrNumericLiteralLike
func IsStringOrNumericLiteralLike(node *ast.Node) bool
//go:linkname IsStringTextContainingNode github.com/microsoft/typescript-go/internal/ast.IsStringTextContainingNode
func IsStringTextContainingNode(node *ast.Node) bool
//go:linkname IsSuperCall github.com/microsoft/typescript-go/internal/ast.IsSuperCall
func IsSuperCall(node *ast.Node) bool
//go:linkname IsSwitchStatement github.com/microsoft/typescript-go/internal/ast.IsSwitchStatement
func IsSwitchStatement(node *ast.Node) bool
//go:linkname IsSyntheticExpression github.com/microsoft/typescript-go/internal/ast.IsSyntheticExpression
func IsSyntheticExpression(node *ast.Node) bool
//go:linkname IsSyntheticReferenceExpression github.com/microsoft/typescript-go/internal/ast.IsSyntheticReferenceExpression
func IsSyntheticReferenceExpression(node *ast.Node) bool
//go:linkname IsTaggedTemplateExpression github.com/microsoft/typescript-go/internal/ast.IsTaggedTemplateExpression
func IsTaggedTemplateExpression(node *ast.Node) bool
//go:linkname IsTemplateExpression github.com/microsoft/typescript-go/internal/ast.IsTemplateExpression
func IsTemplateExpression(node *ast.Node) bool
//go:linkname IsTemplateLiteralKind github.com/microsoft/typescript-go/internal/ast.IsTemplateLiteralKind
func IsTemplateLiteralKind(kind ast.Kind) bool
//go:linkname IsTemplateLiteralToken github.com/microsoft/typescript-go/internal/ast.IsTemplateLiteralToken
func IsTemplateLiteralToken(node *ast.Node) bool
//go:linkname IsTemplateLiteralTypeSpan github.com/microsoft/typescript-go/internal/ast.IsTemplateLiteralTypeSpan
func IsTemplateLiteralTypeSpan(node *ast.Node) bool
//go:linkname IsTemplateSpan github.com/microsoft/typescript-go/internal/ast.IsTemplateSpan
func IsTemplateSpan(node *ast.Node) bool
//go:linkname IsThisIdentifier github.com/microsoft/typescript-go/internal/ast.IsThisIdentifier
func IsThisIdentifier(node *ast.Node) bool
//go:linkname IsThisInTypeQuery github.com/microsoft/typescript-go/internal/ast.IsThisInTypeQuery
func IsThisInTypeQuery(node *ast.Node) bool
//go:linkname IsThisParameter github.com/microsoft/typescript-go/internal/ast.IsThisParameter
func IsThisParameter(node *ast.Node) bool
//go:linkname IsThisTypeNode github.com/microsoft/typescript-go/internal/ast.IsThisTypeNode
func IsThisTypeNode(node *ast.Node) bool
//go:linkname IsTokenKind github.com/microsoft/typescript-go/internal/ast.IsTokenKind
func IsTokenKind(token ast.Kind) bool
//go:linkname IsTrivia github.com/microsoft/typescript-go/internal/ast.IsTrivia
func IsTrivia(token ast.Kind) bool
//go:linkname IsTryStatement github.com/microsoft/typescript-go/internal/ast.IsTryStatement
func IsTryStatement(node *ast.Node) bool
//go:linkname IsTupleTypeNode github.com/microsoft/typescript-go/internal/ast.IsTupleTypeNode
func IsTupleTypeNode(node *ast.Node) bool
//go:linkname IsTypeAliasDeclaration github.com/microsoft/typescript-go/internal/ast.IsTypeAliasDeclaration
func IsTypeAliasDeclaration(node *ast.Node) bool
//go:linkname IsTypeDeclaration github.com/microsoft/typescript-go/internal/ast.IsTypeDeclaration
func IsTypeDeclaration(node *ast.Node) bool
//go:linkname IsTypeDeclarationName github.com/microsoft/typescript-go/internal/ast.IsTypeDeclarationName
func IsTypeDeclarationName(name *ast.Node) bool
//go:linkname IsTypeElement github.com/microsoft/typescript-go/internal/ast.IsTypeElement
func IsTypeElement(node *ast.Node) bool
//go:linkname IsTypeKeywordToken github.com/microsoft/typescript-go/internal/ast.IsTypeKeywordToken
func IsTypeKeywordToken(node *ast.Node) bool
//go:linkname IsTypeLiteralNode github.com/microsoft/typescript-go/internal/ast.IsTypeLiteralNode
func IsTypeLiteralNode(node *ast.Node) bool
//go:linkname IsTypeNode github.com/microsoft/typescript-go/internal/ast.IsTypeNode
func IsTypeNode(node *ast.Node) bool
//go:linkname IsTypeNodeKind github.com/microsoft/typescript-go/internal/ast.IsTypeNodeKind
func IsTypeNodeKind(kind ast.Kind) bool
//go:linkname IsTypeOfExpression github.com/microsoft/typescript-go/internal/ast.IsTypeOfExpression
func IsTypeOfExpression(node *ast.Node) bool
//go:linkname IsTypeOnlyImportDeclaration github.com/microsoft/typescript-go/internal/ast.IsTypeOnlyImportDeclaration
func IsTypeOnlyImportDeclaration(node *ast.Node) bool
//go:linkname IsTypeOnlyImportOrExportDeclaration github.com/microsoft/typescript-go/internal/ast.IsTypeOnlyImportOrExportDeclaration
func IsTypeOnlyImportOrExportDeclaration(node *ast.Node) bool
//go:linkname IsTypeOperatorNode github.com/microsoft/typescript-go/internal/ast.IsTypeOperatorNode
func IsTypeOperatorNode(node *ast.Node) bool
//go:linkname IsTypeOrJSTypeAliasDeclaration github.com/microsoft/typescript-go/internal/ast.IsTypeOrJSTypeAliasDeclaration
func IsTypeOrJSTypeAliasDeclaration(node *ast.Node) bool
//go:linkname IsTypeParameterDeclaration github.com/microsoft/typescript-go/internal/ast.IsTypeParameterDeclaration
func IsTypeParameterDeclaration(node *ast.Node) bool
//go:linkname IsTypePredicateNode github.com/microsoft/typescript-go/internal/ast.IsTypePredicateNode
func IsTypePredicateNode(node *ast.Node) bool
//go:linkname IsTypeQueryNode github.com/microsoft/typescript-go/internal/ast.IsTypeQueryNode
func IsTypeQueryNode(node *ast.Node) bool
//go:linkname IsTypeReferenceNode github.com/microsoft/typescript-go/internal/ast.IsTypeReferenceNode
func IsTypeReferenceNode(node *ast.Node) bool
//go:linkname IsTypeReferenceType github.com/microsoft/typescript-go/internal/ast.IsTypeReferenceType
func IsTypeReferenceType(node *ast.Node) bool
//go:linkname IsUnaryExpression github.com/microsoft/typescript-go/internal/ast.IsUnaryExpression
func IsUnaryExpression(node *ast.Node) bool
//go:linkname IsUnterminatedLiteral github.com/microsoft/typescript-go/internal/ast.IsUnterminatedLiteral
func IsUnterminatedLiteral(node *ast.Node) bool
//go:linkname IsValidTypeOnlyAliasUseSite github.com/microsoft/typescript-go/internal/ast.IsValidTypeOnlyAliasUseSite
func IsValidTypeOnlyAliasUseSite(useSite *ast.Node) bool
//go:linkname IsVarAwaitUsing github.com/microsoft/typescript-go/internal/ast.IsVarAwaitUsing
func IsVarAwaitUsing(node *ast.Node) bool
//go:linkname IsVarConst github.com/microsoft/typescript-go/internal/ast.IsVarConst
func IsVarConst(node *ast.Node) bool
//go:linkname IsVarConstLike github.com/microsoft/typescript-go/internal/ast.IsVarConstLike
func IsVarConstLike(node *ast.Node) bool
//go:linkname IsVarLet github.com/microsoft/typescript-go/internal/ast.IsVarLet
func IsVarLet(node *ast.Node) bool
//go:linkname IsVarUsing github.com/microsoft/typescript-go/internal/ast.IsVarUsing
func IsVarUsing(node *ast.Node) bool
//go:linkname IsVariableDeclaration github.com/microsoft/typescript-go/internal/ast.IsVariableDeclaration
func IsVariableDeclaration(node *ast.Node) bool
//go:linkname IsVariableDeclarationInitializedToRequire github.com/microsoft/typescript-go/internal/ast.IsVariableDeclarationInitializedToRequire
func IsVariableDeclarationInitializedToRequire(node *ast.Node) bool
//go:linkname IsVariableDeclarationList github.com/microsoft/typescript-go/internal/ast.IsVariableDeclarationList
func IsVariableDeclarationList(node *ast.Node) bool
//go:linkname IsVariableLike github.com/microsoft/typescript-go/internal/ast.IsVariableLike
func IsVariableLike(node *ast.Node) bool
//go:linkname IsVariableStatement github.com/microsoft/typescript-go/internal/ast.IsVariableStatement
func IsVariableStatement(node *ast.Node) bool
//go:linkname IsVoidExpression github.com/microsoft/typescript-go/internal/ast.IsVoidExpression
func IsVoidExpression(node *ast.Node) bool
//go:linkname IsWhitespaceOnlyJsxText github.com/microsoft/typescript-go/internal/ast.IsWhitespaceOnlyJsxText
func IsWhitespaceOnlyJsxText(node *ast.Node) bool
type JSDeclarationKind = ast.JSDeclarationKind
const JSDeclarationKindExportsProperty = ast.JSDeclarationKindExportsProperty
const JSDeclarationKindModuleExports = ast.JSDeclarationKindModuleExports
const JSDeclarationKindNone = ast.JSDeclarationKindNone
const JSDeclarationKindProperty = ast.JSDeclarationKindProperty
const JSDeclarationKindPrototypeProperty = ast.JSDeclarationKindPrototypeProperty
const JSDeclarationKindThisProperty = ast.JSDeclarationKindThisProperty
type JSDoc = ast.JSDoc
type JSDocAllType = ast.JSDocAllType
type JSDocAugmentsTag = ast.JSDocAugmentsTag
type JSDocCallbackTag = ast.JSDocCallbackTag
type JSDocComment = ast.JSDocComment
type JSDocCommentBase = ast.JSDocCommentBase
type JSDocDeprecatedTag = ast.JSDocDeprecatedTag
type JSDocImplementsTag = ast.JSDocImplementsTag
type JSDocImportTag = ast.JSDocImportTag
type JSDocLink = ast.JSDocLink
type JSDocLinkCode = ast.JSDocLinkCode
type JSDocLinkPlain = ast.JSDocLinkPlain
type JSDocNameReference = ast.JSDocNameReference
type JSDocNode = ast.JSDocNode
type JSDocNonNullableType = ast.JSDocNonNullableType
type JSDocNullableType = ast.JSDocNullableType
type JSDocOptionalType = ast.JSDocOptionalType
type JSDocOverloadTag = ast.JSDocOverloadTag
type JSDocOverrideTag = ast.JSDocOverrideTag
type JSDocParameterOrPropertyTag = ast.JSDocParameterOrPropertyTag
type JSDocParameterTag = ast.JSDocParameterTag
type JSDocParsingMode = ast.JSDocParsingMode
const JSDocParsingModeParseAll = ast.JSDocParsingModeParseAll
const JSDocParsingModeParseForTypeErrors = ast.JSDocParsingModeParseForTypeErrors
const JSDocParsingModeParseForTypeInfo = ast.JSDocParsingModeParseForTypeInfo
const JSDocParsingModeParseNone = ast.JSDocParsingModeParseNone
type JSDocPrivateTag = ast.JSDocPrivateTag
type JSDocPropertyTag = ast.JSDocPropertyTag
type JSDocProtectedTag = ast.JSDocProtectedTag
type JSDocPublicTag = ast.JSDocPublicTag
type JSDocReadonlyTag = ast.JSDocReadonlyTag
type JSDocReturnTag = ast.JSDocReturnTag
type JSDocSatisfiesTag = ast.JSDocSatisfiesTag
type JSDocSeeTag = ast.JSDocSeeTag
type JSDocSignature = ast.JSDocSignature
type JSDocTag = ast.JSDocTag
type JSDocTagBase = ast.JSDocTagBase
type JSDocTemplateTag = ast.JSDocTemplateTag
type JSDocText = ast.JSDocText
type JSDocThisTag = ast.JSDocThisTag
type JSDocTypeExpression = ast.JSDocTypeExpression
type JSDocTypeLiteral = ast.JSDocTypeLiteral
type JSDocTypeTag = ast.JSDocTypeTag
type JSDocTypedefTag = ast.JSDocTypedefTag
type JSDocUnknownTag = ast.JSDocUnknownTag
type JSDocVariadicType = ast.JSDocVariadicType
type JsxAttribute = ast.JsxAttribute
type JsxAttributeLike = ast.JsxAttributeLike
type JsxAttributeList = ast.JsxAttributeList
type JsxAttributeName = ast.JsxAttributeName
type JsxAttributeValue = ast.JsxAttributeValue
type JsxAttributes = ast.JsxAttributes
type JsxAttributesNode = ast.JsxAttributesNode
type JsxChild = ast.JsxChild
type JsxChildList = ast.JsxChildList
type JsxClosingElement = ast.JsxClosingElement
type JsxClosingElementNode = ast.JsxClosingElementNode
type JsxClosingFragment = ast.JsxClosingFragment
type JsxClosingFragmentNode = ast.JsxClosingFragmentNode
type JsxElement = ast.JsxElement
type JsxExpression = ast.JsxExpression
type JsxFragment = ast.JsxFragment
type JsxNamespacedName = ast.JsxNamespacedName
type JsxOpeningElement = ast.JsxOpeningElement
type JsxOpeningElementNode = ast.JsxOpeningElementNode
type JsxOpeningFragment = ast.JsxOpeningFragment
type JsxOpeningFragmentNode = ast.JsxOpeningFragmentNode
type JsxOpeningLikeElement = ast.JsxOpeningLikeElement
type JsxSelfClosingElement = ast.JsxSelfClosingElement
type JsxSpreadAttribute = ast.JsxSpreadAttribute
type JsxTagNameExpression = ast.JsxTagNameExpression
type JsxText = ast.JsxText
type KeywordExpression = ast.KeywordExpression
type KeywordTypeNode = ast.KeywordTypeNode
type Kind = ast.Kind
const KindAbstractKeyword = ast.KindAbstractKeyword
const KindAccessorKeyword = ast.KindAccessorKeyword
const KindAmpersandAmpersandEqualsToken = ast.KindAmpersandAmpersandEqualsToken
const KindAmpersandAmpersandToken = ast.KindAmpersandAmpersandToken
const KindAmpersandEqualsToken = ast.KindAmpersandEqualsToken
const KindAmpersandToken = ast.KindAmpersandToken
const KindAnyKeyword = ast.KindAnyKeyword
const KindArrayBindingPattern = ast.KindArrayBindingPattern
const KindArrayLiteralExpression = ast.KindArrayLiteralExpression
const KindArrayType = ast.KindArrayType
const KindArrowFunction = ast.KindArrowFunction
const KindAsExpression = ast.KindAsExpression
const KindAsKeyword = ast.KindAsKeyword
const KindAssertKeyword = ast.KindAssertKeyword
const KindAssertsKeyword = ast.KindAssertsKeyword
const KindAsteriskAsteriskEqualsToken = ast.KindAsteriskAsteriskEqualsToken
const KindAsteriskAsteriskToken = ast.KindAsteriskAsteriskToken
const KindAsteriskEqualsToken = ast.KindAsteriskEqualsToken
const KindAsteriskToken = ast.KindAsteriskToken
const KindAsyncKeyword = ast.KindAsyncKeyword
const KindAtToken = ast.KindAtToken
const KindAwaitExpression = ast.KindAwaitExpression
const KindAwaitKeyword = ast.KindAwaitKeyword
const KindBacktickToken = ast.KindBacktickToken
const KindBarBarEqualsToken = ast.KindBarBarEqualsToken
const KindBarBarToken = ast.KindBarBarToken
const KindBarEqualsToken = ast.KindBarEqualsToken
const KindBarToken = ast.KindBarToken
const KindBigIntKeyword = ast.KindBigIntKeyword
const KindBigIntLiteral = ast.KindBigIntLiteral
const KindBinaryExpression = ast.KindBinaryExpression
const KindBindingElement = ast.KindBindingElement
const KindBlock = ast.KindBlock
const KindBooleanKeyword = ast.KindBooleanKeyword
const KindBreakKeyword = ast.KindBreakKeyword
const KindBreakStatement = ast.KindBreakStatement
const KindBundle = ast.KindBundle
const KindCallExpression = ast.KindCallExpression
const KindCallSignature = ast.KindCallSignature
const KindCaretEqualsToken = ast.KindCaretEqualsToken
const KindCaretToken = ast.KindCaretToken
const KindCaseBlock = ast.KindCaseBlock
const KindCaseClause = ast.KindCaseClause
const KindCaseKeyword = ast.KindCaseKeyword
const KindCatchClause = ast.KindCatchClause
const KindCatchKeyword = ast.KindCatchKeyword
const KindClassDeclaration = ast.KindClassDeclaration
const KindClassExpression = ast.KindClassExpression
const KindClassKeyword = ast.KindClassKeyword
const KindClassStaticBlockDeclaration = ast.KindClassStaticBlockDeclaration
const KindCloseBraceToken = ast.KindCloseBraceToken
const KindCloseBracketToken = ast.KindCloseBracketToken
const KindCloseParenToken = ast.KindCloseParenToken
const KindColonToken = ast.KindColonToken
const KindCommaListExpression = ast.KindCommaListExpression
const KindCommaToken = ast.KindCommaToken
const KindComment = ast.KindComment
const KindCommonJSExport = ast.KindCommonJSExport
const KindComputedPropertyName = ast.KindComputedPropertyName
const KindConditionalExpression = ast.KindConditionalExpression
const KindConditionalType = ast.KindConditionalType
const KindConflictMarkerTrivia = ast.KindConflictMarkerTrivia
const KindConstKeyword = ast.KindConstKeyword
const KindConstructSignature = ast.KindConstructSignature
const KindConstructor = ast.KindConstructor
const KindConstructorKeyword = ast.KindConstructorKeyword
const KindConstructorType = ast.KindConstructorType
const KindContinueKeyword = ast.KindContinueKeyword
const KindContinueStatement = ast.KindContinueStatement
const KindCount = ast.KindCount
const KindDebuggerKeyword = ast.KindDebuggerKeyword
const KindDebuggerStatement = ast.KindDebuggerStatement
const KindDeclareKeyword = ast.KindDeclareKeyword
const KindDecorator = ast.KindDecorator
const KindDefaultClause = ast.KindDefaultClause
const KindDefaultKeyword = ast.KindDefaultKeyword
const KindDeleteExpression = ast.KindDeleteExpression
const KindDeleteKeyword = ast.KindDeleteKeyword
const KindDoKeyword = ast.KindDoKeyword
const KindDoStatement = ast.KindDoStatement
const KindDotDotDotToken = ast.KindDotDotDotToken
const KindDotToken = ast.KindDotToken
const KindElementAccessExpression = ast.KindElementAccessExpression
const KindElseKeyword = ast.KindElseKeyword
const KindEmptyStatement = ast.KindEmptyStatement
const KindEndOfFile = ast.KindEndOfFile
const KindEnumDeclaration = ast.KindEnumDeclaration
const KindEnumKeyword = ast.KindEnumKeyword
const KindEnumMember = ast.KindEnumMember
const KindEqualsEqualsEqualsToken = ast.KindEqualsEqualsEqualsToken
const KindEqualsEqualsToken = ast.KindEqualsEqualsToken
const KindEqualsGreaterThanToken = ast.KindEqualsGreaterThanToken
const KindEqualsToken = ast.KindEqualsToken
const KindExclamationEqualsEqualsToken = ast.KindExclamationEqualsEqualsToken
const KindExclamationEqualsToken = ast.KindExclamationEqualsToken
const KindExclamationToken = ast.KindExclamationToken
const KindExportAssignment = ast.KindExportAssignment
const KindExportDeclaration = ast.KindExportDeclaration
const KindExportKeyword = ast.KindExportKeyword
const KindExportSpecifier = ast.KindExportSpecifier
const KindExpressionStatement = ast.KindExpressionStatement
const KindExpressionWithTypeArguments = ast.KindExpressionWithTypeArguments
const KindExtendsKeyword = ast.KindExtendsKeyword
const KindExternalModuleReference = ast.KindExternalModuleReference
const KindFalseKeyword = ast.KindFalseKeyword
const KindFinallyKeyword = ast.KindFinallyKeyword
const KindFirstAssignment = ast.KindFirstAssignment
const KindFirstBinaryOperator = ast.KindFirstBinaryOperator
const KindFirstCompoundAssignment = ast.KindFirstCompoundAssignment
const KindFirstContextualKeyword = ast.KindFirstContextualKeyword
const KindFirstFutureReservedWord = ast.KindFirstFutureReservedWord
const KindFirstJSDocNode = ast.KindFirstJSDocNode
const KindFirstJSDocTagNode = ast.KindFirstJSDocTagNode
const KindFirstKeyword = ast.KindFirstKeyword
const KindFirstLiteralToken = ast.KindFirstLiteralToken
const KindFirstNode = ast.KindFirstNode
const KindFirstPunctuation = ast.KindFirstPunctuation
const KindFirstReservedWord = ast.KindFirstReservedWord
const KindFirstStatement = ast.KindFirstStatement
const KindFirstTemplateToken = ast.KindFirstTemplateToken
const KindFirstToken = ast.KindFirstToken
const KindFirstTriviaToken = ast.KindFirstTriviaToken
const KindFirstTypeNode = ast.KindFirstTypeNode
const KindForInStatement = ast.KindForInStatement
const KindForKeyword = ast.KindForKeyword
const KindForOfStatement = ast.KindForOfStatement
const KindForStatement = ast.KindForStatement
const KindFromKeyword = ast.KindFromKeyword
const KindFunctionDeclaration = ast.KindFunctionDeclaration
const KindFunctionExpression = ast.KindFunctionExpression
const KindFunctionKeyword = ast.KindFunctionKeyword
const KindFunctionType = ast.KindFunctionType
const KindGetAccessor = ast.KindGetAccessor
const KindGetKeyword = ast.KindGetKeyword
const KindGlobalKeyword = ast.KindGlobalKeyword
const KindGreaterThanEqualsToken = ast.KindGreaterThanEqualsToken
const KindGreaterThanGreaterThanEqualsToken = ast.KindGreaterThanGreaterThanEqualsToken
const KindGreaterThanGreaterThanGreaterThanEqualsToken = ast.KindGreaterThanGreaterThanGreaterThanEqualsToken
const KindGreaterThanGreaterThanGreaterThanToken = ast.KindGreaterThanGreaterThanGreaterThanToken
const KindGreaterThanGreaterThanToken = ast.KindGreaterThanGreaterThanToken
const KindGreaterThanToken = ast.KindGreaterThanToken
const KindHashToken = ast.KindHashToken
const KindHeritageClause = ast.KindHeritageClause
const KindIdentifier = ast.KindIdentifier
const KindIfKeyword = ast.KindIfKeyword
const KindIfStatement = ast.KindIfStatement
const KindImmediateKeyword = ast.KindImmediateKeyword
const KindImplementsKeyword = ast.KindImplementsKeyword
const KindImportAttribute = ast.KindImportAttribute
const KindImportAttributes = ast.KindImportAttributes
const KindImportClause = ast.KindImportClause
const KindImportDeclaration = ast.KindImportDeclaration
const KindImportEqualsDeclaration = ast.KindImportEqualsDeclaration
const KindImportKeyword = ast.KindImportKeyword
const KindImportSpecifier = ast.KindImportSpecifier
const KindImportType = ast.KindImportType
const KindInKeyword = ast.KindInKeyword
const KindIndexSignature = ast.KindIndexSignature
const KindIndexedAccessType = ast.KindIndexedAccessType
const KindInferKeyword = ast.KindInferKeyword
const KindInferType = ast.KindInferType
const KindInstanceOfKeyword = ast.KindInstanceOfKeyword
const KindInterfaceDeclaration = ast.KindInterfaceDeclaration
const KindInterfaceKeyword = ast.KindInterfaceKeyword
const KindIntersectionType = ast.KindIntersectionType
const KindIntrinsicKeyword = ast.KindIntrinsicKeyword
const KindIsKeyword = ast.KindIsKeyword
const KindJSDoc = ast.KindJSDoc
const KindJSDocAllType = ast.KindJSDocAllType
const KindJSDocAugmentsTag = ast.KindJSDocAugmentsTag
const KindJSDocCallbackTag = ast.KindJSDocCallbackTag
const KindJSDocCommentTextToken = ast.KindJSDocCommentTextToken
const KindJSDocDeprecatedTag = ast.KindJSDocDeprecatedTag
const KindJSDocImplementsTag = ast.KindJSDocImplementsTag
const KindJSDocImportTag = ast.KindJSDocImportTag
const KindJSDocLink = ast.KindJSDocLink
const KindJSDocLinkCode = ast.KindJSDocLinkCode
const KindJSDocLinkPlain = ast.KindJSDocLinkPlain
const KindJSDocMemberName = ast.KindJSDocMemberName
const KindJSDocNameReference = ast.KindJSDocNameReference
const KindJSDocNonNullableType = ast.KindJSDocNonNullableType
const KindJSDocNullableType = ast.KindJSDocNullableType
const KindJSDocOptionalType = ast.KindJSDocOptionalType
const KindJSDocOverloadTag = ast.KindJSDocOverloadTag
const KindJSDocOverrideTag = ast.KindJSDocOverrideTag
const KindJSDocParameterTag = ast.KindJSDocParameterTag
const KindJSDocPrivateTag = ast.KindJSDocPrivateTag
const KindJSDocPropertyTag = ast.KindJSDocPropertyTag
const KindJSDocProtectedTag = ast.KindJSDocProtectedTag
const KindJSDocPublicTag = ast.KindJSDocPublicTag
const KindJSDocReadonlyTag = ast.KindJSDocReadonlyTag
const KindJSDocReturnTag = ast.KindJSDocReturnTag
const KindJSDocSatisfiesTag = ast.KindJSDocSatisfiesTag
const KindJSDocSeeTag = ast.KindJSDocSeeTag
const KindJSDocSignature = ast.KindJSDocSignature
const KindJSDocTag = ast.KindJSDocTag
const KindJSDocTemplateTag = ast.KindJSDocTemplateTag
const KindJSDocText = ast.KindJSDocText
const KindJSDocThisTag = ast.KindJSDocThisTag
const KindJSDocTypeExpression = ast.KindJSDocTypeExpression
const KindJSDocTypeLiteral = ast.KindJSDocTypeLiteral
const KindJSDocTypeTag = ast.KindJSDocTypeTag
const KindJSDocTypedefTag = ast.KindJSDocTypedefTag
const KindJSDocVariadicType = ast.KindJSDocVariadicType
const KindJSExportAssignment = ast.KindJSExportAssignment
const KindJSImportDeclaration = ast.KindJSImportDeclaration
const KindJSTypeAliasDeclaration = ast.KindJSTypeAliasDeclaration
const KindJsxAttribute = ast.KindJsxAttribute
const KindJsxAttributes = ast.KindJsxAttributes
const KindJsxClosingElement = ast.KindJsxClosingElement
const KindJsxClosingFragment = ast.KindJsxClosingFragment
const KindJsxElement = ast.KindJsxElement
const KindJsxExpression = ast.KindJsxExpression
const KindJsxFragment = ast.KindJsxFragment
const KindJsxNamespacedName = ast.KindJsxNamespacedName
const KindJsxOpeningElement = ast.KindJsxOpeningElement
const KindJsxOpeningFragment = ast.KindJsxOpeningFragment
const KindJsxSelfClosingElement = ast.KindJsxSelfClosingElement
const KindJsxSpreadAttribute = ast.KindJsxSpreadAttribute
const KindJsxText = ast.KindJsxText
const KindJsxTextAllWhiteSpaces = ast.KindJsxTextAllWhiteSpaces
const KindKeyOfKeyword = ast.KindKeyOfKeyword
const KindLabeledStatement = ast.KindLabeledStatement
const KindLastAssignment = ast.KindLastAssignment
const KindLastBinaryOperator = ast.KindLastBinaryOperator
const KindLastCompoundAssignment = ast.KindLastCompoundAssignment
const KindLastContextualKeyword = ast.KindLastContextualKeyword
const KindLastFutureReservedWord = ast.KindLastFutureReservedWord
const KindLastJSDocNode = ast.KindLastJSDocNode
const KindLastJSDocTagNode = ast.KindLastJSDocTagNode
const KindLastKeyword = ast.KindLastKeyword
const KindLastLiteralToken = ast.KindLastLiteralToken
const KindLastPunctuation = ast.KindLastPunctuation
const KindLastReservedWord = ast.KindLastReservedWord
const KindLastStatement = ast.KindLastStatement
const KindLastTemplateToken = ast.KindLastTemplateToken
const KindLastToken = ast.KindLastToken
const KindLastTriviaToken = ast.KindLastTriviaToken
const KindLastTypeNode = ast.KindLastTypeNode
const KindLessThanEqualsToken = ast.KindLessThanEqualsToken
const KindLessThanLessThanEqualsToken = ast.KindLessThanLessThanEqualsToken
const KindLessThanLessThanToken = ast.KindLessThanLessThanToken
const KindLessThanSlashToken = ast.KindLessThanSlashToken
const KindLessThanToken = ast.KindLessThanToken
const KindLetKeyword = ast.KindLetKeyword
const KindLiteralType = ast.KindLiteralType
const KindMappedType = ast.KindMappedType
const KindMetaProperty = ast.KindMetaProperty
const KindMethodDeclaration = ast.KindMethodDeclaration
const KindMethodSignature = ast.KindMethodSignature
const KindMinusEqualsToken = ast.KindMinusEqualsToken
const KindMinusMinusToken = ast.KindMinusMinusToken
const KindMinusToken = ast.KindMinusToken
const KindMissingDeclaration = ast.KindMissingDeclaration
const KindModuleBlock = ast.KindModuleBlock
const KindModuleDeclaration = ast.KindModuleDeclaration
const KindModuleKeyword = ast.KindModuleKeyword
const KindMultiLineCommentTrivia = ast.KindMultiLineCommentTrivia
const KindNamedExports = ast.KindNamedExports
const KindNamedImports = ast.KindNamedImports
const KindNamedTupleMember = ast.KindNamedTupleMember
const KindNamespaceExport = ast.KindNamespaceExport
const KindNamespaceExportDeclaration = ast.KindNamespaceExportDeclaration
const KindNamespaceImport = ast.KindNamespaceImport
const KindNamespaceKeyword = ast.KindNamespaceKeyword
const KindNeverKeyword = ast.KindNeverKeyword
const KindNewExpression = ast.KindNewExpression
const KindNewKeyword = ast.KindNewKeyword
const KindNewLineTrivia = ast.KindNewLineTrivia
const KindNoSubstitutionTemplateLiteral = ast.KindNoSubstitutionTemplateLiteral
const KindNonNullExpression = ast.KindNonNullExpression
const KindNonTextFileMarkerTrivia = ast.KindNonTextFileMarkerTrivia
const KindNotEmittedStatement = ast.KindNotEmittedStatement
const KindNotEmittedTypeElement = ast.KindNotEmittedTypeElement
const KindNullKeyword = ast.KindNullKeyword
const KindNumberKeyword = ast.KindNumberKeyword
const KindNumericLiteral = ast.KindNumericLiteral
const KindObjectBindingPattern = ast.KindObjectBindingPattern
const KindObjectKeyword = ast.KindObjectKeyword
const KindObjectLiteralExpression = ast.KindObjectLiteralExpression
const KindOfKeyword = ast.KindOfKeyword
const KindOmittedExpression = ast.KindOmittedExpression
const KindOpenBraceToken = ast.KindOpenBraceToken
const KindOpenBracketToken = ast.KindOpenBracketToken
const KindOpenParenToken = ast.KindOpenParenToken
const KindOptionalType = ast.KindOptionalType
const KindOutKeyword = ast.KindOutKeyword
const KindOverrideKeyword = ast.KindOverrideKeyword
const KindPackageKeyword = ast.KindPackageKeyword
const KindParameter = ast.KindParameter
const KindParenthesizedExpression = ast.KindParenthesizedExpression
const KindParenthesizedType = ast.KindParenthesizedType
const KindPartiallyEmittedExpression = ast.KindPartiallyEmittedExpression
const KindPercentEqualsToken = ast.KindPercentEqualsToken
const KindPercentToken = ast.KindPercentToken
const KindPlusEqualsToken = ast.KindPlusEqualsToken
const KindPlusPlusToken = ast.KindPlusPlusToken
const KindPlusToken = ast.KindPlusToken
const KindPostfixUnaryExpression = ast.KindPostfixUnaryExpression
const KindPrefixUnaryExpression = ast.KindPrefixUnaryExpression
const KindPrivateIdentifier = ast.KindPrivateIdentifier
const KindPrivateKeyword = ast.KindPrivateKeyword
const KindPropertyAccessExpression = ast.KindPropertyAccessExpression
const KindPropertyAssignment = ast.KindPropertyAssignment
const KindPropertyDeclaration = ast.KindPropertyDeclaration
const KindPropertySignature = ast.KindPropertySignature
const KindProtectedKeyword = ast.KindProtectedKeyword
const KindPublicKeyword = ast.KindPublicKeyword
const KindQualifiedName = ast.KindQualifiedName
const KindQuestionDotToken = ast.KindQuestionDotToken
const KindQuestionQuestionEqualsToken = ast.KindQuestionQuestionEqualsToken
const KindQuestionQuestionToken = ast.KindQuestionQuestionToken
const KindQuestionToken = ast.KindQuestionToken
const KindReadonlyKeyword = ast.KindReadonlyKeyword
const KindRegularExpressionLiteral = ast.KindRegularExpressionLiteral
const KindRequireKeyword = ast.KindRequireKeyword
const KindRestType = ast.KindRestType
const KindReturnKeyword = ast.KindReturnKeyword
const KindReturnStatement = ast.KindReturnStatement
const KindSatisfiesExpression = ast.KindSatisfiesExpression
const KindSatisfiesKeyword = ast.KindSatisfiesKeyword
const KindSemicolonClassElement = ast.KindSemicolonClassElement
const KindSemicolonToken = ast.KindSemicolonToken
const KindSetAccessor = ast.KindSetAccessor
const KindSetKeyword = ast.KindSetKeyword
const KindShorthandPropertyAssignment = ast.KindShorthandPropertyAssignment
const KindSingleLineCommentTrivia = ast.KindSingleLineCommentTrivia
const KindSlashEqualsToken = ast.KindSlashEqualsToken
const KindSlashToken = ast.KindSlashToken
const KindSourceFile = ast.KindSourceFile
const KindSpreadAssignment = ast.KindSpreadAssignment
const KindSpreadElement = ast.KindSpreadElement
const KindStaticKeyword = ast.KindStaticKeyword
const KindStringKeyword = ast.KindStringKeyword
const KindStringLiteral = ast.KindStringLiteral
const KindSuperKeyword = ast.KindSuperKeyword
const KindSwitchKeyword = ast.KindSwitchKeyword
const KindSwitchStatement = ast.KindSwitchStatement
const KindSymbolKeyword = ast.KindSymbolKeyword
const KindSyntaxList = ast.KindSyntaxList
const KindSyntheticExpression = ast.KindSyntheticExpression
const KindSyntheticReferenceExpression = ast.KindSyntheticReferenceExpression
const KindTaggedTemplateExpression = ast.KindTaggedTemplateExpression
const KindTemplateExpression = ast.KindTemplateExpression
const KindTemplateHead = ast.KindTemplateHead
const KindTemplateLiteralType = ast.KindTemplateLiteralType
const KindTemplateLiteralTypeSpan = ast.KindTemplateLiteralTypeSpan
const KindTemplateMiddle = ast.KindTemplateMiddle
const KindTemplateSpan = ast.KindTemplateSpan
const KindTemplateTail = ast.KindTemplateTail
const KindThisKeyword = ast.KindThisKeyword
const KindThisType = ast.KindThisType
const KindThrowKeyword = ast.KindThrowKeyword
const KindThrowStatement = ast.KindThrowStatement
const KindTildeToken = ast.KindTildeToken
const KindTrueKeyword = ast.KindTrueKeyword
const KindTryKeyword = ast.KindTryKeyword
const KindTryStatement = ast.KindTryStatement
const KindTupleType = ast.KindTupleType
const KindTypeAliasDeclaration = ast.KindTypeAliasDeclaration
const KindTypeAssertionExpression = ast.KindTypeAssertionExpression
const KindTypeKeyword = ast.KindTypeKeyword
const KindTypeLiteral = ast.KindTypeLiteral
const KindTypeOfExpression = ast.KindTypeOfExpression
const KindTypeOfKeyword = ast.KindTypeOfKeyword
const KindTypeOperator = ast.KindTypeOperator
const KindTypeParameter = ast.KindTypeParameter
const KindTypePredicate = ast.KindTypePredicate
const KindTypeQuery = ast.KindTypeQuery
const KindTypeReference = ast.KindTypeReference
const KindUndefinedKeyword = ast.KindUndefinedKeyword
const KindUnionType = ast.KindUnionType
const KindUniqueKeyword = ast.KindUniqueKeyword
const KindUnknown = ast.KindUnknown
const KindUnknownKeyword = ast.KindUnknownKeyword
const KindUsingKeyword = ast.KindUsingKeyword
const KindVarKeyword = ast.KindVarKeyword
const KindVariableDeclaration = ast.KindVariableDeclaration
const KindVariableDeclarationList = ast.KindVariableDeclarationList
const KindVariableStatement = ast.KindVariableStatement
const KindVoidExpression = ast.KindVoidExpression
const KindVoidKeyword = ast.KindVoidKeyword
const KindWhileKeyword = ast.KindWhileKeyword
const KindWhileStatement = ast.KindWhileStatement
const KindWhitespaceTrivia = ast.KindWhitespaceTrivia
const KindWithKeyword = ast.KindWithKeyword
const KindWithStatement = ast.KindWithStatement
const KindYieldExpression = ast.KindYieldExpression
const KindYieldKeyword = ast.KindYieldKeyword
type LabeledStatement = ast.LabeledStatement
type LeftHandSideExpression = ast.LeftHandSideExpression
type LiteralExpression = ast.LiteralExpression
type LiteralLikeBase = ast.LiteralLikeBase
type LiteralLikeNode = ast.LiteralLikeNode
type LiteralType = ast.LiteralType
type LiteralTypeNode = ast.LiteralTypeNode
type LocalsContainerBase = ast.LocalsContainerBase
type MappedTypeNode = ast.MappedTypeNode
type MemberName = ast.MemberName
type MetaProperty = ast.MetaProperty
type MethodDeclaration = ast.MethodDeclaration
type MethodSignatureDeclaration = ast.MethodSignatureDeclaration
type MissingDeclaration = ast.MissingDeclaration
type ModifierFlags = ast.ModifierFlags
const ModifierFlagsAbstract = ast.ModifierFlagsAbstract
const ModifierFlagsAccessibilityModifier = ast.ModifierFlagsAccessibilityModifier
const ModifierFlagsAccessor = ast.ModifierFlagsAccessor
const ModifierFlagsAll = ast.ModifierFlagsAll
const ModifierFlagsAmbient = ast.ModifierFlagsAmbient
const ModifierFlagsAsync = ast.ModifierFlagsAsync
const ModifierFlagsConst = ast.ModifierFlagsConst
const ModifierFlagsDecorator = ast.ModifierFlagsDecorator
const ModifierFlagsDefault = ast.ModifierFlagsDefault
const ModifierFlagsDeprecated = ast.ModifierFlagsDeprecated
const ModifierFlagsExport = ast.ModifierFlagsExport
const ModifierFlagsExportDefault = ast.ModifierFlagsExportDefault
const ModifierFlagsHasComputedFlags = ast.ModifierFlagsHasComputedFlags
const ModifierFlagsHasComputedJSDocModifiers = ast.ModifierFlagsHasComputedJSDocModifiers
const ModifierFlagsImmediate = ast.ModifierFlagsImmediate
const ModifierFlagsIn = ast.ModifierFlagsIn
const ModifierFlagsJSDocCacheOnlyModifiers = ast.ModifierFlagsJSDocCacheOnlyModifiers
const ModifierFlagsJSDocImmediate = ast.ModifierFlagsJSDocImmediate
const ModifierFlagsJSDocOnlyModifiers = ast.ModifierFlagsJSDocOnlyModifiers
const ModifierFlagsJSDocOverride = ast.ModifierFlagsJSDocOverride
const ModifierFlagsJSDocPrivate = ast.ModifierFlagsJSDocPrivate
const ModifierFlagsJSDocProtected = ast.ModifierFlagsJSDocProtected
const ModifierFlagsJSDocPublic = ast.ModifierFlagsJSDocPublic
const ModifierFlagsJSDocReadonly = ast.ModifierFlagsJSDocReadonly
const ModifierFlagsModifier = ast.ModifierFlagsModifier
const ModifierFlagsNonCacheOnlyModifiers = ast.ModifierFlagsNonCacheOnlyModifiers
const ModifierFlagsNonPublicAccessibilityModifier = ast.ModifierFlagsNonPublicAccessibilityModifier
const ModifierFlagsNone = ast.ModifierFlagsNone
const ModifierFlagsOut = ast.ModifierFlagsOut
const ModifierFlagsOverride = ast.ModifierFlagsOverride
const ModifierFlagsParameterPropertyModifier = ast.ModifierFlagsParameterPropertyModifier
const ModifierFlagsPrivate = ast.ModifierFlagsPrivate
const ModifierFlagsProtected = ast.ModifierFlagsProtected
const ModifierFlagsPublic = ast.ModifierFlagsPublic
const ModifierFlagsReadonly = ast.ModifierFlagsReadonly
const ModifierFlagsStatic = ast.ModifierFlagsStatic
const ModifierFlagsSyntacticModifiers = ast.ModifierFlagsSyntacticModifiers
const ModifierFlagsSyntacticOnlyModifiers = ast.ModifierFlagsSyntacticOnlyModifiers
const ModifierFlagsSyntacticOrJSDocModifiers = ast.ModifierFlagsSyntacticOrJSDocModifiers
const ModifierFlagsTypeScriptModifier = ast.ModifierFlagsTypeScriptModifier
type ModifierLike = ast.ModifierLike
type ModifierList = ast.ModifierList
//go:linkname ModifierToFlag github.com/microsoft/typescript-go/internal/ast.ModifierToFlag
func ModifierToFlag(token ast.Kind) ast.ModifierFlags
type ModifiersBase = ast.ModifiersBase
//go:linkname ModifiersToFlags github.com/microsoft/typescript-go/internal/ast.ModifiersToFlags
func ModifiersToFlags(modifiers []*ast.Node) ast.ModifierFlags
type ModuleBlock = ast.ModuleBlock
type ModuleBody = ast.ModuleBody
type ModuleDeclaration = ast.ModuleDeclaration
type ModuleDeclarationNode = ast.ModuleDeclarationNode
type ModuleExportName = ast.ModuleExportName
//go:linkname ModuleExportNameIsDefault github.com/microsoft/typescript-go/internal/ast.ModuleExportNameIsDefault
func ModuleExportNameIsDefault(node *ast.Node) bool
type ModuleInstanceState = ast.ModuleInstanceState
const ModuleInstanceStateConstEnumOnly = ast.ModuleInstanceStateConstEnumOnly
const ModuleInstanceStateInstantiated = ast.ModuleInstanceStateInstantiated
const ModuleInstanceStateNonInstantiated = ast.ModuleInstanceStateNonInstantiated
const ModuleInstanceStateUnknown = ast.ModuleInstanceStateUnknown
type ModuleName = ast.ModuleName
type ModuleReference = ast.ModuleReference
type NamedExportBindings = ast.NamedExportBindings
type NamedExports = ast.NamedExports
type NamedExportsNode = ast.NamedExportsNode
type NamedImportBindings = ast.NamedImportBindings
type NamedImports = ast.NamedImports
type NamedImportsOrExports = ast.NamedImportsOrExports
type NamedMember = ast.NamedMember
type NamedMemberBase = ast.NamedMemberBase
type NamedTupleMember = ast.NamedTupleMember
type NamespaceExport = ast.NamespaceExport
type NamespaceExportDeclaration = ast.NamespaceExportDeclaration
type NamespaceImport = ast.NamespaceImport
//go:linkname NewCompilerDiagnostic github.com/microsoft/typescript-go/internal/ast.NewCompilerDiagnostic
func NewCompilerDiagnostic(message *diagnostics.Message, args ...any) *ast.Diagnostic
//go:linkname NewDiagnostic github.com/microsoft/typescript-go/internal/ast.NewDiagnostic
func NewDiagnostic(file *ast.SourceFile, loc core.TextRange, message *diagnostics.Message, args ...any) *ast.Diagnostic
//go:linkname NewDiagnosticChain github.com/microsoft/typescript-go/internal/ast.NewDiagnosticChain
func NewDiagnosticChain(chain *ast.Diagnostic, message *diagnostics.Message, args ...any) *ast.Diagnostic
//go:linkname NewDiagnosticWith github.com/microsoft/typescript-go/internal/ast.NewDiagnosticWith
func NewDiagnosticWith(file *ast.SourceFile, loc core.TextRange, code int32, category diagnostics.Category, message string, messageChain []*ast.Diagnostic, relatedInformation []*ast.Diagnostic, reportsUnnecessary bool, reportsDeprecated bool, skippedOnNoEmit bool) *ast.Diagnostic
type NewExpression = ast.NewExpression
//go:linkname NewFlowReduceLabelData github.com/microsoft/typescript-go/internal/ast.NewFlowReduceLabelData
func NewFlowReduceLabelData(target *ast.FlowLabel, antecedents *ast.FlowList) *ast.Node
//go:linkname NewFlowSwitchClauseData github.com/microsoft/typescript-go/internal/ast.NewFlowSwitchClauseData
func NewFlowSwitchClauseData(switchStatement *ast.Node, clauseStart int, clauseEnd int) *ast.Node
//go:linkname NewHasFileName github.com/microsoft/typescript-go/internal/ast.NewHasFileName
func NewHasFileName(fileName string, path tspath.Path) ast.HasFileName
//go:linkname NewNodeFactory github.com/microsoft/typescript-go/internal/ast.NewNodeFactory
func NewNodeFactory(hooks ast.NodeFactoryHooks) *ast.NodeFactory
//go:linkname NewNodeVisitor github.com/microsoft/typescript-go/internal/ast.NewNodeVisitor
func NewNodeVisitor(visit func(node *ast.Node) *ast.Node, factory *ast.NodeFactory, hooks ast.NodeVisitorHooks) *ast.NodeVisitor
type NoSubstitutionTemplateLiteral = ast.NoSubstitutionTemplateLiteral
type Node = ast.Node
type NodeBase = ast.NodeBase
type NodeDefault = ast.NodeDefault
type NodeFactory = ast.NodeFactory
type NodeFactoryCoercible = ast.NodeFactoryCoercible
type NodeFactoryHooks = ast.NodeFactoryHooks
type NodeFlags = ast.NodeFlags
const NodeFlagsAmbient = ast.NodeFlagsAmbient
const NodeFlagsAwaitContext = ast.NodeFlagsAwaitContext
const NodeFlagsAwaitUsing = ast.NodeFlagsAwaitUsing
const NodeFlagsBlockScoped = ast.NodeFlagsBlockScoped
const NodeFlagsConst = ast.NodeFlagsConst
const NodeFlagsConstant = ast.NodeFlagsConstant
const NodeFlagsContainsThis = ast.NodeFlagsContainsThis
const NodeFlagsContextFlags = ast.NodeFlagsContextFlags
const NodeFlagsDecoratorContext = ast.NodeFlagsDecoratorContext
const NodeFlagsDeprecated = ast.NodeFlagsDeprecated
const NodeFlagsDisallowConditionalTypesContext = ast.NodeFlagsDisallowConditionalTypesContext
const NodeFlagsDisallowInContext = ast.NodeFlagsDisallowInContext
const NodeFlagsExportContext = ast.NodeFlagsExportContext
const NodeFlagsHasAggregatedChildData = ast.NodeFlagsHasAggregatedChildData
const NodeFlagsHasExplicitReturn = ast.NodeFlagsHasExplicitReturn
const NodeFlagsHasImplicitReturn = ast.NodeFlagsHasImplicitReturn
const NodeFlagsHasJSDoc = ast.NodeFlagsHasJSDoc
const NodeFlagsIdentifierHasExtendedUnicodeEscape = ast.NodeFlagsIdentifierHasExtendedUnicodeEscape
const NodeFlagsInWithStatement = ast.NodeFlagsInWithStatement
const NodeFlagsJSDoc = ast.NodeFlagsJSDoc
const NodeFlagsJavaScriptFile = ast.NodeFlagsJavaScriptFile
const NodeFlagsJsonFile = ast.NodeFlagsJsonFile
const NodeFlagsLet = ast.NodeFlagsLet
const NodeFlagsNone = ast.NodeFlagsNone
const NodeFlagsOptionalChain = ast.NodeFlagsOptionalChain
const NodeFlagsPermanentlySetIncrementalFlags = ast.NodeFlagsPermanentlySetIncrementalFlags
const NodeFlagsPossiblyContainsDynamicImport = ast.NodeFlagsPossiblyContainsDynamicImport
const NodeFlagsPossiblyContainsImportMeta = ast.NodeFlagsPossiblyContainsImportMeta
const NodeFlagsReachabilityCheckFlags = ast.NodeFlagsReachabilityCheckFlags
const NodeFlagsReparsed = ast.NodeFlagsReparsed
const NodeFlagsSynthesized = ast.NodeFlagsSynthesized
const NodeFlagsThisNodeHasError = ast.NodeFlagsThisNodeHasError
const NodeFlagsThisNodeOrAnySubNodesHasError = ast.NodeFlagsThisNodeOrAnySubNodesHasError
const NodeFlagsTypeExcludesFlags = ast.NodeFlagsTypeExcludesFlags
const NodeFlagsUsing = ast.NodeFlagsUsing
const NodeFlagsYieldContext = ast.NodeFlagsYieldContext
//go:linkname NodeHasKind github.com/microsoft/typescript-go/internal/ast.NodeHasKind
func NodeHasKind(node *ast.Node, kind ast.Kind) bool
//go:linkname NodeHasName github.com/microsoft/typescript-go/internal/ast.NodeHasName
func NodeHasName(statement *ast.Node, id *ast.Node) bool
type NodeId = ast.NodeId
//go:linkname NodeIsMissing github.com/microsoft/typescript-go/internal/ast.NodeIsMissing
func NodeIsMissing(node *ast.Node) bool
//go:linkname NodeIsPresent github.com/microsoft/typescript-go/internal/ast.NodeIsPresent
func NodeIsPresent(node *ast.Node) bool
//go:linkname NodeIsSynthesized github.com/microsoft/typescript-go/internal/ast.NodeIsSynthesized
func NodeIsSynthesized(node *ast.Node) bool
//go:linkname NodeKindIs github.com/microsoft/typescript-go/internal/ast.NodeKindIs
func NodeKindIs(node *ast.Node, kinds ...ast.Kind) bool
type NodeList = ast.NodeList
type NodeVisitor = ast.NodeVisitor
type NodeVisitorHooks = ast.NodeVisitorHooks
type NonNullExpression = ast.NonNullExpression
type NotEmittedStatement = ast.NotEmittedStatement
type NotEmittedTypeElement = ast.NotEmittedTypeElement
type NumericLiteral = ast.NumericLiteral
type NumericOrStringLikeLiteral = ast.NumericOrStringLikeLiteral
const OEKAll = ast.OEKAll
const OEKAssertions = ast.OEKAssertions
const OEKExcludeJSDocTypeAssertion = ast.OEKExcludeJSDocTypeAssertion
const OEKExpressionsWithTypeArguments = ast.OEKExpressionsWithTypeArguments
const OEKNonNullAssertions = ast.OEKNonNullAssertions
const OEKParentheses = ast.OEKParentheses
const OEKPartiallyEmittedExpressions = ast.OEKPartiallyEmittedExpressions
const OEKSatisfies = ast.OEKSatisfies
const OEKTypeAssertions = ast.OEKTypeAssertions
type ObjectLiteralElement = ast.ObjectLiteralElement
type ObjectLiteralElementBase = ast.ObjectLiteralElementBase
type ObjectLiteralExpression = ast.ObjectLiteralExpression
type ObjectLiteralExpressionNode = ast.ObjectLiteralExpressionNode
type ObjectLiteralLike = ast.ObjectLiteralLike
type ObjectTypeDeclaration = ast.ObjectTypeDeclaration
type OmittedExpression = ast.OmittedExpression
type OperatorPrecedence = ast.OperatorPrecedence
const OperatorPrecedenceAdditive = ast.OperatorPrecedenceAdditive
const OperatorPrecedenceAssignment = ast.OperatorPrecedenceAssignment
const OperatorPrecedenceBitwiseAND = ast.OperatorPrecedenceBitwiseAND
const OperatorPrecedenceBitwiseOR = ast.OperatorPrecedenceBitwiseOR
const OperatorPrecedenceBitwiseXOR = ast.OperatorPrecedenceBitwiseXOR
const OperatorPrecedenceCoalesce = ast.OperatorPrecedenceCoalesce
const OperatorPrecedenceComma = ast.OperatorPrecedenceComma
const OperatorPrecedenceConditional = ast.OperatorPrecedenceConditional
const OperatorPrecedenceDisallowComma = ast.OperatorPrecedenceDisallowComma
const OperatorPrecedenceEquality = ast.OperatorPrecedenceEquality
const OperatorPrecedenceExponentiation = ast.OperatorPrecedenceExponentiation
type OperatorPrecedenceFlags = ast.OperatorPrecedenceFlags
const OperatorPrecedenceFlagsNewWithoutArguments = ast.OperatorPrecedenceFlagsNewWithoutArguments
const OperatorPrecedenceFlagsNone = ast.OperatorPrecedenceFlagsNone
const OperatorPrecedenceFlagsOptionalChain = ast.OperatorPrecedenceFlagsOptionalChain
const OperatorPrecedenceHighest = ast.OperatorPrecedenceHighest
const OperatorPrecedenceInvalid = ast.OperatorPrecedenceInvalid
const OperatorPrecedenceLeftHandSide = ast.OperatorPrecedenceLeftHandSide
const OperatorPrecedenceLogicalAND = ast.OperatorPrecedenceLogicalAND
const OperatorPrecedenceLogicalOR = ast.OperatorPrecedenceLogicalOR
const OperatorPrecedenceLowest = ast.OperatorPrecedenceLowest
const OperatorPrecedenceMember = ast.OperatorPrecedenceMember
const OperatorPrecedenceMultiplicative = ast.OperatorPrecedenceMultiplicative
const OperatorPrecedenceOptionalChain = ast.OperatorPrecedenceOptionalChain
const OperatorPrecedenceParentheses = ast.OperatorPrecedenceParentheses
const OperatorPrecedencePrimary = ast.OperatorPrecedencePrimary
const OperatorPrecedenceRelational = ast.OperatorPrecedenceRelational
const OperatorPrecedenceShift = ast.OperatorPrecedenceShift
const OperatorPrecedenceSpread = ast.OperatorPrecedenceSpread
const OperatorPrecedenceUnary = ast.OperatorPrecedenceUnary
const OperatorPrecedenceUpdate = ast.OperatorPrecedenceUpdate
const OperatorPrecedenceYield = ast.OperatorPrecedenceYield
type OptionalTypeNode = ast.OptionalTypeNode
type OuterExpressionKinds = ast.OuterExpressionKinds
type ParameterDeclaration = ast.ParameterDeclaration
type ParameterDeclarationNode = ast.ParameterDeclarationNode
type ParameterList = ast.ParameterList
type ParenthesizedExpression = ast.ParenthesizedExpression
type ParenthesizedTypeNode = ast.ParenthesizedTypeNode
type PartiallyEmittedExpression = ast.PartiallyEmittedExpression
type PatternAmbientModule = ast.PatternAmbientModule
//go:linkname PositionIsSynthesized github.com/microsoft/typescript-go/internal/ast.PositionIsSynthesized
func PositionIsSynthesized(pos int) bool
type PostfixUnaryExpression = ast.PostfixUnaryExpression
type Pragma = ast.Pragma
type PragmaArgument = ast.PragmaArgument
type PragmaArgumentSpecification = ast.PragmaArgumentSpecification
const PragmaKindAll = ast.PragmaKindAll
const PragmaKindDefault = ast.PragmaKindDefault
type PragmaKindFlags = ast.PragmaKindFlags
const PragmaKindFlagsNone = ast.PragmaKindFlagsNone
const PragmaKindMultiLine = ast.PragmaKindMultiLine
const PragmaKindSingleLine = ast.PragmaKindSingleLine
const PragmaKindTripleSlashXML = ast.PragmaKindTripleSlashXML
type PragmaSpecification = ast.PragmaSpecification
type PrefixUnaryExpression = ast.PrefixUnaryExpression
type PrivateIdentifier = ast.PrivateIdentifier
type PrivateIdentifierNode = ast.PrivateIdentifierNode
type PropertyAccessExpression = ast.PropertyAccessExpression
type PropertyAccessExpressionNode = ast.PropertyAccessExpressionNode
type PropertyAssignment = ast.PropertyAssignment
type PropertyDeclaration = ast.PropertyDeclaration
type PropertyDefinitionList = ast.PropertyDefinitionList
type PropertyName = ast.PropertyName
type PropertySignatureDeclaration = ast.PropertySignatureDeclaration
type QualifiedName = ast.QualifiedName
//go:linkname RangeIsSynthesized github.com/microsoft/typescript-go/internal/ast.RangeIsSynthesized
func RangeIsSynthesized(loc core.TextRange) bool
type RegularExpressionLiteral = ast.RegularExpressionLiteral
//go:linkname ReplaceModifiers github.com/microsoft/typescript-go/internal/ast.ReplaceModifiers
func ReplaceModifiers(factory *ast.NodeFactory, node *ast.Node, modifierArray *ast.ModifierList) *ast.Node
type RestTypeNode = ast.RestTypeNode
type ReturnStatement = ast.ReturnStatement
type SatisfiesExpression = ast.SatisfiesExpression
type SemanticMeaning = ast.SemanticMeaning
const SemanticMeaningAll = ast.SemanticMeaningAll
const SemanticMeaningNamespace = ast.SemanticMeaningNamespace
const SemanticMeaningNone = ast.SemanticMeaningNone
const SemanticMeaningType = ast.SemanticMeaningType
const SemanticMeaningValue = ast.SemanticMeaningValue
type SemicolonClassElement = ast.SemicolonClassElement
type SetAccessorDeclaration = ast.SetAccessorDeclaration
//go:linkname SetExternalModuleIndicator github.com/microsoft/typescript-go/internal/ast.SetExternalModuleIndicator
func SetExternalModuleIndicator(file *ast.SourceFile, opts ast.ExternalModuleIndicatorOptions)
//go:linkname SetImportsOfSourceFile github.com/microsoft/typescript-go/internal/ast.SetImportsOfSourceFile
func SetImportsOfSourceFile(node *ast.SourceFile, imports []*ast.LiteralLikeNode)
//go:linkname SetParentInChildren github.com/microsoft/typescript-go/internal/ast.SetParentInChildren
func SetParentInChildren(node *ast.Node)
type ShorthandPropertyAssignment = ast.ShorthandPropertyAssignment
//go:linkname ShouldTransformImportCall github.com/microsoft/typescript-go/internal/ast.ShouldTransformImportCall
func ShouldTransformImportCall(fileName string, options *core.CompilerOptions, impliedNodeFormatForEmit core.ModuleKind) bool
type SignatureDeclaration = ast.SignatureDeclaration
//go:linkname SkipOuterExpressions github.com/microsoft/typescript-go/internal/ast.SkipOuterExpressions
func SkipOuterExpressions(node *ast.Expression, kinds ast.OuterExpressionKinds) *ast.Expression
//go:linkname SkipParentheses github.com/microsoft/typescript-go/internal/ast.SkipParentheses
func SkipParentheses(node *ast.Expression) *ast.Expression
//go:linkname SkipPartiallyEmittedExpressions github.com/microsoft/typescript-go/internal/ast.SkipPartiallyEmittedExpressions
func SkipPartiallyEmittedExpressions(node *ast.Expression) *ast.Expression
//go:linkname SkipTypeParentheses github.com/microsoft/typescript-go/internal/ast.SkipTypeParentheses
func SkipTypeParentheses(node *ast.Node) *ast.Node
type SourceFile = ast.SourceFile
type SourceFileLike = ast.SourceFileLike
type SourceFileMetaData = ast.SourceFileMetaData
type SourceFileNode = ast.SourceFileNode
type SourceFileParseOptions = ast.SourceFileParseOptions
type SpreadAssignment = ast.SpreadAssignment
type SpreadElement = ast.SpreadElement
type Statement = ast.Statement
type StatementBase = ast.StatementBase
type StatementList = ast.StatementList
type StringLiteral = ast.StringLiteral
type StringLiteralLike = ast.StringLiteralLike
type StringLiteralNode = ast.StringLiteralNode
const SubtreeContainsAnyAwait = ast.SubtreeContainsAnyAwait
const SubtreeContainsAwait = ast.SubtreeContainsAwait
const SubtreeContainsClassFields = ast.SubtreeContainsClassFields
const SubtreeContainsClassStaticBlocks = ast.SubtreeContainsClassStaticBlocks
const SubtreeContainsDecorators = ast.SubtreeContainsDecorators
const SubtreeContainsDynamicImport = ast.SubtreeContainsDynamicImport
const SubtreeContainsES2016 = ast.SubtreeContainsES2016
const SubtreeContainsES2017 = ast.SubtreeContainsES2017
const SubtreeContainsES2018 = ast.SubtreeContainsES2018
const SubtreeContainsES2019 = ast.SubtreeContainsES2019
const SubtreeContainsES2020 = ast.SubtreeContainsES2020
const SubtreeContainsES2021 = ast.SubtreeContainsES2021
const SubtreeContainsES2022 = ast.SubtreeContainsES2022
const SubtreeContainsESClassFields = ast.SubtreeContainsESClassFields
const SubtreeContainsESDecorators = ast.SubtreeContainsESDecorators
const SubtreeContainsESNext = ast.SubtreeContainsESNext
const SubtreeContainsESObjectRestOrSpread = ast.SubtreeContainsESObjectRestOrSpread
const SubtreeContainsExponentiationOperator = ast.SubtreeContainsExponentiationOperator
const SubtreeContainsForAwaitOrAsyncGenerator = ast.SubtreeContainsForAwaitOrAsyncGenerator
const SubtreeContainsIdentifier = ast.SubtreeContainsIdentifier
const SubtreeContainsJsx = ast.SubtreeContainsJsx
const SubtreeContainsLexicalSuper = ast.SubtreeContainsLexicalSuper
const SubtreeContainsLexicalThis = ast.SubtreeContainsLexicalThis
const SubtreeContainsLexicalThisOrSuper = ast.SubtreeContainsLexicalThisOrSuper
const SubtreeContainsLogicalAssignments = ast.SubtreeContainsLogicalAssignments
const SubtreeContainsMissingCatchClauseVariable = ast.SubtreeContainsMissingCatchClauseVariable
const SubtreeContainsNullishCoalescing = ast.SubtreeContainsNullishCoalescing
const SubtreeContainsObjectRestOrSpread = ast.SubtreeContainsObjectRestOrSpread
const SubtreeContainsOptionalChaining = ast.SubtreeContainsOptionalChaining
const SubtreeContainsRest = ast.SubtreeContainsRest
const SubtreeContainsTypeScript = ast.SubtreeContainsTypeScript
const SubtreeContainsUsing = ast.SubtreeContainsUsing
const SubtreeExclusionsAccessor = ast.SubtreeExclusionsAccessor
const SubtreeExclusionsArrayLiteral = ast.SubtreeExclusionsArrayLiteral
const SubtreeExclusionsArrowFunction = ast.SubtreeExclusionsArrowFunction
const SubtreeExclusionsBindingPattern = ast.SubtreeExclusionsBindingPattern
const SubtreeExclusionsCall = ast.SubtreeExclusionsCall
const SubtreeExclusionsCatchClause = ast.SubtreeExclusionsCatchClause
const SubtreeExclusionsClass = ast.SubtreeExclusionsClass
const SubtreeExclusionsConstructor = ast.SubtreeExclusionsConstructor
const SubtreeExclusionsElementAccess = ast.SubtreeExclusionsElementAccess
const SubtreeExclusionsEraseable = ast.SubtreeExclusionsEraseable
const SubtreeExclusionsFunction = ast.SubtreeExclusionsFunction
const SubtreeExclusionsMethod = ast.SubtreeExclusionsMethod
const SubtreeExclusionsModule = ast.SubtreeExclusionsModule
const SubtreeExclusionsNew = ast.SubtreeExclusionsNew
const SubtreeExclusionsNode = ast.SubtreeExclusionsNode
const SubtreeExclusionsObjectLiteral = ast.SubtreeExclusionsObjectLiteral
const SubtreeExclusionsOuterExpression = ast.SubtreeExclusionsOuterExpression
const SubtreeExclusionsParameter = ast.SubtreeExclusionsParameter
const SubtreeExclusionsProperty = ast.SubtreeExclusionsProperty
const SubtreeExclusionsPropertyAccess = ast.SubtreeExclusionsPropertyAccess
const SubtreeExclusionsVariableDeclarationList = ast.SubtreeExclusionsVariableDeclarationList
type SubtreeFacts = ast.SubtreeFacts
const SubtreeFactsComputed = ast.SubtreeFactsComputed
const SubtreeFactsNone = ast.SubtreeFactsNone
type SwitchStatement = ast.SwitchStatement
type Symbol = ast.Symbol
type SymbolFlags = ast.SymbolFlags
const SymbolFlagsAccessor = ast.SymbolFlagsAccessor
const SymbolFlagsAccessorExcludes = ast.SymbolFlagsAccessorExcludes
const SymbolFlagsAlias = ast.SymbolFlagsAlias
const SymbolFlagsAliasExcludes = ast.SymbolFlagsAliasExcludes
const SymbolFlagsAll = ast.SymbolFlagsAll
const SymbolFlagsAssignment = ast.SymbolFlagsAssignment
const SymbolFlagsBlockScoped = ast.SymbolFlagsBlockScoped
const SymbolFlagsBlockScopedVariable = ast.SymbolFlagsBlockScopedVariable
const SymbolFlagsBlockScopedVariableExcludes = ast.SymbolFlagsBlockScopedVariableExcludes
const SymbolFlagsClass = ast.SymbolFlagsClass
const SymbolFlagsClassExcludes = ast.SymbolFlagsClassExcludes
const SymbolFlagsClassMember = ast.SymbolFlagsClassMember
const SymbolFlagsClassifiable = ast.SymbolFlagsClassifiable
const SymbolFlagsConstEnum = ast.SymbolFlagsConstEnum
const SymbolFlagsConstEnumExcludes = ast.SymbolFlagsConstEnumExcludes
const SymbolFlagsConstEnumOnlyModule = ast.SymbolFlagsConstEnumOnlyModule
const SymbolFlagsConstructor = ast.SymbolFlagsConstructor
const SymbolFlagsEnum = ast.SymbolFlagsEnum
const SymbolFlagsEnumMember = ast.SymbolFlagsEnumMember
const SymbolFlagsEnumMemberExcludes = ast.SymbolFlagsEnumMemberExcludes
const SymbolFlagsExportDoesNotSupportDefaultModifier = ast.SymbolFlagsExportDoesNotSupportDefaultModifier
const SymbolFlagsExportHasLocal = ast.SymbolFlagsExportHasLocal
const SymbolFlagsExportStar = ast.SymbolFlagsExportStar
const SymbolFlagsExportSupportsDefaultModifier = ast.SymbolFlagsExportSupportsDefaultModifier
const SymbolFlagsExportValue = ast.SymbolFlagsExportValue
const SymbolFlagsFunction = ast.SymbolFlagsFunction
const SymbolFlagsFunctionExcludes = ast.SymbolFlagsFunctionExcludes
const SymbolFlagsFunctionScopedVariable = ast.SymbolFlagsFunctionScopedVariable
const SymbolFlagsFunctionScopedVariableExcludes = ast.SymbolFlagsFunctionScopedVariableExcludes
const SymbolFlagsGetAccessor = ast.SymbolFlagsGetAccessor
const SymbolFlagsGetAccessorExcludes = ast.SymbolFlagsGetAccessorExcludes
const SymbolFlagsGlobalLookup = ast.SymbolFlagsGlobalLookup
const SymbolFlagsInterface = ast.SymbolFlagsInterface
const SymbolFlagsInterfaceExcludes = ast.SymbolFlagsInterfaceExcludes
const SymbolFlagsLateBindingContainer = ast.SymbolFlagsLateBindingContainer
const SymbolFlagsMethod = ast.SymbolFlagsMethod
const SymbolFlagsMethodExcludes = ast.SymbolFlagsMethodExcludes
const SymbolFlagsModule = ast.SymbolFlagsModule
const SymbolFlagsModuleExports = ast.SymbolFlagsModuleExports
const SymbolFlagsModuleMember = ast.SymbolFlagsModuleMember
const SymbolFlagsNamespace = ast.SymbolFlagsNamespace
const SymbolFlagsNamespaceModule = ast.SymbolFlagsNamespaceModule
const SymbolFlagsNamespaceModuleExcludes = ast.SymbolFlagsNamespaceModuleExcludes
const SymbolFlagsNone = ast.SymbolFlagsNone
const SymbolFlagsObjectLiteral = ast.SymbolFlagsObjectLiteral
const SymbolFlagsOptional = ast.SymbolFlagsOptional
const SymbolFlagsParameterExcludes = ast.SymbolFlagsParameterExcludes
const SymbolFlagsProperty = ast.SymbolFlagsProperty
const SymbolFlagsPropertyExcludes = ast.SymbolFlagsPropertyExcludes
const SymbolFlagsPropertyOrAccessor = ast.SymbolFlagsPropertyOrAccessor
const SymbolFlagsPrototype = ast.SymbolFlagsPrototype
const SymbolFlagsRegularEnum = ast.SymbolFlagsRegularEnum
const SymbolFlagsRegularEnumExcludes = ast.SymbolFlagsRegularEnumExcludes
const SymbolFlagsReplaceableByMethod = ast.SymbolFlagsReplaceableByMethod
const SymbolFlagsSetAccessor = ast.SymbolFlagsSetAccessor
const SymbolFlagsSetAccessorExcludes = ast.SymbolFlagsSetAccessorExcludes
const SymbolFlagsSignature = ast.SymbolFlagsSignature
const SymbolFlagsTransient = ast.SymbolFlagsTransient
const SymbolFlagsType = ast.SymbolFlagsType
const SymbolFlagsTypeAlias = ast.SymbolFlagsTypeAlias
const SymbolFlagsTypeAliasExcludes = ast.SymbolFlagsTypeAliasExcludes
const SymbolFlagsTypeLiteral = ast.SymbolFlagsTypeLiteral
const SymbolFlagsTypeParameter = ast.SymbolFlagsTypeParameter
const SymbolFlagsTypeParameterExcludes = ast.SymbolFlagsTypeParameterExcludes
const SymbolFlagsValue = ast.SymbolFlagsValue
const SymbolFlagsValueModule = ast.SymbolFlagsValueModule
const SymbolFlagsValueModuleExcludes = ast.SymbolFlagsValueModuleExcludes
const SymbolFlagsVariable = ast.SymbolFlagsVariable
type SymbolId = ast.SymbolId
//go:linkname SymbolName github.com/microsoft/typescript-go/internal/ast.SymbolName
func SymbolName(symbol *ast.Symbol) string
type SymbolTable = ast.SymbolTable
type SyntaxList = ast.SyntaxList
type SyntheticExpression = ast.SyntheticExpression
type SyntheticReferenceExpression = ast.SyntheticReferenceExpression
type TaggedTemplateExpression = ast.TaggedTemplateExpression
type TemplateExpression = ast.TemplateExpression
type TemplateHead = ast.TemplateHead
type TemplateHeadNode = ast.TemplateHeadNode
type TemplateLiteral = ast.TemplateLiteral
type TemplateLiteralLikeBase = ast.TemplateLiteralLikeBase
type TemplateLiteralLikeNode = ast.TemplateLiteralLikeNode
type TemplateLiteralTypeNode = ast.TemplateLiteralTypeNode
type TemplateLiteralTypeSpan = ast.TemplateLiteralTypeSpan
type TemplateLiteralTypeSpanList = ast.TemplateLiteralTypeSpanList
type TemplateLiteralTypeSpanNode = ast.TemplateLiteralTypeSpanNode
type TemplateMiddle = ast.TemplateMiddle
type TemplateMiddleNode = ast.TemplateMiddleNode
type TemplateMiddleOrTail = ast.TemplateMiddleOrTail
type TemplateSpan = ast.TemplateSpan
type TemplateSpanList = ast.TemplateSpanList
type TemplateSpanNode = ast.TemplateSpanNode
type TemplateTail = ast.TemplateTail
type TemplateTailNode = ast.TemplateTailNode
type ThisTypeNode = ast.ThisTypeNode
type ThrowStatement = ast.ThrowStatement
//go:linkname ToFindAncestorResult github.com/microsoft/typescript-go/internal/ast.ToFindAncestorResult
func ToFindAncestorResult(b bool) ast.FindAncestorResult
type Token = ast.Token
type TokenFlags = ast.TokenFlags
const TokenFlagsBinaryOrOctalSpecifier = ast.TokenFlagsBinaryOrOctalSpecifier
const TokenFlagsBinarySpecifier = ast.TokenFlagsBinarySpecifier
const TokenFlagsContainsInvalidEscape = ast.TokenFlagsContainsInvalidEscape
const TokenFlagsContainsInvalidSeparator = ast.TokenFlagsContainsInvalidSeparator
const TokenFlagsContainsLeadingZero = ast.TokenFlagsContainsLeadingZero
const TokenFlagsContainsSeparator = ast.TokenFlagsContainsSeparator
const TokenFlagsExtendedUnicodeEscape = ast.TokenFlagsExtendedUnicodeEscape
const TokenFlagsHexEscape = ast.TokenFlagsHexEscape
const TokenFlagsHexSpecifier = ast.TokenFlagsHexSpecifier
const TokenFlagsIsInvalid = ast.TokenFlagsIsInvalid
const TokenFlagsNone = ast.TokenFlagsNone
const TokenFlagsNumericLiteralFlags = ast.TokenFlagsNumericLiteralFlags
const TokenFlagsOctal = ast.TokenFlagsOctal
const TokenFlagsOctalSpecifier = ast.TokenFlagsOctalSpecifier
const TokenFlagsPrecedingJSDocComment = ast.TokenFlagsPrecedingJSDocComment
const TokenFlagsPrecedingJSDocLeadingAsterisks = ast.TokenFlagsPrecedingJSDocLeadingAsterisks
const TokenFlagsPrecedingLineBreak = ast.TokenFlagsPrecedingLineBreak
const TokenFlagsRegularExpressionLiteralFlags = ast.TokenFlagsRegularExpressionLiteralFlags
const TokenFlagsScientific = ast.TokenFlagsScientific
const TokenFlagsSingleQuote = ast.TokenFlagsSingleQuote
const TokenFlagsStringLiteralFlags = ast.TokenFlagsStringLiteralFlags
const TokenFlagsTemplateLiteralLikeFlags = ast.TokenFlagsTemplateLiteralLikeFlags
const TokenFlagsUnicodeEscape = ast.TokenFlagsUnicodeEscape
const TokenFlagsUnterminated = ast.TokenFlagsUnterminated
const TokenFlagsWithSpecifier = ast.TokenFlagsWithSpecifier
type TokenNode = ast.TokenNode
//go:linkname TryGetClassExtendingExpressionWithTypeArguments github.com/microsoft/typescript-go/internal/ast.TryGetClassExtendingExpressionWithTypeArguments
func TryGetClassExtendingExpressionWithTypeArguments(node *ast.Node) *ast.ClassLikeDeclaration
//go:linkname TryGetClassImplementingOrExtendingExpressionWithTypeArguments github.com/microsoft/typescript-go/internal/ast.TryGetClassImplementingOrExtendingExpressionWithTypeArguments
func TryGetClassImplementingOrExtendingExpressionWithTypeArguments(node *ast.Node) (class *ast.ClassLikeDeclaration, isImplements bool)
//go:linkname TryGetTextOfPropertyName github.com/microsoft/typescript-go/internal/ast.TryGetTextOfPropertyName
func TryGetTextOfPropertyName(name *ast.Node) (string, bool)
type TryStatement = ast.TryStatement
type TupleTypeNode = ast.TupleTypeNode
type TypeAliasDeclaration = ast.TypeAliasDeclaration
type TypeArgumentList = ast.TypeArgumentList
type TypeAssertion = ast.TypeAssertion
type TypeElement = ast.TypeElement
type TypeElementBase = ast.TypeElementBase
type TypeElementList = ast.TypeElementList
type TypeList = ast.TypeList
type TypeLiteral = ast.TypeLiteral
type TypeLiteralNode = ast.TypeLiteralNode
type TypeNode = ast.TypeNode
type TypeNodeBase = ast.TypeNodeBase
type TypeOfExpression = ast.TypeOfExpression
type TypeOnlyImportDeclaration = ast.TypeOnlyImportDeclaration
type TypeOperatorNode = ast.TypeOperatorNode
type TypeParameterDeclaration = ast.TypeParameterDeclaration
type TypeParameterDeclarationNode = ast.TypeParameterDeclarationNode
type TypeParameterList = ast.TypeParameterList
type TypePrecedence = ast.TypePrecedence
const TypePrecedenceConditional = ast.TypePrecedenceConditional
const TypePrecedenceFunction = ast.TypePrecedenceFunction
const TypePrecedenceHighest = ast.TypePrecedenceHighest
const TypePrecedenceIntersection = ast.TypePrecedenceIntersection
const TypePrecedenceJSDoc = ast.TypePrecedenceJSDoc
const TypePrecedenceLowest = ast.TypePrecedenceLowest
const TypePrecedenceNonArray = ast.TypePrecedenceNonArray
const TypePrecedencePostfix = ast.TypePrecedencePostfix
const TypePrecedenceTypeOperator = ast.TypePrecedenceTypeOperator
const TypePrecedenceUnion = ast.TypePrecedenceUnion
type TypePredicateNode = ast.TypePredicateNode
type TypePredicateParameterName = ast.TypePredicateParameterName
type TypeQueryNode = ast.TypeQueryNode
type TypeReferenceNode = ast.TypeReferenceNode
type UnionOrIntersectionTypeNode = ast.UnionOrIntersectionTypeNode
type UnionOrIntersectionTypeNodeBase = ast.UnionOrIntersectionTypeNodeBase
type UnionType = ast.UnionType
type UnionTypeNode = ast.UnionTypeNode
type ValidImportTypeNode = ast.ValidImportTypeNode
type VariableDeclaration = ast.VariableDeclaration
type VariableDeclarationList = ast.VariableDeclarationList
type VariableDeclarationListNode = ast.VariableDeclarationListNode
type VariableDeclarationNode = ast.VariableDeclarationNode
type VariableDeclarationNodeList = ast.VariableDeclarationNodeList
type VariableStatement = ast.VariableStatement
type Visitor = ast.Visitor
type VoidExpression = ast.VoidExpression
//go:linkname WalkUpBindingElementsAndPatterns github.com/microsoft/typescript-go/internal/ast.WalkUpBindingElementsAndPatterns
func WalkUpBindingElementsAndPatterns(binding *ast.Node) *ast.Node
//go:linkname WalkUpParenthesizedExpressions github.com/microsoft/typescript-go/internal/ast.WalkUpParenthesizedExpressions
func WalkUpParenthesizedExpressions(node *ast.Expression) *ast.Node
//go:linkname WalkUpParenthesizedTypes github.com/microsoft/typescript-go/internal/ast.WalkUpParenthesizedTypes
func WalkUpParenthesizedTypes(node *ast.TypeNode) *ast.Node
type WhileStatement = ast.WhileStatement
type WithStatement = ast.WithStatement
type YieldExpression = ast.YieldExpression
