// Code generated by tools/gen_shims. DO NOT EDIT.

package scanner

import (
	"iter"

	"github.com/microsoft/typescript-go/internal/ast"
	"github.com/microsoft/typescript-go/internal/core"
	"github.com/microsoft/typescript-go/internal/scanner"

	_ "unsafe"
)

//go:linkname ComputeLineOfPosition github.com/microsoft/typescript-go/internal/scanner.ComputeLineOfPosition
func ComputeLineOfPosition(lineStarts []core.TextPos, pos int) int
//go:linkname ComputePositionOfLineAndCharacter github.com/microsoft/typescript-go/internal/scanner.ComputePositionOfLineAndCharacter
func ComputePositionOfLineAndCharacter(lineStarts []core.TextPos, line int, character int) int
//go:linkname DeclarationNameToString github.com/microsoft/typescript-go/internal/scanner.DeclarationNameToString
func DeclarationNameToString(name *ast.Node) string
type ErrorCallback = scanner.ErrorCallback
type EscapeSequenceScanningFlags = scanner.EscapeSequenceScanningFlags
const EscapeSequenceScanningFlagsAllowExtendedUnicodeEscape = scanner.EscapeSequenceScanningFlagsAllowExtendedUnicodeEscape
const EscapeSequenceScanningFlagsAnnexB = scanner.EscapeSequenceScanningFlagsAnnexB
const EscapeSequenceScanningFlagsAnyUnicodeMode = scanner.EscapeSequenceScanningFlagsAnyUnicodeMode
const EscapeSequenceScanningFlagsAtomEscape = scanner.EscapeSequenceScanningFlagsAtomEscape
const EscapeSequenceScanningFlagsRegularExpression = scanner.EscapeSequenceScanningFlagsRegularExpression
const EscapeSequenceScanningFlagsReportErrors = scanner.EscapeSequenceScanningFlagsReportErrors
const EscapeSequenceScanningFlagsReportInvalidEscapeErrors = scanner.EscapeSequenceScanningFlagsReportInvalidEscapeErrors
const EscapeSequenceScanningFlagsString = scanner.EscapeSequenceScanningFlagsString
//go:linkname GetEndLinePosition github.com/microsoft/typescript-go/internal/scanner.GetEndLinePosition
func GetEndLinePosition(sourceFile *ast.SourceFile, line int) int
//go:linkname GetErrorRangeForNode github.com/microsoft/typescript-go/internal/scanner.GetErrorRangeForNode
func GetErrorRangeForNode(sourceFile *ast.SourceFile, node *ast.Node) core.TextRange
//go:linkname GetIdentifierToken github.com/microsoft/typescript-go/internal/scanner.GetIdentifierToken
func GetIdentifierToken(str string) ast.Kind
//go:linkname GetLeadingCommentRanges github.com/microsoft/typescript-go/internal/scanner.GetLeadingCommentRanges
func GetLeadingCommentRanges(f *ast.NodeFactory, text string, pos int) iter.Seq[ast.CommentRange]
//go:linkname GetLineAndCharacterOfPosition github.com/microsoft/typescript-go/internal/scanner.GetLineAndCharacterOfPosition
func GetLineAndCharacterOfPosition(sourceFile ast.SourceFileLike, pos int) (line int, character int)
//go:linkname GetLineStarts github.com/microsoft/typescript-go/internal/scanner.GetLineStarts
func GetLineStarts(sourceFile ast.SourceFileLike) []core.TextPos
//go:linkname GetPositionOfLineAndCharacter github.com/microsoft/typescript-go/internal/scanner.GetPositionOfLineAndCharacter
func GetPositionOfLineAndCharacter(sourceFile *ast.SourceFile, line int, character int) int
//go:linkname GetRangeOfTokenAtPosition github.com/microsoft/typescript-go/internal/scanner.GetRangeOfTokenAtPosition
func GetRangeOfTokenAtPosition(sourceFile *ast.SourceFile, pos int) core.TextRange
//go:linkname GetScannerForSourceFile github.com/microsoft/typescript-go/internal/scanner.GetScannerForSourceFile
func GetScannerForSourceFile(sourceFile *ast.SourceFile, pos int) *scanner.Scanner
//go:linkname GetShebang github.com/microsoft/typescript-go/internal/scanner.GetShebang
func GetShebang(text string) string
//go:linkname GetSourceTextOfNodeFromSourceFile github.com/microsoft/typescript-go/internal/scanner.GetSourceTextOfNodeFromSourceFile
func GetSourceTextOfNodeFromSourceFile(sourceFile *ast.SourceFile, node *ast.Node, includeTrivia bool) string
//go:linkname GetTextOfNode github.com/microsoft/typescript-go/internal/scanner.GetTextOfNode
func GetTextOfNode(node *ast.Node) string
//go:linkname GetTextOfNodeFromSourceText github.com/microsoft/typescript-go/internal/scanner.GetTextOfNodeFromSourceText
func GetTextOfNodeFromSourceText(sourceText string, node *ast.Node, includeTrivia bool) string
//go:linkname GetTokenPosOfNode github.com/microsoft/typescript-go/internal/scanner.GetTokenPosOfNode
func GetTokenPosOfNode(node *ast.Node, sourceFile *ast.SourceFile, includeJSDoc bool) int
//go:linkname GetTrailingCommentRanges github.com/microsoft/typescript-go/internal/scanner.GetTrailingCommentRanges
func GetTrailingCommentRanges(f *ast.NodeFactory, text string, pos int) iter.Seq[ast.CommentRange]
//go:linkname GetViableKeywordSuggestions github.com/microsoft/typescript-go/internal/scanner.GetViableKeywordSuggestions
func GetViableKeywordSuggestions() []string
//go:linkname IdentifierToKeywordKind github.com/microsoft/typescript-go/internal/scanner.IdentifierToKeywordKind
func IdentifierToKeywordKind(node *ast.Identifier) ast.Kind
//go:linkname IsIdentifierPart github.com/microsoft/typescript-go/internal/scanner.IsIdentifierPart
func IsIdentifierPart(ch rune) bool
//go:linkname IsIdentifierPartEx github.com/microsoft/typescript-go/internal/scanner.IsIdentifierPartEx
func IsIdentifierPartEx(ch rune, languageVariant core.LanguageVariant) bool
//go:linkname IsIdentifierStart github.com/microsoft/typescript-go/internal/scanner.IsIdentifierStart
func IsIdentifierStart(ch rune) bool
//go:linkname IsIdentifierText github.com/microsoft/typescript-go/internal/scanner.IsIdentifierText
func IsIdentifierText(name string, languageVariant core.LanguageVariant) bool
//go:linkname IsIntrinsicJsxName github.com/microsoft/typescript-go/internal/scanner.IsIntrinsicJsxName
func IsIntrinsicJsxName(name string) bool
//go:linkname IsValidIdentifier github.com/microsoft/typescript-go/internal/scanner.IsValidIdentifier
func IsValidIdentifier(s string) bool
//go:linkname NewScanner github.com/microsoft/typescript-go/internal/scanner.NewScanner
func NewScanner() *scanner.Scanner
//go:linkname ScanTokenAtPosition github.com/microsoft/typescript-go/internal/scanner.ScanTokenAtPosition
func ScanTokenAtPosition(sourceFile *ast.SourceFile, pos int) ast.Kind
type Scanner = scanner.Scanner
type ScannerState = scanner.ScannerState
//go:linkname SkipTrivia github.com/microsoft/typescript-go/internal/scanner.SkipTrivia
func SkipTrivia(text string, pos int) int
//go:linkname SkipTriviaEx github.com/microsoft/typescript-go/internal/scanner.SkipTriviaEx
func SkipTriviaEx(text string, pos int, options *scanner.SkipTriviaOptions) int
type SkipTriviaOptions = scanner.SkipTriviaOptions
//go:linkname StringToToken github.com/microsoft/typescript-go/internal/scanner.StringToToken
func StringToToken(s string) ast.Kind
//go:linkname TokenToString github.com/microsoft/typescript-go/internal/scanner.TokenToString
func TokenToString(token ast.Kind) string

//go:linkname GetCommentDirectives github.com/microsoft/typescript-go/internal/scanner.(*Scanner).CommentDirectives
func GetCommentDirectives(s *Scanner) []ast.CommentDirective
